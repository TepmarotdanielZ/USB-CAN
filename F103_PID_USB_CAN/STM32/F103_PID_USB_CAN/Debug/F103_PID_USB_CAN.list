
F103_PID_USB_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c0  080049c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080049c0  080049c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c0  080049c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080049d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080049d4  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a77d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2b  00000000  00000000  0002a7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000896  00000000  00000000  0002d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176a6  00000000  00000000  0002d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbae  00000000  00000000  00045094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ba8  00000000  00000000  00050c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000302c  00000000  00000000  000d87ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000db818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004984 	.word	0x08004984

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004984 	.word	0x08004984

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <PID_Init>:
#include "PID.h"

void PID_Init(PIDController *pid, int N_input) {//nMotor is the number of motor to control
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]

	/* Clear controller variables */
	for(int i = 0;i < N_input; i++){
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	e025      	b.n	8000e00 <PID_Init+0x5c>
		pid->integrator[i] = 0.0f;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	3206      	adds	r2, #6
 8000dba:	f04f 0100 	mov.w	r1, #0
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevError[i]  = 0.0f;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	320c      	adds	r2, #12
 8000dc8:	f04f 0100 	mov.w	r1, #0
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->differentiator[i]  = 0.0f;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	3212      	adds	r2, #18
 8000dd6:	f04f 0100 	mov.w	r1, #0
 8000dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevMeasurement[i] = 0.0f;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	3218      	adds	r2, #24
 8000de4:	f04f 0100 	mov.w	r1, #0
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->out[i] = 0.0f;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	321e      	adds	r2, #30
 8000df2:	f04f 0100 	mov.w	r1, #0
 8000df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0;i < N_input; i++){
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbd5      	blt.n	8000db4 <PID_Init+0x10>
	}


}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <PID>:

float PID(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i){// "i" input identity
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	/*
	* -------------------------------------Error signal------------------------------------------
	*/
	float error = setpoint - measurement;;
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f7ff fccd 	bl	80007c4 <__aeabi_fsub>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	617b      	str	r3, [r7, #20]
	/*
	* Proportional
	*/
    float proportional = Kp * error;
 8000e2e:	6979      	ldr	r1, [r7, #20]
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f7ff fdd1 	bl	80009d8 <__aeabi_fmul>
 8000e36:	4603      	mov	r3, r0
 8000e38:	613b      	str	r3, [r7, #16]
	/*
	* ----------------------------------------Integral-----------------------------------------------
	*/
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e3e:	3206      	adds	r2, #6
 8000e40:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000e44:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e4a:	f7ff fdc5 	bl	80009d8 <__aeabi_fmul>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f7ff fdbd 	bl	80009d8 <__aeabi_fmul>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461d      	mov	r5, r3
    					* (error + pid->prevError[i]);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e66:	320c      	adds	r2, #12
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	6979      	ldr	r1, [r7, #20]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fcaa 	bl	80007c8 <__addsf3>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f7ff fdad 	bl	80009d8 <__aeabi_fmul>
 8000e7e:	4603      	mov	r3, r0
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8000e80:	4619      	mov	r1, r3
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff fca0 	bl	80007c8 <__addsf3>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e90:	3206      	adds	r2, #6
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator[i] > pid->limMaxInt) {
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e9a:	3206      	adds	r2, #6
 8000e9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	f7ff ff52 	bl	8000d50 <__aeabi_fcmpgt>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <PID+0xae>
        pid->integrator[i] = pid->limMaxInt;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6919      	ldr	r1, [r3, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eba:	3206      	adds	r2, #6
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000ec0:	e01f      	b.n	8000f02 <PID+0xee>
    }
    else if (pid->integrator[i] < pid->limMinInt) {
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ec6:	3206      	adds	r2, #6
 8000ec8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f7ff ff1e 	bl	8000d14 <__aeabi_fcmplt>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <PID+0xda>
        pid->integrator[i] = pid->limMinInt;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	68d9      	ldr	r1, [r3, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ee6:	3206      	adds	r2, #6
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000eec:	e009      	b.n	8000f02 <PID+0xee>
    }
    else{
    	pid->integrator[i] = pid->integrator[i];
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef2:	3206      	adds	r2, #6
 8000ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000efc:	3206      	adds	r2, #6
 8000efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/*
	* Derivative (band-limited differentator)
	*/
		
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc5e 	bl	80007c8 <__addsf3>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461c      	mov	r4, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f14:	3218      	adds	r2, #24
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fc51 	bl	80007c4 <__aeabi_fsub>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff fd56 	bl	80009d8 <__aeabi_fmul>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461c      	mov	r4, r3
                        	 + (2.0f * pid->tau - pid->T) * pid->differentiator[i])
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc46 	bl	80007c8 <__addsf3>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f7ff fc3c 	bl	80007c4 <__aeabi_fsub>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f54:	3212      	adds	r2, #18
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f7ff fd3c 	bl	80009d8 <__aeabi_fmul>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4619      	mov	r1, r3
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff fc2f 	bl	80007c8 <__addsf3>
 8000f6a:	4603      	mov	r3, r0
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000f6c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
							 / (2.0f * pid->tau + pid->T);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fc26 	bl	80007c8 <__addsf3>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f7ff fc1e 	bl	80007c8 <__addsf3>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4620      	mov	r0, r4
 8000f92:	f7ff fdd5 	bl	8000b40 <__aeabi_fdiv>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4619      	mov	r1, r3
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f9e:	3212      	adds	r2, #18
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*
	* Compute output and apply limits
	*/
    pid->out[i] = proportional + pid->integrator[i] + pid->differentiator[i];
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fa8:	3206      	adds	r2, #6
 8000faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fc09 	bl	80007c8 <__addsf3>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fbe:	3212      	adds	r2, #18
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fbff 	bl	80007c8 <__addsf3>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fd2:	321e      	adds	r2, #30
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    //sat[i] = pid->out[i];
    if (pid->out[i] > pid->limMax) {
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fdc:	321e      	adds	r2, #30
 8000fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4610      	mov	r0, r2
 8000fea:	f7ff feb1 	bl	8000d50 <__aeabi_fcmpgt>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <PID+0x1f0>
        pid->out[i] = pid->limMax;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6899      	ldr	r1, [r3, #8]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ffc:	321e      	adds	r2, #30
 8000ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001002:	e01f      	b.n	8001044 <PID+0x230>
    }
    else if (pid->out[i] < pid->limMin) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001008:	321e      	adds	r2, #30
 800100a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f7ff fe7d 	bl	8000d14 <__aeabi_fcmplt>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <PID+0x21c>
        pid->out[i] = pid->limMin;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001028:	321e      	adds	r2, #30
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800102e:	e009      	b.n	8001044 <PID+0x230>
    }
    else{
    	pid->out[i] = pid->out[i];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001034:	321e      	adds	r2, #30
 8001036:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800103e:	321e      	adds	r2, #30
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Store error and measurement for later use */
    pid->prevError[i]       = error;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001048:	320c      	adds	r2, #12
 800104a:	6979      	ldr	r1, [r7, #20]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pid->prevMeasurement[i] = measurement;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001054:	3218      	adds	r2, #24
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Return controller output */
    return pid->out[i];
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001060:	321e      	adds	r2, #30
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001070 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <MX_CAN_Init+0xa0>)
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <MX_CAN_Init+0xa4>)
 800107a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_CAN_Init+0xa0>)
 800107e:	2209      	movs	r2, #9
 8001080:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <MX_CAN_Init+0xa0>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_CAN_Init+0xa0>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_CAN_Init+0xa0>)
 8001090:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001094:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_CAN_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_CAN_Init+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_CAN_Init+0xa0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_CAN_Init+0xa0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_CAN_Init+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_CAN_Init+0xa0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_CAN_Init+0xa0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_CAN_Init+0xa0>)
 80010c2:	f000 fef7 	bl	8001eb4 <HAL_CAN_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80010cc:	f000 fc20 	bl	8001910 <Error_Handler>

  /* ADDRESS CAN */

	  CAN_FilterTypeDef canfilterconfig;

	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80010d4:	230a      	movs	r3, #10
 80010d6:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80010d8:	2301      	movs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterIdHigh = 0x111<<5;
 80010dc:	f242 2320 	movw	r3, #8736	; 0x2220
 80010e0:	603b      	str	r3, [r7, #0]
	  canfilterconfig.FilterIdLow = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 80010e6:	f242 2320 	movw	r3, #8736	; 0x2220
 80010ea:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
	  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_CAN_Init+0xa0>)
 8001102:	f000 ffd2 	bl	80020aa <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000028 	.word	0x20000028
 8001114:	40006400 	.word	0x40006400

08001118 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <HAL_CAN_MspInit+0x9c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d139      	bne.n	80011ac <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_CAN_MspInit+0xa0>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <HAL_CAN_MspInit+0xa0>)
 800113e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001142:	61d3      	str	r3, [r2, #28]
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_CAN_MspInit+0xa0>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_CAN_MspInit+0xa0>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_CAN_MspInit+0xa0>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_CAN_MspInit+0xa0>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <HAL_CAN_MspInit+0xa4>)
 800117e:	f001 fde7 	bl	8002d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <HAL_CAN_MspInit+0xa4>)
 8001198:	f001 fdda 	bl	8002d50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2015      	movs	r0, #21
 80011a2:	f001 fd9e 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011a6:	2015      	movs	r0, #21
 80011a8:	f001 fdb7 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40006400 	.word	0x40006400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_GPIO_Init+0x40>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <MX_GPIO_Init+0x40>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_GPIO_Init+0x40>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_GPIO_Init+0x40>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <MX_GPIO_Init+0x40>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <MX_GPIO_Init+0x40>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000

08001204 <map>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* MAP */

float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff fad5 	bl	80007c4 <__aeabi_fsub>
 800121a:	4603      	mov	r3, r0
 800121c:	461c      	mov	r4, r3
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	6a38      	ldr	r0, [r7, #32]
 8001222:	f7ff facf 	bl	80007c4 <__aeabi_fsub>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff fbd4 	bl	80009d8 <__aeabi_fmul>
 8001230:	4603      	mov	r3, r0
 8001232:	461c      	mov	r4, r3
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fac4 	bl	80007c4 <__aeabi_fsub>
 800123c:	4603      	mov	r3, r0
 800123e:	4619      	mov	r1, r3
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fc7d 	bl	8000b40 <__aeabi_fdiv>
 8001246:	4603      	mov	r3, r0
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fabc 	bl	80007c8 <__addsf3>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}
	...

0800125c <HAL_CAN_RxFifo1MsgPendingCallback>:


/* STM32 INTERUPP RECEIVER FROM USB CAN */

	void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af02      	add	r7, sp, #8
 8001262:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001264:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001268:	2101      	movs	r1, #1
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f001 f8f9 	bl	8002462 <HAL_CAN_GetRxMessage>
		cntt++;
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b3c      	ldr	r3, [pc, #240]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 800127a:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 800127c:	e007      	b.n	800128e <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	483b      	ldr	r0, [pc, #236]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8001284:	f001 fee0 	bl	8003048 <HAL_GPIO_TogglePin>
			cntt = 0;
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d8f3      	bhi.n	800127e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		}

	/* DATA RECIEVER FROM USB CAN */

		if (RxHeader.DLC == 8) {
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b08      	cmp	r3, #8
 800129c:	d15e      	bne.n	800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
		RxData1 = (RxData[0] << 8) | RxData[1];
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012a6:	7852      	ldrb	r2, [r2, #1]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fb40 	bl	8000930 <__aeabi_i2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a30      	ldr	r2, [pc, #192]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80012b4:	6013      	str	r3, [r2, #0]
		RxData2 = (RxData[2] << 8) | RxData[3];
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4a29      	ldr	r2, [pc, #164]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012be:	78d2      	ldrb	r2, [r2, #3]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb34 	bl	8000930 <__aeabi_i2f>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80012cc:	6013      	str	r3, [r2, #0]
		RxData3 = (RxData[4] << 8) | RxData[5];
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012d0:	791b      	ldrb	r3, [r3, #4]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	4a23      	ldr	r2, [pc, #140]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012d6:	7952      	ldrb	r2, [r2, #5]
 80012d8:	4313      	orrs	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fb28 	bl	8000930 <__aeabi_i2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a26      	ldr	r2, [pc, #152]	; (800137c <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 80012e4:	6013      	str	r3, [r2, #0]
		RxData4 = (RxData[6] << 8) | RxData[7];
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80012ee:	79d2      	ldrb	r2, [r2, #7]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fb1c 	bl	8000930 <__aeabi_i2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80012fc:	6013      	str	r3, [r2, #0]

	/* TRANFER TO SPEED */

		/* M MOTOR */

			M1 = RxData1;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8001304:	6013      	str	r3, [r2, #0]
			M2 = RxData2;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800130c:	6013      	str	r3, [r2, #0]
			M3 = RxData3;
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8001314:	6013      	str	r3, [r2, #0]
			M4 = RxData4;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 800131c:	6013      	str	r3, [r2, #0]

			/* MAP TX DATA FROM 8BIT TO 16BIT (MOTOR ) */

				/* MAPPING MOTOR */

					M1_out = map(M1, 0, 65535, -64, 64);
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 800132c:	f04f 0100 	mov.w	r1, #0
 8001330:	f7ff ff68 	bl	8001204 <map>
 8001334:	4603      	mov	r3, r0
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001338:	6013      	str	r3, [r2, #0]
					M2_out = map(M2, 0, 65535, -64, 64);
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	f7ff ff5a 	bl	8001204 <map>
 8001350:	4603      	mov	r3, r0
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8001354:	6013      	str	r3, [r2, #0]

					flag = 1;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
	}
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000fc 	.word	0x200000fc
 8001368:	200000e0 	.word	0x200000e0
 800136c:	2000015d 	.word	0x2000015d
 8001370:	40011000 	.word	0x40011000
 8001374:	20000128 	.word	0x20000128
 8001378:	2000012c 	.word	0x2000012c
 800137c:	20000130 	.word	0x20000130
 8001380:	20000134 	.word	0x20000134
 8001384:	20000138 	.word	0x20000138
 8001388:	2000013c 	.word	0x2000013c
 800138c:	20000140 	.word	0x20000140
 8001390:	20000144 	.word	0x20000144
 8001394:	c2800000 	.word	0xc2800000
 8001398:	477fff00 	.word	0x477fff00
 800139c:	20000154 	.word	0x20000154
 80013a0:	20000158 	.word	0x20000158
 80013a4:	2000015c 	.word	0x2000015c

080013a8 <Motors_RPS>:

float Motors_RPS(int j, float SampleTime, float N_round)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]

	/* ENCODER MODE */

		new_count[j] = TIM1->CNT;
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <Motors_RPS+0x1b0>)
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	b299      	uxth	r1, r3
 80013ba:	4a68      	ldr	r2, [pc, #416]	; (800155c <Motors_RPS+0x1b4>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		count_state[j] = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <Motors_RPS+0x1b8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	4a62      	ldr	r2, [pc, #392]	; (8001564 <Motors_RPS+0x1bc>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	460a      	mov	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]

		if (count_state[j])
 80013e2:	4a60      	ldr	r2, [pc, #384]	; (8001564 <Motors_RPS+0x1bc>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d045      	beq.n	800147a <Motors_RPS+0xd2>
			{
				if (new_count[j] <= count[j])
 80013ee:	4a5b      	ldr	r2, [pc, #364]	; (800155c <Motors_RPS+0x1b4>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013f6:	495c      	ldr	r1, [pc, #368]	; (8001568 <Motors_RPS+0x1c0>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d80e      	bhi.n	8001420 <Motors_RPS+0x78>
				{
					diff[j] = count[j] - new_count[j]; /* CHECK FOR COUNTER UNDERFLOW */
 8001402:	4a59      	ldr	r2, [pc, #356]	; (8001568 <Motors_RPS+0x1c0>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800140a:	4954      	ldr	r1, [pc, #336]	; (800155c <Motors_RPS+0x1b4>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	b299      	uxth	r1, r3
 8001416:	4a55      	ldr	r2, [pc, #340]	; (800156c <Motors_RPS+0x1c4>)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800141e:	e00d      	b.n	800143c <Motors_RPS+0x94>
				}
				else
				{
					diff[j] = (65536 - new_count[j]) + count[j];
 8001420:	4a51      	ldr	r2, [pc, #324]	; (8001568 <Motors_RPS+0x1c0>)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001428:	494c      	ldr	r1, [pc, #304]	; (800155c <Motors_RPS+0x1b4>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b299      	uxth	r1, r3
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <Motors_RPS+0x1c4>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime)*-1;
 800143c:	4a4b      	ldr	r2, [pc, #300]	; (800156c <Motors_RPS+0x1c4>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fa6f 	bl	8000928 <__aeabi_ui2f>
 800144a:	4603      	mov	r3, r0
 800144c:	4948      	ldr	r1, [pc, #288]	; (8001570 <Motors_RPS+0x1c8>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fac2 	bl	80009d8 <__aeabi_fmul>
 8001454:	4603      	mov	r3, r0
 8001456:	461c      	mov	r4, r3
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fabc 	bl	80009d8 <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff fb6b 	bl	8000b40 <__aeabi_fdiv>
 800146a:	4603      	mov	r3, r0
 800146c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001470:	4940      	ldr	r1, [pc, #256]	; (8001574 <Motors_RPS+0x1cc>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001478:	e043      	b.n	8001502 <Motors_RPS+0x15a>
			}
			else
			{
				if (new_count[j] >= count[j])
 800147a:	4a38      	ldr	r2, [pc, #224]	; (800155c <Motors_RPS+0x1b4>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001482:	4939      	ldr	r1, [pc, #228]	; (8001568 <Motors_RPS+0x1c0>)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800148a:	429a      	cmp	r2, r3
 800148c:	d30e      	bcc.n	80014ac <Motors_RPS+0x104>
				{
					diff[j] = new_count[j] - count[j]; /* CHECK FOR COUNTER OVERFLOW */
 800148e:	4a33      	ldr	r2, [pc, #204]	; (800155c <Motors_RPS+0x1b4>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001496:	4934      	ldr	r1, [pc, #208]	; (8001568 <Motors_RPS+0x1c0>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	b299      	uxth	r1, r3
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <Motors_RPS+0x1c4>)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014aa:	e00d      	b.n	80014c8 <Motors_RPS+0x120>
				}
				else
				{
					diff[j] = (65536 - count[j]) + new_count[j];
 80014ac:	4a2b      	ldr	r2, [pc, #172]	; (800155c <Motors_RPS+0x1b4>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014b4:	492c      	ldr	r1, [pc, #176]	; (8001568 <Motors_RPS+0x1c0>)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	b299      	uxth	r1, r3
 80014c0:	4a2a      	ldr	r2, [pc, #168]	; (800156c <Motors_RPS+0x1c4>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime);
 80014c8:	4a28      	ldr	r2, [pc, #160]	; (800156c <Motors_RPS+0x1c4>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fa29 	bl	8000928 <__aeabi_ui2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4925      	ldr	r1, [pc, #148]	; (8001570 <Motors_RPS+0x1c8>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fa7c 	bl	80009d8 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461c      	mov	r4, r3
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fa76 	bl	80009d8 <__aeabi_fmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fb25 	bl	8000b40 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <Motors_RPS+0x1cc>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			rdps[j] = -2.0f * pi * speedM[j];
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <Motors_RPS+0x1cc>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f8ae 	bl	800066c <__aeabi_f2d>
 8001510:	a30f      	add	r3, pc, #60	; (adr r3, 8001550 <Motors_RPS+0x1a8>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7fe fe1b 	bl	8000150 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff f8fb 	bl	800071c <__aeabi_d2f>
 8001526:	4602      	mov	r2, r0
 8001528:	4913      	ldr	r1, [pc, #76]	; (8001578 <Motors_RPS+0x1d0>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count[j] = new_count[j];
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <Motors_RPS+0x1b4>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <Motors_RPS+0x1c0>)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			return rdps[j];
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <Motors_RPS+0x1d0>)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	c083126f 	.word	0xc083126f
 8001554:	c01921ca 	.word	0xc01921ca
 8001558:	40012c00 	.word	0x40012c00
 800155c:	20000164 	.word	0x20000164
 8001560:	20000180 	.word	0x20000180
 8001564:	20000168 	.word	0x20000168
 8001568:	20000160 	.word	0x20000160
 800156c:	2000016c 	.word	0x2000016c
 8001570:	447a0000 	.word	0x447a0000
 8001574:	20000170 	.word	0x20000170
 8001578:	20000174 	.word	0x20000174

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/* INNITAIL PARAMET PID */

		PID_Init(&MPID, 1);
 8001582:	2101      	movs	r1, #1
 8001584:	484f      	ldr	r0, [pc, #316]	; (80016c4 <main+0x148>)
 8001586:	f7ff fc0d 	bl	8000da4 <PID_Init>
		MPID.T = 0.02;		/* T = 10MS */
 800158a:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <main+0x148>)
 800158c:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <main+0x14c>)
 800158e:	615a      	str	r2, [r3, #20]
		MPID.limMax = 1000;
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <main+0x148>)
 8001592:	4a4e      	ldr	r2, [pc, #312]	; (80016cc <main+0x150>)
 8001594:	609a      	str	r2, [r3, #8]
		MPID.limMin = -1000;
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <main+0x148>)
 8001598:	4a4d      	ldr	r2, [pc, #308]	; (80016d0 <main+0x154>)
 800159a:	605a      	str	r2, [r3, #4]
		MPID.limMaxInt = 1000;
 800159c:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <main+0x148>)
 800159e:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <main+0x150>)
 80015a0:	611a      	str	r2, [r3, #16]
		MPID.limMinInt = -1000;
 80015a2:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <main+0x148>)
 80015a4:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <main+0x154>)
 80015a6:	60da      	str	r2, [r3, #12]
		MPID.tau = 0;	/* FOR Kd */
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <main+0x148>)
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f000 fc1e 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f8a8 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f7ff fe02 	bl	80011c0 <MX_GPIO_Init>
  MX_CAN_Init();
 80015bc:	f7ff fd58 	bl	8001070 <MX_CAN_Init>
  MX_TIM1_Init();
 80015c0:	f000 fa20 	bl	8001a04 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015c4:	f000 fa76 	bl	8001ab4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015c8:	f000 fac0 	bl	8001b4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	/* CAN */

		HAL_CAN_Start(&hcan);
 80015cc:	4841      	ldr	r0, [pc, #260]	; (80016d4 <main+0x158>)
 80015ce:	f000 fe35 	bl	800223c <HAL_CAN_Start>

	/* STRUCTUR TRANSMITTER DATA */

		HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80015d2:	2110      	movs	r1, #16
 80015d4:	483f      	ldr	r0, [pc, #252]	; (80016d4 <main+0x158>)
 80015d6:	f001 f865 	bl	80026a4 <HAL_CAN_ActivateNotification>
		TxHeader.DLC = 8;
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <main+0x15c>)
 80015dc:	2208      	movs	r2, #8
 80015de:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 80015e0:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <main+0x15c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 80015e6:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <main+0x15c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = 0x103; /* 0b11001010001 */
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <main+0x15c>)
 80015ee:	f240 1203 	movw	r2, #259	; 0x103
 80015f2:	601a      	str	r2, [r3, #0]

	/* TIMER ENCODER MODE */

		 HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80015f4:	213c      	movs	r1, #60	; 0x3c
 80015f6:	4839      	ldr	r0, [pc, #228]	; (80016dc <main+0x160>)
 80015f8:	f002 fb50 	bl	8003c9c <HAL_TIM_Encoder_Start>

	/* TIMER */

		HAL_TIM_Base_Start_IT(&htim2);
 80015fc:	4838      	ldr	r0, [pc, #224]	; (80016e0 <main+0x164>)
 80015fe:	f002 f96b 	bl	80038d8 <HAL_TIM_Base_Start_IT>


	/* TIMER 3 MOTOR */

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001602:	2100      	movs	r1, #0
 8001604:	4837      	ldr	r0, [pc, #220]	; (80016e4 <main+0x168>)
 8001606:	f002 fa0b 	bl	8003a20 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800160a:	2104      	movs	r1, #4
 800160c:	4835      	ldr	r0, [pc, #212]	; (80016e4 <main+0x168>)
 800160e:	f002 fa07 	bl	8003a20 <HAL_TIM_PWM_Start>


	/* MAP TX DATA FROM 8BIT TO 16BIT (RGB) */

		V1_out = map(V, 0, 255, 0, 65535);
 8001612:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <main+0x16c>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f986 	bl	8000928 <__aeabi_ui2f>
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <main+0x170>)
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <main+0x174>)
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	f7ff fdeb 	bl	8001204 <map>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb97 	bl	8000d64 <__aeabi_f2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <main+0x178>)
 800163c:	801a      	strh	r2, [r3, #0]
		V2_out = map(V, 0, 225, 0, 65535);
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <main+0x16c>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f970 	bl	8000928 <__aeabi_ui2f>
 8001648:	4b28      	ldr	r3, [pc, #160]	; (80016ec <main+0x170>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <main+0x17c>)
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	f7ff fdd5 	bl	8001204 <map>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb81 	bl	8000d64 <__aeabi_f2uiz>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <main+0x180>)
 8001668:	801a      	strh	r2, [r3, #0]
		V3_out = map(V, 0, 225, 0, 65535);
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <main+0x16c>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f95a 	bl	8000928 <__aeabi_ui2f>
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <main+0x170>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <main+0x17c>)
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f7ff fdbf 	bl	8001204 <map>
 8001686:	4603      	mov	r3, r0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fb6b 	bl	8000d64 <__aeabi_f2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <main+0x184>)
 8001694:	801a      	strh	r2, [r3, #0]
		V4_out = map(V, 0, 225, 0, 65535);
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <main+0x16c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f944 	bl	8000928 <__aeabi_ui2f>
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <main+0x170>)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <main+0x17c>)
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	f7ff fda9 	bl	8001204 <map>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb55 	bl	8000d64 <__aeabi_f2uiz>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <main+0x188>)
 80016c0:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <main+0x146>
 80016c4:	20000050 	.word	0x20000050
 80016c8:	3ca3d70a 	.word	0x3ca3d70a
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	c47a0000 	.word	0xc47a0000
 80016d4:	20000028 	.word	0x20000028
 80016d8:	20000104 	.word	0x20000104
 80016dc:	20000180 	.word	0x20000180
 80016e0:	200001c8 	.word	0x200001c8
 80016e4:	20000210 	.word	0x20000210
 80016e8:	20000148 	.word	0x20000148
 80016ec:	477fff00 	.word	0x477fff00
 80016f0:	437f0000 	.word	0x437f0000
 80016f4:	2000014a 	.word	0x2000014a
 80016f8:	43610000 	.word	0x43610000
 80016fc:	2000014c 	.word	0x2000014c
 8001700:	2000014e 	.word	0x2000014e
 8001704:	20000150 	.word	0x20000150

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b090      	sub	sp, #64	; 0x40
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	2228      	movs	r2, #40	; 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f003 f908 	bl	800492c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001746:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fc93 	bl	800307c <HAL_RCC_OscConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800175c:	f000 f8d8 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001760:	230f      	movs	r3, #15
 8001762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001764:	2302      	movs	r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2102      	movs	r1, #2
 800177a:	4618      	mov	r0, r3
 800177c:	f001 ff00 	bl	8003580 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001786:	f000 f8c3 	bl	8001910 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3740      	adds	r7, #64	; 0x40
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


/* MAKER TIMER INTERRUPP 1mS */

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b087      	sub	sp, #28
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	f040 808b 	bne.w	80018be <HAL_TIM_PeriodElapsedCallback+0x12a>

			/* PID */

				/* PID NEED TO CHANGE FOR USING */

					pwm_M1 = PID(&MPID, M1_out, Motor1_speed, MKp, MKi, MKd, Motor1);
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80017c0:	4845      	ldr	r0, [pc, #276]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80017c2:	f7ff fb27 	bl	8000e14 <PID>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a44      	ldr	r2, [pc, #272]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017ca:	6013      	str	r3, [r2, #0]

				/* MEASURMENT FEEDBACK SPEED */

					Motor1_speed = Motors_RPS(Motor1, Sample_time, CPR);
 80017cc:	4a44      	ldr	r2, [pc, #272]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80017ce:	4945      	ldr	r1, [pc, #276]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fde9 	bl	80013a8 <Motors_RPS>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a3c      	ldr	r2, [pc, #240]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80017da:	6013      	str	r3, [r2, #0]

					if (M1_out > 0) {
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fab3 	bl	8000d50 <__aeabi_fcmpgt>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <HAL_TIM_PeriodElapsedCallback+0x74>
						TIM3->CCR1 = 0;
 80017f0:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
						TIM3->CCR2 = pwm_M1;
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4c3b      	ldr	r4, [pc, #236]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fab1 	bl	8000d64 <__aeabi_f2uiz>
 8001802:	4603      	mov	r3, r0
 8001804:	63a3      	str	r3, [r4, #56]	; 0x38
 8001806:	e01d      	b.n	8001844 <HAL_TIM_PeriodElapsedCallback+0xb0>
					}
					else if(M1_out < 0) {
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 0100 	mov.w	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa7f 	bl	8000d14 <__aeabi_fcmplt>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <HAL_TIM_PeriodElapsedCallback+0xa4>
						TIM3->CCR1 = -1 * pwm_M1;
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x148>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001824:	4c30      	ldr	r4, [pc, #192]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa9c 	bl	8000d64 <__aeabi_f2uiz>
 800182c:	4603      	mov	r3, r0
 800182e:	6363      	str	r3, [r4, #52]	; 0x34
						TIM3->CCR2 = 0;
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001832:	2200      	movs	r2, #0
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
 8001836:	e005      	b.n	8001844 <HAL_TIM_PeriodElapsedCallback+0xb0>
					}
					else
					{
						TIM3->CCR2 = 0;
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800183a:	2200      	movs	r2, #0
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
						TIM3->CCR1 = 0;
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
					}


		/* TX DATA SEND TO PC MAP 16BIT TO 8BIT COZ DATA CAN 1DATA=8BIT */

			TxData[0] = ((V1_out & 0xFF00) >> 8);
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001850:	701a      	strb	r2, [r3, #0]
			TxData[1] = (V1_out & 0x00FF);
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800185a:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((V2_out & 0xFF00) >> 8);
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b29b      	uxth	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001868:	709a      	strb	r2, [r3, #2]
			TxData[3] = (V2_out & 0x00FF);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001872:	70da      	strb	r2, [r3, #3]
			TxData[4] = ((V3_out & 0xFF00) >> 8);
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	b29b      	uxth	r3, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001880:	711a      	strb	r2, [r3, #4]
			TxData[5] = (V3_out & 0x00FF);
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800188a:	715a      	strb	r2, [r3, #5]
			TxData[6] = ((V4_out & 0xFF00) >> 8);
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x168>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b29b      	uxth	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001898:	719a      	strb	r2, [r3, #6]
			TxData[7] = (V4_out & 0x00FF);
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x168>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018a2:	71da      	strb	r2, [r3, #7]

			if (flag ==1) {
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0x12a>
				HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018b0:	4915      	ldr	r1, [pc, #84]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80018b2:	4816      	ldr	r0, [pc, #88]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80018b4:	f000 fd06 	bl	80022c4 <HAL_CAN_AddTxMessage>
				flag=0;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]

			}
		}
	}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000154 	.word	0x20000154
 80018cc:	20000178 	.word	0x20000178
 80018d0:	433323d7 	.word	0x433323d7
 80018d4:	3f53f7cf 	.word	0x3f53f7cf
 80018d8:	20000050 	.word	0x20000050
 80018dc:	2000017c 	.word	0x2000017c
 80018e0:	44a18000 	.word	0x44a18000
 80018e4:	41a00000 	.word	0x41a00000
 80018e8:	40000400 	.word	0x40000400
 80018ec:	2000014a 	.word	0x2000014a
 80018f0:	2000011c 	.word	0x2000011c
 80018f4:	2000014c 	.word	0x2000014c
 80018f8:	2000014e 	.word	0x2000014e
 80018fc:	20000150 	.word	0x20000150
 8001900:	2000015c 	.word	0x2000015c
 8001904:	20000124 	.word	0x20000124
 8001908:	20000104 	.word	0x20000104
 800190c:	20000028 	.word	0x20000028

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>
	...

0800191c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_MspInit+0x5c>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_MspInit+0x5c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6193      	str	r3, [r2, #24]
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_MspInit+0x5c>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_MspInit+0x5c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_MspInit+0x5c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_MspInit+0x5c>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_MspInit+0x60>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_MspInit+0x60>)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 fa59 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <CAN1_RX1_IRQHandler+0x10>)
 80019d6:	f000 fe8a 	bl	80026ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000028 	.word	0x20000028

080019e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM2_IRQHandler+0x10>)
 80019ea:	f002 f9e5 	bl	8003db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200001c8 	.word	0x200001c8

080019f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2224      	movs	r2, #36	; 0x24
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 ff8a 	bl	800492c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <MX_TIM1_Init+0xac>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a78:	f002 f86e 	bl	8003b58 <HAL_TIM_Encoder_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a82:	f7ff ff45 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM1_Init+0xa8>)
 8001a94:	f002 fee0 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a9e:	f7ff ff37 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000180 	.word	0x20000180
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001ada:	228f      	movs	r2, #143	; 0x8f
 8001adc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001ae6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001afa:	f001 fe9d 	bl	8003838 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b04:	f7ff ff04 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001b16:	f002 fb19 	bl	800414c <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b20:	f7ff fef6 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_TIM2_Init+0x94>)
 8001b32:	f002 fe91 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f7ff fee8 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200001c8 	.word	0x200001c8

08001b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001b7e:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <MX_TIM3_Init+0x100>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001b84:	2205      	movs	r2, #5
 8001b86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ba2:	4829      	ldr	r0, [pc, #164]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001ba4:	f001 fe48 	bl	8003838 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bae:	f7ff feaf 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4822      	ldr	r0, [pc, #136]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001bc0:	f002 fac4 	bl	800414c <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001bca:	f7ff fea1 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bce:	481e      	ldr	r0, [pc, #120]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001bd0:	f001 fece 	bl	8003970 <HAL_TIM_PWM_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001bda:	f7ff fe99 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4619      	mov	r1, r3
 8001bec:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001bee:	f002 fe33 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001bf8:	f7ff fe8a 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfc:	2360      	movs	r3, #96	; 0x60
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001c14:	f002 f9d8 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c1e:	f7ff fe77 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2204      	movs	r2, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001c2a:	f002 f9cd 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001c34:	f7ff fe6c 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM3_Init+0xfc>)
 8001c3a:	f000 f881 	bl	8001d40 <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3738      	adds	r7, #56	; 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000210 	.word	0x20000210
 8001c4c:	40000400 	.word	0x40000400

08001c50 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d124      	bne.n	8001cba <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH2_ENCODER_MODE_C2_Pin|TIM1_CH2_ENCODER_MODE_C1_Pin;
 8001ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cb6:	f001 f84b 	bl	8002d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d114      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_TIM_Base_MspInit+0x68>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <HAL_TIM_Base_MspInit+0x68>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_TIM_Base_MspInit+0x68>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201c      	movs	r0, #28
 8001d00:	f000 ffef 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d04:	201c      	movs	r0, #28
 8001d06:	f001 f808 	bl	8002d1a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d0a:	e010      	b.n	8001d2e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_TIM_Base_MspInit+0x6c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10b      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_TIM_Base_MspInit+0x68>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_TIM_Base_MspInit+0x68>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_TIM_Base_MspInit+0x68>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40000400 	.word	0x40000400

08001d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_TIM_MspPostInit+0x58>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d117      	bne.n	8001d90 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_TIM_MspPostInit+0x5c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_TIM_MspPostInit+0x5c>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_TIM_MspPostInit+0x5c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_MOTOR_M1_L_Pin|TIM3_CH2_MOTOR_M1_R_Pin;
 8001d78:	23c0      	movs	r3, #192	; 0xc0
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_TIM_MspPostInit+0x60>)
 8001d8c:	f000 ffe0 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800

08001da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff fe28 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001daa:	490c      	ldr	r1, [pc, #48]	; (8001ddc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dc0:	4c09      	ldr	r4, [pc, #36]	; (8001de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f002 fdb5 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dd2:	f7ff fbd3 	bl	800157c <main>
  bx lr
 8001dd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001de0:	080049c8 	.word	0x080049c8
  ldr r2, =_sbss
 8001de4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001de8:	2000025c 	.word	0x2000025c

08001dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC1_2_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x28>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 ff63 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fd86 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 ff7b 	bl	8002d36 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e58:	f000 ff43 	bl	8002ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_IncTick+0x1c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x20>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_IncTick+0x20>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000258 	.word	0x20000258

08001ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_GetTick+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000258 	.word	0x20000258

08001eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0ed      	b.n	80020a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff f920 	bl	8001118 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee8:	f7ff ffda 	bl	8001ea0 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eee:	e012      	b.n	8001f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef0:	f7ff ffd6 	bl	8001ea0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b0a      	cmp	r3, #10
 8001efc:	d90b      	bls.n	8001f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0c5      	b.n	80020a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0e5      	beq.n	8001ef0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0202 	bic.w	r2, r2, #2
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f34:	f7ff ffb4 	bl	8001ea0 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f3a:	e012      	b.n	8001f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f3c:	f7ff ffb0 	bl	8001ea0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b0a      	cmp	r3, #10
 8001f48:	d90b      	bls.n	8001f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2205      	movs	r2, #5
 8001f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09f      	b.n	80020a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e5      	bne.n	8001f3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e1b      	ldrb	r3, [r3, #24]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7e5b      	ldrb	r3, [r3, #25]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d108      	bne.n	8001fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e007      	b.n	8001fc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e9b      	ldrb	r3, [r3, #26]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0220 	orr.w	r2, r2, #32
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e007      	b.n	8001fee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0220 	bic.w	r2, r2, #32
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7edb      	ldrb	r3, [r3, #27]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0210 	bic.w	r2, r2, #16
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e007      	b.n	8002018 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0210 	orr.w	r2, r2, #16
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7f1b      	ldrb	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d108      	bne.n	8002032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0208 	orr.w	r2, r2, #8
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e007      	b.n	8002042 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0208 	bic.w	r2, r2, #8
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7f5b      	ldrb	r3, [r3, #29]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0204 	orr.w	r2, r2, #4
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e007      	b.n	800206c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	ea42 0103 	orr.w	r1, r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d003      	beq.n	80020d0 <HAL_CAN_ConfigFilter+0x26>
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	f040 80aa 	bne.w	8002224 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2201      	movs	r2, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d123      	bne.n	8002152 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	401a      	ands	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800212c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3248      	adds	r2, #72	; 0x48
 8002132:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002146:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002148:	6979      	ldr	r1, [r7, #20]
 800214a:	3348      	adds	r3, #72	; 0x48
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d122      	bne.n	80021a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	431a      	orrs	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800217a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3248      	adds	r2, #72	; 0x48
 8002180:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002194:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	3348      	adds	r3, #72	; 0x48
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021ba:	e007      	b.n	80021cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021e6:	e007      	b.n	80021f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002216:	f023 0201 	bic.w	r2, r3, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e006      	b.n	8002232 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d12e      	bne.n	80022ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff fe1a 	bl	8001ea0 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800226e:	e012      	b.n	8002296 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002270:	f7ff fe16 	bl	8001ea0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b0a      	cmp	r3, #10
 800227c:	d90b      	bls.n	8002296 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e012      	b.n	80022bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e006      	b.n	80022bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d003      	beq.n	80022f0 <HAL_CAN_AddTxMessage+0x2c>
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	f040 80ad 	bne.w	800244a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8095 	beq.w	800243a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	0e1b      	lsrs	r3, r3, #24
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6809      	ldr	r1, [r1, #0]
 800233a:	431a      	orrs	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3318      	adds	r3, #24
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	440b      	add	r3, r1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e00f      	b.n	8002368 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002352:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800235c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3318      	adds	r3, #24
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	440b      	add	r3, r1
 8002366:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3318      	adds	r3, #24
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	3304      	adds	r3, #4
 800237a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	7d1b      	ldrb	r3, [r3, #20]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d111      	bne.n	80023a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3318      	adds	r3, #24
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	6811      	ldr	r1, [r2, #0]
 8002398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3318      	adds	r3, #24
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	440b      	add	r3, r1
 80023a4:	3304      	adds	r3, #4
 80023a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3307      	adds	r3, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	061a      	lsls	r2, r3, #24
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3306      	adds	r3, #6
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	041b      	lsls	r3, r3, #16
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3305      	adds	r3, #5
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	4313      	orrs	r3, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	3204      	adds	r2, #4
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	4610      	mov	r0, r2
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	6811      	ldr	r1, [r2, #0]
 80023d0:	ea43 0200 	orr.w	r2, r3, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	440b      	add	r3, r1
 80023da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80023de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3303      	adds	r3, #3
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	061a      	lsls	r2, r3, #24
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3302      	adds	r3, #2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3301      	adds	r3, #1
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	4313      	orrs	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	4610      	mov	r0, r2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6811      	ldr	r1, [r2, #0]
 8002406:	ea43 0200 	orr.w	r2, r3, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	440b      	add	r3, r1
 8002410:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002414:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3318      	adds	r3, #24
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	6811      	ldr	r1, [r2, #0]
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3318      	adds	r3, #24
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	440b      	add	r3, r1
 8002434:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e00e      	b.n	8002458 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e006      	b.n	8002458 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002476:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d003      	beq.n	8002486 <HAL_CAN_GetRxMessage+0x24>
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	2b02      	cmp	r3, #2
 8002482:	f040 8103 	bne.w	800268c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10e      	bne.n	80024aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0f7      	b.n	800269a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0e8      	b.n	800269a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	331b      	adds	r3, #27
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0204 	and.w	r2, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	331b      	adds	r3, #27
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0d5b      	lsrs	r3, r3, #21
 80024f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	331b      	adds	r3, #27
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	331b      	adds	r3, #27
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0202 	and.w	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	331b      	adds	r3, #27
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2208      	movs	r2, #8
 800254a:	611a      	str	r2, [r3, #16]
 800254c:	e00b      	b.n	8002566 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	331b      	adds	r3, #27
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	3304      	adds	r3, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	331b      	adds	r3, #27
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b2da      	uxtb	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	331b      	adds	r3, #27
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4413      	add	r3, r2
 80025a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0a1a      	lsrs	r2, r3, #8
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0c1a      	lsrs	r2, r3, #16
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	3302      	adds	r3, #2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e1a      	lsrs	r2, r3, #24
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	3303      	adds	r3, #3
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	3304      	adds	r3, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4413      	add	r3, r2
 800261c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0a1a      	lsrs	r2, r3, #8
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3305      	adds	r3, #5
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0c1a      	lsrs	r2, r3, #16
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3306      	adds	r3, #6
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4413      	add	r3, r2
 8002650:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e1a      	lsrs	r2, r3, #24
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3307      	adds	r3, #7
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0220 	orr.w	r2, r2, #32
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	e007      	b.n	8002688 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0220 	orr.w	r2, r2, #32
 8002686:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e006      	b.n	800269a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d002      	beq.n	80026c2 <HAL_CAN_ActivateNotification+0x1e>
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d109      	bne.n	80026d6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e006      	b.n	80026e4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08a      	sub	sp, #40	; 0x28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07c      	beq.n	800282e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d023      	beq.n	8002786 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f983 	bl	8002a5c <HAL_CAN_TxMailbox0CompleteCallback>
 8002756:	e016      	b.n	8002786 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e00c      	b.n	8002786 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	e002      	b.n	8002786 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f986 	bl	8002a92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d024      	beq.n	80027da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002798:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f962 	bl	8002a6e <HAL_CAN_TxMailbox1CompleteCallback>
 80027aa:	e016      	b.n	80027da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	e00c      	b.n	80027da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	e002      	b.n	80027da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f965 	bl	8002aa4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d024      	beq.n	800282e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f941 	bl	8002a80 <HAL_CAN_TxMailbox2CompleteCallback>
 80027fe:	e016      	b.n	800282e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e00c      	b.n	800282e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e002      	b.n	800282e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f944 	bl	8002ab6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00c      	beq.n	8002852 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2210      	movs	r2, #16
 8002850:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2208      	movs	r2, #8
 800286c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f933 	bl	8002ada <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f91b 	bl	8002ac8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00c      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2210      	movs	r2, #16
 80028b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2208      	movs	r2, #8
 80028d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f90a 	bl	8002aec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7fe fcb3 	bl	800125c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8f3 	bl	8002afe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f8eb 	bl	8002b10 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d07b      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d072      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d043      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d03e      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029bc:	2b60      	cmp	r3, #96	; 0x60
 80029be:	d02b      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x32a>
 80029c0:	2b60      	cmp	r3, #96	; 0x60
 80029c2:	d82e      	bhi.n	8002a22 <HAL_CAN_IRQHandler+0x334>
 80029c4:	2b50      	cmp	r3, #80	; 0x50
 80029c6:	d022      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x320>
 80029c8:	2b50      	cmp	r3, #80	; 0x50
 80029ca:	d82a      	bhi.n	8002a22 <HAL_CAN_IRQHandler+0x334>
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d019      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x316>
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d826      	bhi.n	8002a22 <HAL_CAN_IRQHandler+0x334>
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d010      	beq.n	80029fa <HAL_CAN_IRQHandler+0x30c>
 80029d8:	2b30      	cmp	r3, #48	; 0x30
 80029da:	d822      	bhi.n	8002a22 <HAL_CAN_IRQHandler+0x334>
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d002      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x2f8>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d005      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029e4:	e01d      	b.n	8002a22 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ee:	e019      	b.n	8002a24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f043 0310 	orr.w	r3, r3, #16
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029f8:	e014      	b.n	8002a24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	f043 0320 	orr.w	r3, r3, #32
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a02:	e00f      	b.n	8002a24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a0c:	e00a      	b.n	8002a24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a16:	e005      	b.n	8002a24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a20:	e000      	b.n	8002a24 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a22:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a32:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f867 	bl	8002b22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b66:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	60d3      	str	r3, [r2, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <__NVIC_GetPriorityGrouping+0x18>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	f003 0307 	and.w	r3, r3, #7
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0b      	blt.n	8002bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4906      	ldr	r1, [pc, #24]	; (8002bcc <__NVIC_EnableIRQ+0x34>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cac:	f7ff ff90 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff2d 	bl	8002b34 <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff42 	bl	8002b7c <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff90 	bl	8002c24 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5f 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff35 	bl	8002b98 <__NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa2 	bl	8002c88 <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b08b      	sub	sp, #44	; 0x2c
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	e161      	b.n	8003028 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d64:	2201      	movs	r2, #1
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8150 	bne.w	8003022 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a97      	ldr	r2, [pc, #604]	; (8002fe4 <HAL_GPIO_Init+0x294>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d05e      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002d8c:	4a95      	ldr	r2, [pc, #596]	; (8002fe4 <HAL_GPIO_Init+0x294>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d875      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002d92:	4a95      	ldr	r2, [pc, #596]	; (8002fe8 <HAL_GPIO_Init+0x298>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d058      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002d98:	4a93      	ldr	r2, [pc, #588]	; (8002fe8 <HAL_GPIO_Init+0x298>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d86f      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002d9e:	4a93      	ldr	r2, [pc, #588]	; (8002fec <HAL_GPIO_Init+0x29c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d052      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002da4:	4a91      	ldr	r2, [pc, #580]	; (8002fec <HAL_GPIO_Init+0x29c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d869      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002daa:	4a91      	ldr	r2, [pc, #580]	; (8002ff0 <HAL_GPIO_Init+0x2a0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d04c      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002db0:	4a8f      	ldr	r2, [pc, #572]	; (8002ff0 <HAL_GPIO_Init+0x2a0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d863      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002db6:	4a8f      	ldr	r2, [pc, #572]	; (8002ff4 <HAL_GPIO_Init+0x2a4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d046      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002dbc:	4a8d      	ldr	r2, [pc, #564]	; (8002ff4 <HAL_GPIO_Init+0x2a4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d85d      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d82a      	bhi.n	8002e1c <HAL_GPIO_Init+0xcc>
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d859      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_GPIO_Init+0x80>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e4b 	.word	0x08002e4b
 8002dd4:	08002e25 	.word	0x08002e25
 8002dd8:	08002e37 	.word	0x08002e37
 8002ddc:	08002e79 	.word	0x08002e79
 8002de0:	08002e7f 	.word	0x08002e7f
 8002de4:	08002e7f 	.word	0x08002e7f
 8002de8:	08002e7f 	.word	0x08002e7f
 8002dec:	08002e7f 	.word	0x08002e7f
 8002df0:	08002e7f 	.word	0x08002e7f
 8002df4:	08002e7f 	.word	0x08002e7f
 8002df8:	08002e7f 	.word	0x08002e7f
 8002dfc:	08002e7f 	.word	0x08002e7f
 8002e00:	08002e7f 	.word	0x08002e7f
 8002e04:	08002e7f 	.word	0x08002e7f
 8002e08:	08002e7f 	.word	0x08002e7f
 8002e0c:	08002e7f 	.word	0x08002e7f
 8002e10:	08002e7f 	.word	0x08002e7f
 8002e14:	08002e2d 	.word	0x08002e2d
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	4a76      	ldr	r2, [pc, #472]	; (8002ff8 <HAL_GPIO_Init+0x2a8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e22:	e02c      	b.n	8002e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	623b      	str	r3, [r7, #32]
          break;
 8002e2a:	e029      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	3304      	adds	r3, #4
 8002e32:	623b      	str	r3, [r7, #32]
          break;
 8002e34:	e024      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	623b      	str	r3, [r7, #32]
          break;
 8002e3e:	e01f      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	330c      	adds	r3, #12
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e01a      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e52:	2304      	movs	r3, #4
 8002e54:	623b      	str	r3, [r7, #32]
          break;
 8002e56:	e013      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e60:	2308      	movs	r3, #8
 8002e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	611a      	str	r2, [r3, #16]
          break;
 8002e6a:	e009      	b.n	8002e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	615a      	str	r2, [r3, #20]
          break;
 8002e76:	e003      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
          break;
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          break;
 8002e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2bff      	cmp	r3, #255	; 0xff
 8002e84:	d801      	bhi.n	8002e8a <HAL_GPIO_Init+0x13a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_Init+0x13e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2bff      	cmp	r3, #255	; 0xff
 8002e94:	d802      	bhi.n	8002e9c <HAL_GPIO_Init+0x14c>
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_Init+0x152>
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	3b08      	subs	r3, #8
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	210f      	movs	r1, #15
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a9 	beq.w	8003022 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_GPIO_Init+0x2ac>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	4a49      	ldr	r2, [pc, #292]	; (8002ffc <HAL_GPIO_Init+0x2ac>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6193      	str	r3, [r2, #24]
 8002edc:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_GPIO_Init+0x2ac>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee8:	4a45      	ldr	r2, [pc, #276]	; (8003000 <HAL_GPIO_Init+0x2b0>)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3d      	ldr	r2, [pc, #244]	; (8003004 <HAL_GPIO_Init+0x2b4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00d      	beq.n	8002f30 <HAL_GPIO_Init+0x1e0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3c      	ldr	r2, [pc, #240]	; (8003008 <HAL_GPIO_Init+0x2b8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <HAL_GPIO_Init+0x1dc>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3b      	ldr	r2, [pc, #236]	; (800300c <HAL_GPIO_Init+0x2bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_GPIO_Init+0x1d8>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e004      	b.n	8002f32 <HAL_GPIO_Init+0x1e2>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e002      	b.n	8002f32 <HAL_GPIO_Init+0x1e2>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_GPIO_Init+0x1e2>
 8002f30:	2300      	movs	r3, #0
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	f002 0203 	and.w	r2, r2, #3
 8002f38:	0092      	lsls	r2, r2, #2
 8002f3a:	4093      	lsls	r3, r2
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f42:	492f      	ldr	r1, [pc, #188]	; (8003000 <HAL_GPIO_Init+0x2b0>)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	492b      	ldr	r1, [pc, #172]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	4927      	ldr	r1, [pc, #156]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	4921      	ldr	r1, [pc, #132]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f92:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	491d      	ldr	r1, [pc, #116]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4917      	ldr	r1, [pc, #92]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4913      	ldr	r1, [pc, #76]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01f      	beq.n	8003014 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	490d      	ldr	r1, [pc, #52]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
 8002fe0:	e01f      	b.n	8003022 <HAL_GPIO_Init+0x2d2>
 8002fe2:	bf00      	nop
 8002fe4:	10320000 	.word	0x10320000
 8002fe8:	10310000 	.word	0x10310000
 8002fec:	10220000 	.word	0x10220000
 8002ff0:	10210000 	.word	0x10210000
 8002ff4:	10120000 	.word	0x10120000
 8002ff8:	10110000 	.word	0x10110000
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40010000 	.word	0x40010000
 8003004:	40010800 	.word	0x40010800
 8003008:	40010c00 	.word	0x40010c00
 800300c:	40011000 	.word	0x40011000
 8003010:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_GPIO_Init+0x2f4>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	43db      	mvns	r3, r3
 800301c:	4909      	ldr	r1, [pc, #36]	; (8003044 <HAL_GPIO_Init+0x2f4>)
 800301e:	4013      	ands	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f ae96 	bne.w	8002d64 <HAL_GPIO_Init+0x14>
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	372c      	adds	r7, #44	; 0x2c
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43d9      	mvns	r1, r3
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	400b      	ands	r3, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
	...

0800307c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e272      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8087 	beq.w	80031aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800309c:	4b92      	ldr	r3, [pc, #584]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d00c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a8:	4b8f      	ldr	r3, [pc, #572]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d112      	bne.n	80030da <HAL_RCC_OscConfig+0x5e>
 80030b4:	4b8c      	ldr	r3, [pc, #560]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d10b      	bne.n	80030da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c2:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d06c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x12c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d168      	bne.n	80031a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e24c      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x76>
 80030e4:	4b80      	ldr	r3, [pc, #512]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a7f      	ldr	r2, [pc, #508]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e02e      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x98>
 80030fa:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7a      	ldr	r2, [pc, #488]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0xbc>
 800311e:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a71      	ldr	r2, [pc, #452]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6e      	ldr	r2, [pc, #440]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 8003138:	4b6b      	ldr	r3, [pc, #428]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6a      	ldr	r2, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a67      	ldr	r2, [pc, #412]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fea2 	bl	8001ea0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fe9e 	bl	8001ea0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e200      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xe4>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fe8e 	bl	8001ea0 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe fe8a 	bl	8001ea0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1ec      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x10c>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b6:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x18c>
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x176>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1c0      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4939      	ldr	r1, [pc, #228]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7fe fe43 	bl	8001ea0 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe fe3f 	bl	8001ea0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1a1      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4927      	ldr	r1, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fe22 	bl	8001ea0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe fe1e 	bl	8001ea0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e180      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03a      	beq.n	8003300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe fe02 	bl	8001ea0 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe fdfe 	bl	8001ea0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e160      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032be:	2001      	movs	r0, #1
 80032c0:	f000 fa9c 	bl	80037fc <RCC_Delay>
 80032c4:	e01c      	b.n	8003300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032cc:	f7fe fde8 	bl	8001ea0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d2:	e00f      	b.n	80032f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fde4 	bl	8001ea0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d908      	bls.n	80032f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e146      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	42420000 	.word	0x42420000
 80032f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e9      	bne.n	80032d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80a6 	beq.w	800345a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a87      	ldr	r2, [pc, #540]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	61d3      	str	r3, [r2, #28]
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b82      	ldr	r3, [pc, #520]	; (8003544 <HAL_RCC_OscConfig+0x4c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x4c8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x4c8>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe fda5 	bl	8001ea0 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe fda1 	bl	8001ea0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e103      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b75      	ldr	r3, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x4c8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x312>
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6213      	str	r3, [r2, #32]
 800338c:	e02d      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x334>
 8003396:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a69      	ldr	r2, [pc, #420]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a66      	ldr	r2, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
 80033ae:	e01c      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x356>
 80033b8:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a60      	ldr	r2, [pc, #384]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	4b5e      	ldr	r3, [pc, #376]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e00b      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 80033d2:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	4b58      	ldr	r3, [pc, #352]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a57      	ldr	r2, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d015      	beq.n	800341e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fd55 	bl	8001ea0 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe fd51 	bl	8001ea0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0b1      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ee      	beq.n	80033fa <HAL_RCC_OscConfig+0x37e>
 800341c:	e014      	b.n	8003448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe fd3f 	bl	8001ea0 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fd3b 	bl	8001ea0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e09b      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8087 	beq.w	8003572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d061      	beq.n	8003534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d146      	bne.n	8003506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x4cc>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe fd0f 	bl	8001ea0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe fd0b 	bl	8001ea0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e06d      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4921      	ldr	r1, [pc, #132]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a19      	ldr	r1, [r3, #32]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	430b      	orrs	r3, r1
 80034d2:	491b      	ldr	r1, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fcdf 	bl	8001ea0 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fcdb 	bl	8001ea0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e03d      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x46a>
 8003504:	e035      	b.n	8003572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x4cc>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fcc8 	bl	8001ea0 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fcc4 	bl	8001ea0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e026      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x498>
 8003532:	e01e      	b.n	8003572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e019      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_OscConfig+0x500>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	429a      	cmp	r2, r3
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0d0      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d910      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b67      	ldr	r3, [pc, #412]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0207 	bic.w	r2, r3, #7
 80035aa:	4965      	ldr	r1, [pc, #404]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d040      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d115      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b41      	ldr	r3, [pc, #260]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e073      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b3d      	ldr	r3, [pc, #244]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06b      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4936      	ldr	r1, [pc, #216]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe fc16 	bl	8001ea0 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fe fc12 	bl	8001ea0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e053      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d210      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4922      	ldr	r1, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490a      	ldr	r1, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1cc>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fb74 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40022000 	.word	0x40022000
 8003744:	40021000 	.word	0x40021000
 8003748:	0800499c 	.word	0x0800499c
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b04      	cmp	r3, #4
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x30>
 800377e:	2b08      	cmp	r3, #8
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x36>
 8003782:	e027      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003786:	613b      	str	r3, [r7, #16]
      break;
 8003788:	e027      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003794:	5cd3      	ldrb	r3, [r2, r3]
 8003796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d010      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0c5b      	lsrs	r3, r3, #17
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <HAL_RCC_GetSysClockFreq+0x98>)
 80037b6:	fb03 f202 	mul.w	r2, r3, r2
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e004      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	613b      	str	r3, [r7, #16]
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x98>)
 80037d6:	613b      	str	r3, [r7, #16]
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	693b      	ldr	r3, [r7, #16]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	007a1200 	.word	0x007a1200
 80037f0:	080049ac 	.word	0x080049ac
 80037f4:	080049bc 	.word	0x080049bc
 80037f8:	003d0900 	.word	0x003d0900

080037fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <RCC_Delay+0x34>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <RCC_Delay+0x38>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003818:	bf00      	nop
  }
  while (Delay --);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	60fa      	str	r2, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f9      	bne.n	8003818 <RCC_Delay+0x1c>
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	20000000 	.word	0x20000000
 8003834:	10624dd3 	.word	0x10624dd3

08003838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e041      	b.n	80038ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe fa36 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f000 fd54 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d001      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e035      	b.n	800395c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_TIM_Base_Start_IT+0x90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x4e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391a:	d004      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x4e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <HAL_TIM_Base_Start_IT+0x94>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d111      	bne.n	800394a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d010      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	e007      	b.n	800395a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400

08003970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e041      	b.n	8003a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f839 	bl	8003a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fcb8 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x24>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e022      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d109      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x3e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e015      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d109      	bne.n	8003a78 <HAL_TIM_PWM_Start+0x58>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e008      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e059      	b.n	8003b46 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x82>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa0:	e013      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x92>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab0:	e00b      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	e003      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fe9c 	bl	8004810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_TIM_PWM_Start+0x130>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_TIM_PWM_Start+0x130>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_TIM_PWM_Start+0xf0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d004      	beq.n	8003b10 <HAL_TIM_PWM_Start+0xf0>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <HAL_TIM_PWM_Start+0x134>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d111      	bne.n	8003b34 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d010      	beq.n	8003b44 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	e007      	b.n	8003b44 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400

08003b58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e093      	b.n	8003c94 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fe f865 	bl	8001c50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b9c:	f023 0307 	bic.w	r3, r3, #7
 8003ba0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f000 fbb9 	bl	8004324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	4313      	orrs	r3, r2
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bf8:	f023 030c 	bic.w	r3, r3, #12
 8003bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	4313      	orrs	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	011a      	lsls	r2, r3, #4
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	031b      	lsls	r3, r3, #12
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4313      	orrs	r3, r2
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d110      	bne.n	8003cee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d102      	bne.n	8003cd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cd2:	7b7b      	ldrb	r3, [r7, #13]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e069      	b.n	8003db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	e031      	b.n	8003d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d110      	bne.n	8003d16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cf4:	7bbb      	ldrb	r3, [r7, #14]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cfa:	7b3b      	ldrb	r3, [r7, #12]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e055      	b.n	8003db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	e01d      	b.n	8003d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d108      	bne.n	8003d2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d22:	7b7b      	ldrb	r3, [r7, #13]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d28:	7b3b      	ldrb	r3, [r7, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e03e      	b.n	8003db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_TIM_Encoder_Start+0xc4>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d008      	beq.n	8003d70 <HAL_TIM_Encoder_Start+0xd4>
 8003d5e:	e00f      	b.n	8003d80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fd51 	bl	8004810 <TIM_CCxChannelCmd>
      break;
 8003d6e:	e016      	b.n	8003d9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	2104      	movs	r1, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fd49 	bl	8004810 <TIM_CCxChannelCmd>
      break;
 8003d7e:	e00e      	b.n	8003d9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fd41 	bl	8004810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2201      	movs	r2, #1
 8003d94:	2104      	movs	r1, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fd3a 	bl	8004810 <TIM_CCxChannelCmd>
      break;
 8003d9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0202 	mvn.w	r2, #2
 8003de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa76 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa69 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa78 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d122      	bne.n	8003e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0204 	mvn.w	r2, #4
 8003e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa4c 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa3f 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fa4e 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0208 	mvn.w	r2, #8
 8003e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2204      	movs	r2, #4
 8003e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa22 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa15 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fa24 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d122      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d11b      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0210 	mvn.w	r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9f8 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9eb 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9fa 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0201 	mvn.w	r2, #1
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fc2c 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b80      	cmp	r3, #128	; 0x80
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fcd9 	bl	800491a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9be 	bl	8004310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0220 	mvn.w	r2, #32
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fca4 	bl	8004908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ae      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	f200 809f 	bhi.w	8004134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004135 	.word	0x08004135
 8004004:	08004135 	.word	0x08004135
 8004008:	08004135 	.word	0x08004135
 800400c:	08004071 	.word	0x08004071
 8004010:	08004135 	.word	0x08004135
 8004014:	08004135 	.word	0x08004135
 8004018:	08004135 	.word	0x08004135
 800401c:	080040b3 	.word	0x080040b3
 8004020:	08004135 	.word	0x08004135
 8004024:	08004135 	.word	0x08004135
 8004028:	08004135 	.word	0x08004135
 800402c:	080040f3 	.word	0x080040f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f9cc 	bl	80043d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	619a      	str	r2, [r3, #24]
      break;
 800406e:	e064      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fa12 	bl	80044a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]
      break;
 80040b0:	e043      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa5b 	bl	8004574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0208 	orr.w	r2, r2, #8
 80040cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	61da      	str	r2, [r3, #28]
      break;
 80040f0:	e023      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 faa5 	bl	8004648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69d9      	ldr	r1, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	021a      	lsls	r2, r3, #8
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	61da      	str	r2, [r3, #28]
      break;
 8004132:	e002      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIM_ConfigClockSource+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e0b4      	b.n	80042d2 <HAL_TIM_ConfigClockSource+0x186>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	d03e      	beq.n	8004220 <HAL_TIM_ConfigClockSource+0xd4>
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	f200 8087 	bhi.w	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	f000 8086 	beq.w	80042be <HAL_TIM_ConfigClockSource+0x172>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d87f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b70      	cmp	r3, #112	; 0x70
 80041ba:	d01a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xa6>
 80041bc:	2b70      	cmp	r3, #112	; 0x70
 80041be:	d87b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b60      	cmp	r3, #96	; 0x60
 80041c2:	d050      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x11a>
 80041c4:	2b60      	cmp	r3, #96	; 0x60
 80041c6:	d877      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	d03c      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0xfa>
 80041cc:	2b50      	cmp	r3, #80	; 0x50
 80041ce:	d873      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d058      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x13a>
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d86f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d064      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	d86b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d060      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d867      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d05a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041f0:	e062      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	f000 fae6 	bl	80047d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]
      break;
 800421e:	e04f      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004230:	f000 facf 	bl	80047d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004242:	609a      	str	r2, [r3, #8]
      break;
 8004244:	e03c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fa46 	bl	80046e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2150      	movs	r1, #80	; 0x50
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa9d 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8004264:	e02c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004272:	461a      	mov	r2, r3
 8004274:	f000 fa64 	bl	8004740 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2160      	movs	r1, #96	; 0x60
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fa8d 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8004284:	e01c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fa26 	bl	80046e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2140      	movs	r1, #64	; 0x40
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fa7d 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 80042a4:	e00c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 fa74 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 80042b6:	e003      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
	...

08004324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a25      	ldr	r2, [pc, #148]	; (80043cc <TIM_Base_SetConfig+0xa8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d007      	beq.n	800434c <TIM_Base_SetConfig+0x28>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0x28>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <TIM_Base_SetConfig+0xac>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d108      	bne.n	800435e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <TIM_Base_SetConfig+0xa8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <TIM_Base_SetConfig+0x52>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d003      	beq.n	8004376 <TIM_Base_SetConfig+0x52>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <TIM_Base_SetConfig+0xac>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <TIM_Base_SetConfig+0xa8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d103      	bne.n	80043bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	615a      	str	r2, [r3, #20]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400

080043d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 0201 	bic.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 0302 	bic.w	r3, r3, #2
 800441c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <TIM_OC1_SetConfig+0xc8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10c      	bne.n	800444a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0308 	bic.w	r3, r3, #8
 8004436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 0304 	bic.w	r3, r3, #4
 8004448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <TIM_OC1_SetConfig+0xc8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d111      	bne.n	8004476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40012c00 	.word	0x40012c00

080044a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 0210 	bic.w	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0320 	bic.w	r3, r3, #32
 80044ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <TIM_OC2_SetConfig+0xd0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10d      	bne.n	800451c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <TIM_OC2_SetConfig+0xd0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d113      	bne.n	800454c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800452a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00

08004574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <TIM_OC3_SetConfig+0xd0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10d      	bne.n	80045ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a14      	ldr	r2, [pc, #80]	; (8004644 <TIM_OC3_SetConfig+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d113      	bne.n	800461e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	621a      	str	r2, [r3, #32]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40012c00 	.word	0x40012c00

08004648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <TIM_OC4_SetConfig+0x98>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d109      	bne.n	80046bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	40012c00 	.word	0x40012c00

080046e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f023 0201 	bic.w	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800470e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f023 030a 	bic.w	r3, r3, #10
 8004720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0210 	bic.w	r2, r3, #16
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800476a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	031b      	lsls	r3, r3, #12
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f043 0307 	orr.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b087      	sub	sp, #28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	021a      	lsls	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	609a      	str	r2, [r3, #8]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	43db      	mvns	r3, r3
 8004832:	401a      	ands	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800486c:	2302      	movs	r3, #2
 800486e:	e041      	b.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a14      	ldr	r2, [pc, #80]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048bc:	d004      	beq.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d10c      	bne.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40000400 	.word	0x40000400

08004908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <memset>:
 800492c:	4603      	mov	r3, r0
 800492e:	4402      	add	r2, r0
 8004930:	4293      	cmp	r3, r2
 8004932:	d100      	bne.n	8004936 <memset+0xa>
 8004934:	4770      	bx	lr
 8004936:	f803 1b01 	strb.w	r1, [r3], #1
 800493a:	e7f9      	b.n	8004930 <memset+0x4>

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	2600      	movs	r6, #0
 8004940:	4d0c      	ldr	r5, [pc, #48]	; (8004974 <__libc_init_array+0x38>)
 8004942:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	f000 f81a 	bl	8004984 <_init>
 8004950:	2600      	movs	r6, #0
 8004952:	4d0a      	ldr	r5, [pc, #40]	; (800497c <__libc_init_array+0x40>)
 8004954:	4c0a      	ldr	r4, [pc, #40]	; (8004980 <__libc_init_array+0x44>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	080049c0 	.word	0x080049c0
 8004978:	080049c0 	.word	0x080049c0
 800497c:	080049c0 	.word	0x080049c0
 8004980:	080049c4 	.word	0x080049c4

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
