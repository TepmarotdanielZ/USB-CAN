
F103c6_TEST_USB_CAN_MOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c70  08003c70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003c70  08003c70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c70  08003c70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000010  08003c88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003c88  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a383  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d19  00000000  00000000  0002a3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000875  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d6e  00000000  00000000  0002d495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b89e  00000000  00000000  00044203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084841  00000000  00000000  0004faa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ddc  00000000  00000000  000d42e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000d70c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c34 	.word	0x08003c34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003c34 	.word	0x08003c34

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <MX_CAN_Init+0xa4>)
 8000652:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000656:	2209      	movs	r2, #9
 8000658:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_CAN_Init+0xa0>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800066c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_CAN_Init+0xa0>)
 800067c:	2200      	movs	r2, #0
 800067e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000682:	2200      	movs	r2, #0
 8000684:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000688:	2200      	movs	r2, #0
 800068a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_CAN_Init+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <MX_CAN_Init+0xa0>)
 800069a:	f000 fe49 	bl	8001330 <HAL_CAN_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006a4:	f000 fb2e 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80006ac:	230a      	movs	r3, #10
 80006ae:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x111<<5;
 80006b4:	f242 2320 	movw	r3, #8736	; 0x2220
 80006b8:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 80006be:	f242 2320 	movw	r3, #8736	; 0x2220
 80006c2:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24

      HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <MX_CAN_Init+0xa0>)
 80006da:	f000 ff24 	bl	8001526 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	40006400 	.word	0x40006400

080006f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <HAL_CAN_MspInit+0x9c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d139      	bne.n	8000784 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071a:	61d3      	str	r3, [r2, #28]
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a18      	ldr	r2, [pc, #96]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000756:	f001 fd39 	bl	80021cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000770:	f001 fd2c 	bl	80021cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2015      	movs	r0, #21
 800077a:	f001 fcf0 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800077e:	2015      	movs	r0, #21
 8000780:	f001 fd09 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40006400 	.word	0x40006400
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000

080007dc <map>:
/* USER CODE BEGIN PFP */


/* MAP */

	float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output) {
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	603b      	str	r3, [r7, #0]
		return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f7ff fcb1 	bl	8000154 <__aeabi_fsub>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461c      	mov	r4, r3
 80007f6:	6839      	ldr	r1, [r7, #0]
 80007f8:	6a38      	ldr	r0, [r7, #32]
 80007fa:	f7ff fcab 	bl	8000154 <__aeabi_fsub>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	4620      	mov	r0, r4
 8000804:	f7ff fdb0 	bl	8000368 <__aeabi_fmul>
 8000808:	4603      	mov	r3, r0
 800080a:	461c      	mov	r4, r3
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fca0 	bl	8000154 <__aeabi_fsub>
 8000814:	4603      	mov	r3, r0
 8000816:	4619      	mov	r1, r3
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fe59 	bl	80004d0 <__aeabi_fdiv>
 800081e:	4603      	mov	r3, r0
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fc98 	bl	8000158 <__addsf3>
 8000828:	4603      	mov	r3, r0
	}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bd90      	pop	{r4, r7, pc}
	...

08000834 <HAL_CAN_RxFifo1MsgPendingCallback>:


/* STM32 INTERUPP RECEIVER FROM USB CAN */

	void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af02      	add	r7, sp, #8
 800083a:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800083c:	4b60      	ldr	r3, [pc, #384]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800083e:	4a61      	ldr	r2, [pc, #388]	; (80009c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 8000840:	2101      	movs	r1, #1
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f001 f84b 	bl	80018de <HAL_CAN_GetRxMessage>
		cntt++;
 8000848:	4b5f      	ldr	r3, [pc, #380]	; (80009c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8000852:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8000854:	e007      	b.n	8000866 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	485c      	ldr	r0, [pc, #368]	; (80009cc <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800085c:	f001 fe32 	bl	80024c4 <HAL_GPIO_TogglePin>
			cntt = 0;
 8000860:	4b59      	ldr	r3, [pc, #356]	; (80009c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8000866:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b64      	cmp	r3, #100	; 0x64
 800086c:	d8f3      	bhi.n	8000856 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		}

	/* DATA RECIEVER FROM USB CAN */

		if (RxHeader.DLC == 8) {
 800086e:	4b55      	ldr	r3, [pc, #340]	; (80009c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	2b08      	cmp	r3, #8
 8000874:	f040 809f 	bne.w	80009b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
		RxData1 = (RxData[0] << 8) | RxData[1];
 8000878:	4b51      	ldr	r3, [pc, #324]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	4a50      	ldr	r2, [pc, #320]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8000880:	7852      	ldrb	r2, [r2, #1]
 8000882:	4313      	orrs	r3, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fd1b 	bl	80002c0 <__aeabi_i2f>
 800088a:	4603      	mov	r3, r0
 800088c:	4a50      	ldr	r2, [pc, #320]	; (80009d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800088e:	6013      	str	r3, [r2, #0]
		RxData2 = (RxData[2] << 8) | RxData[3];
 8000890:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	4a4a      	ldr	r2, [pc, #296]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8000898:	78d2      	ldrb	r2, [r2, #3]
 800089a:	4313      	orrs	r3, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd0f 	bl	80002c0 <__aeabi_i2f>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 80008a6:	6013      	str	r3, [r2, #0]
		RxData3 = (RxData[4] << 8) | RxData[5];
 80008a8:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	4a44      	ldr	r2, [pc, #272]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80008b0:	7952      	ldrb	r2, [r2, #5]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd03 	bl	80002c0 <__aeabi_i2f>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a46      	ldr	r2, [pc, #280]	; (80009d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 80008be:	6013      	str	r3, [r2, #0]
		RxData4 = (RxData[6] << 8) | RxData[7];
 80008c0:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80008c2:	799b      	ldrb	r3, [r3, #6]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	4a3e      	ldr	r2, [pc, #248]	; (80009c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80008c8:	79d2      	ldrb	r2, [r2, #7]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fcf7 	bl	80002c0 <__aeabi_i2f>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a41      	ldr	r2, [pc, #260]	; (80009dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 80008d6:	6013      	str	r3, [r2, #0]

	/* TRANFER TO SPEED */

		/* V RGB */

			V1 = RxData1;
 80008d8:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 80008de:	6013      	str	r3, [r2, #0]
			V2 = RxData2;
 80008e0:	4b3c      	ldr	r3, [pc, #240]	; (80009d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 80008e6:	6013      	str	r3, [r2, #0]
			V3 = RxData3;
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 80008ee:	6013      	str	r3, [r2, #0]
			V4 = RxData4;
 80008f0:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a3d      	ldr	r2, [pc, #244]	; (80009ec <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 80008f6:	6013      	str	r3, [r2, #0]

		/* M MOTOR */

			M1 = RxData1;
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3c      	ldr	r2, [pc, #240]	; (80009f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1bc>)
 80008fe:	6013      	str	r3, [r2, #0]
			M2 = RxData2;
 8000900:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a3b      	ldr	r2, [pc, #236]	; (80009f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8000906:	6013      	str	r3, [r2, #0]
			M3 = RxData3;
 8000908:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800090e:	6013      	str	r3, [r2, #0]
			M4 = RxData4;
 8000910:	4b32      	ldr	r3, [pc, #200]	; (80009dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a39      	ldr	r2, [pc, #228]	; (80009fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8000916:	6013      	str	r3, [r2, #0]

			/* MAP TX DATA FROM 8BIT TO 16BIT (MOTOR ) */

			M1_out = map(M1,0,65535,0,999);
 8000918:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1bc>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	4a37      	ldr	r2, [pc, #220]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8000926:	f04f 0100 	mov.w	r1, #0
 800092a:	f7ff ff57 	bl	80007dc <map>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe69 	bl	8000608 <__aeabi_f2uiz>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800093c:	801a      	strh	r2, [r3, #0]
			M2_out = map(M2,0,65535,0,999);
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8000940:	6818      	ldr	r0, [r3, #0]
 8000942:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	f04f 0300 	mov.w	r3, #0
 800094a:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800094c:	f04f 0100 	mov.w	r1, #0
 8000950:	f7ff ff44 	bl	80007dc <map>
 8000954:	4603      	mov	r3, r0
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe56 	bl	8000608 <__aeabi_f2uiz>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8000962:	801a      	strh	r2, [r3, #0]
			M3_out = map(M3,0,65535,0,65535);
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	f04f 0300 	mov.w	r3, #0
 8000970:	4a24      	ldr	r2, [pc, #144]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8000972:	f04f 0100 	mov.w	r1, #0
 8000976:	f7ff ff31 	bl	80007dc <map>
 800097a:	4603      	mov	r3, r0
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe43 	bl	8000608 <__aeabi_f2uiz>
 8000982:	4603      	mov	r3, r0
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 8000988:	801a      	strh	r2, [r3, #0]
			M4_out = map(M4,0,65535,0,65535);
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8000998:	f04f 0100 	mov.w	r1, #0
 800099c:	f7ff ff1e 	bl	80007dc <map>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe30 	bl	8000608 <__aeabi_f2uiz>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 80009ae:	801a      	strh	r2, [r3, #0]

			flag = 1;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]

	}
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000070 	.word	0x20000070
 80009c4:	20000054 	.word	0x20000054
 80009c8:	200000dd 	.word	0x200000dd
 80009cc:	40011000 	.word	0x40011000
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000a0 	.word	0x200000a0
 80009d8:	200000a4 	.word	0x200000a4
 80009dc:	200000a8 	.word	0x200000a8
 80009e0:	200000ac 	.word	0x200000ac
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	200000b4 	.word	0x200000b4
 80009ec:	200000b8 	.word	0x200000b8
 80009f0:	200000bc 	.word	0x200000bc
 80009f4:	200000c0 	.word	0x200000c0
 80009f8:	200000c4 	.word	0x200000c4
 80009fc:	200000c8 	.word	0x200000c8
 8000a00:	4479c000 	.word	0x4479c000
 8000a04:	477fff00 	.word	0x477fff00
 8000a08:	200000d4 	.word	0x200000d4
 8000a0c:	200000d6 	.word	0x200000d6
 8000a10:	200000d8 	.word	0x200000d8
 8000a14:	200000da 	.word	0x200000da
 8000a18:	200000dc 	.word	0x200000dc

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fc23 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f8af 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f7ff feb5 	bl	8000798 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a2e:	f000 facb 	bl	8000fc8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a32:	f000 fa7d 	bl	8000f30 <MX_TIM2_Init>
  MX_CAN_Init();
 8000a36:	f7ff fe07 	bl	8000648 <MX_CAN_Init>
  MX_TIM1_Init();
 8000a3a:	f000 f9dd 	bl	8000df8 <MX_TIM1_Init>
//  	V3_out = map(V,0,255,0,65535);
//  	V4_out = map(V,0,255,0,65535);

  	/* CAN */

		HAL_CAN_Start(&hcan);
 8000a3e:	4846      	ldr	r0, [pc, #280]	; (8000b58 <main+0x13c>)
 8000a40:	f000 fe3a 	bl	80016b8 <HAL_CAN_Start>

	/* STRUCTUR TRANSMITTER DATA */

		HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000a44:	2110      	movs	r1, #16
 8000a46:	4844      	ldr	r0, [pc, #272]	; (8000b58 <main+0x13c>)
 8000a48:	f001 f86a 	bl	8001b20 <HAL_CAN_ActivateNotification>
		TxHeader.DLC = 8;
 8000a4c:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <main+0x140>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <main+0x140>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8000a58:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <main+0x140>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = 0x103; //0b11001010001
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <main+0x140>)
 8000a60:	f240 1203 	movw	r2, #259	; 0x103
 8000a64:	601a      	str	r2, [r3, #0]

	/* TIMER RGB */

	HAL_TIM_Base_Start_IT(&htim2);
 8000a66:	483e      	ldr	r0, [pc, #248]	; (8000b60 <main+0x144>)
 8000a68:	f002 f974 	bl	8002d54 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	483d      	ldr	r0, [pc, #244]	; (8000b64 <main+0x148>)
 8000a70:	f002 fa0c 	bl	8002e8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a74:	2104      	movs	r1, #4
 8000a76:	483b      	ldr	r0, [pc, #236]	; (8000b64 <main+0x148>)
 8000a78:	f002 fa08 	bl	8002e8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4839      	ldr	r0, [pc, #228]	; (8000b64 <main+0x148>)
 8000a80:	f002 fa04 	bl	8002e8c <HAL_TIM_PWM_Start>



	/* TIMER 3 MOTOR */

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4838      	ldr	r0, [pc, #224]	; (8000b68 <main+0x14c>)
 8000a88:	f002 fa00 	bl	8002e8c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	4836      	ldr	r0, [pc, #216]	; (8000b68 <main+0x14c>)
 8000a90:	f002 f9fc 	bl	8002e8c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a94:	2108      	movs	r1, #8
 8000a96:	4834      	ldr	r0, [pc, #208]	; (8000b68 <main+0x14c>)
 8000a98:	f002 f9f8 	bl	8002e8c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	4832      	ldr	r0, [pc, #200]	; (8000b68 <main+0x14c>)
 8000aa0:	f002 f9f4 	bl	8002e8c <HAL_TIM_PWM_Start>


	/* MAP TX DATA FROM 8BIT TO 16BIT (RGB) */

		V1_out = map(V,0,255,0,65535);
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <main+0x150>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc05 	bl	80002b8 <__aeabi_ui2f>
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <main+0x154>)
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	4a2f      	ldr	r2, [pc, #188]	; (8000b74 <main+0x158>)
 8000ab8:	f04f 0100 	mov.w	r1, #0
 8000abc:	f7ff fe8e 	bl	80007dc <map>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fda0 	bl	8000608 <__aeabi_f2uiz>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <main+0x15c>)
 8000ace:	801a      	strh	r2, [r3, #0]
		V2_out = map(V,0,255,0,65535);
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <main+0x150>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fbef 	bl	80002b8 <__aeabi_ui2f>
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <main+0x154>)
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <main+0x158>)
 8000ae4:	f04f 0100 	mov.w	r1, #0
 8000ae8:	f7ff fe78 	bl	80007dc <map>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd8a 	bl	8000608 <__aeabi_f2uiz>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <main+0x160>)
 8000afa:	801a      	strh	r2, [r3, #0]
		V3_out = map(V,0,255,0,65535);
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <main+0x150>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fbd9 	bl	80002b8 <__aeabi_ui2f>
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <main+0x154>)
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <main+0x158>)
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	f7ff fe62 	bl	80007dc <map>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd74 	bl	8000608 <__aeabi_f2uiz>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <main+0x164>)
 8000b26:	801a      	strh	r2, [r3, #0]
		V4_out = map(V,0,255,0,65535);
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <main+0x150>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fbc3 	bl	80002b8 <__aeabi_ui2f>
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <main+0x154>)
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <main+0x158>)
 8000b3c:	f04f 0100 	mov.w	r1, #0
 8000b40:	f7ff fe4c 	bl	80007dc <map>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fd5e 	bl	8000608 <__aeabi_f2uiz>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <main+0x168>)
 8000b52:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <main+0x138>
 8000b56:	bf00      	nop
 8000b58:	2000002c 	.word	0x2000002c
 8000b5c:	20000078 	.word	0x20000078
 8000b60:	20000128 	.word	0x20000128
 8000b64:	200000e0 	.word	0x200000e0
 8000b68:	20000170 	.word	0x20000170
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	477fff00 	.word	0x477fff00
 8000b74:	437f0000 	.word	0x437f0000
 8000b78:	200000cc 	.word	0x200000cc
 8000b7c:	200000ce 	.word	0x200000ce
 8000b80:	200000d0 	.word	0x200000d0
 8000b84:	200000d2 	.word	0x200000d2

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b090      	sub	sp, #64	; 0x40
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2228      	movs	r2, #40	; 0x28
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 f81f 	bl	8003bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fc91 	bl	80024f8 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bdc:	f000 f892 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fefe 	bl	80029fc <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c06:	f000 f87d 	bl	8000d04 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3740      	adds	r7, #64	; 0x40
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_TIM_PeriodElapsedCallback>:
//	}
//}

/* MAKER TIMER INTERRUPP 1mS */

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c24:	d14c      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0xac>
			TIM3->CCR1 = M1_out; // PWM BINK LED
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = M2_out; // PWM BINK LED
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR2 = M3_out; // PWM BINK LED
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = M4_out; // PWM BINK LED
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000c44:	63da      	str	r2, [r3, #60]	; 0x3c

		/* TX DATA SEND TO PC MAP 16BIT TO 8BIT COZ DATA CAN 1DATA=8BIT */

			TxData[0] = ((V1_out & 0xFF00) >> 8);
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c52:	701a      	strb	r2, [r3, #0]
			TxData[1] = (V1_out & 0x00FF);
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c5c:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((V2_out & 0xFF00) >> 8);
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c6a:	709a      	strb	r2, [r3, #2]
			TxData[3] = (V2_out & 0x00FF);
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c74:	70da      	strb	r2, [r3, #3]
			TxData[4] = ((V3_out & 0xFF00) >> 8);
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	0a1b      	lsrs	r3, r3, #8
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c82:	711a      	strb	r2, [r3, #4]
			TxData[5] = (V3_out & 0x00FF);
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c8c:	715a      	strb	r2, [r3, #5]
			TxData[6] = ((V4_out & 0xFF00) >> 8);
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c9a:	719a      	strb	r2, [r3, #6]
			TxData[7] = (V4_out & 0x00FF);
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ca4:	71da      	strb	r2, [r3, #7]
			if (flag ==1)
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d108      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0xac>
			{

				HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cb2:	4912      	ldr	r1, [pc, #72]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000cb6:	f000 fd43 	bl	8001740 <HAL_CAN_AddTxMessage>
				flag=0;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000d4 	.word	0x200000d4
 8000ccc:	40000400 	.word	0x40000400
 8000cd0:	200000d6 	.word	0x200000d6
 8000cd4:	200000d8 	.word	0x200000d8
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	200000da 	.word	0x200000da
 8000ce0:	200000cc 	.word	0x200000cc
 8000ce4:	20000090 	.word	0x20000090
 8000ce8:	200000ce 	.word	0x200000ce
 8000cec:	200000d0 	.word	0x200000d0
 8000cf0:	200000d2 	.word	0x200000d2
 8000cf4:	200000dc 	.word	0x200000dc
 8000cf8:	20000098 	.word	0x20000098
 8000cfc:	20000078 	.word	0x20000078
 8000d00:	2000002c 	.word	0x2000002c

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_MspInit+0x60>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_MspInit+0x60>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 fa9d 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <CAN1_RX1_IRQHandler+0x10>)
 8000dca:	f000 fece 	bl	8001b6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000002c 	.word	0x2000002c

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f002 f8f1 	bl	8002fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000128 	.word	0x20000128

08000dec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b092      	sub	sp, #72	; 0x48
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fed9 	bl	8003bda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e2a:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <MX_TIM1_Init+0x134>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e54:	4834      	ldr	r0, [pc, #208]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e56:	f001 ffc9 	bl	8002dec <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e60:	f7ff ff50 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e70:	4619      	mov	r1, r3
 8000e72:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000e74:	f002 fdf6 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e7e:	f7ff ff41 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000ea8:	f002 f994 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000eb2:	f7ff ff27 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481a      	ldr	r0, [pc, #104]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000ec0:	f002 f988 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000eca:	f7ff ff1b 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000ed8:	f002 f97c 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000ee2:	f7ff ff0f 	bl	8000d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000f0a:	f002 fe03 	bl	8003b14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000f14:	f7ff fef6 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM1_Init+0x130>)
 8000f1a:	f000 f92d 	bl	8001178 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3748      	adds	r7, #72	; 0x48
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000e0 	.word	0x200000e0
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f56:	2247      	movs	r2, #71	; 0x47
 8000f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f76:	f001 fe9d 	bl	8002cb4 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f80:	f7ff fec0 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f92:	f002 f9e1 	bl	8003358 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f7ff feb2 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000fae:	f002 fd59 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f7ff fea4 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000128 	.word	0x20000128

08000fc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	615a      	str	r2, [r3, #20]
 8000ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <MX_TIM3_Init+0xfc>)
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <MX_TIM3_Init+0x100>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <MX_TIM3_Init+0xfc>)
 8001000:	2247      	movs	r2, #71	; 0x47
 8001002:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_TIM3_Init+0xfc>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <MX_TIM3_Init+0xfc>)
 800100c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001010:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_TIM3_Init+0xfc>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_TIM3_Init+0xfc>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800101e:	4829      	ldr	r0, [pc, #164]	; (80010c4 <MX_TIM3_Init+0xfc>)
 8001020:	f001 fe48 	bl	8002cb4 <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800102a:	f7ff fe6b 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001038:	4619      	mov	r1, r3
 800103a:	4822      	ldr	r0, [pc, #136]	; (80010c4 <MX_TIM3_Init+0xfc>)
 800103c:	f002 f98c 	bl	8003358 <HAL_TIM_ConfigClockSource>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001046:	f7ff fe5d 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <MX_TIM3_Init+0xfc>)
 800104c:	f001 fece 	bl	8002dec <HAL_TIM_PWM_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001056:	f7ff fe55 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	4619      	mov	r1, r3
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <MX_TIM3_Init+0xfc>)
 800106a:	f002 fcfb 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001074:	f7ff fe46 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001078:	2360      	movs	r3, #96	; 0x60
 800107a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM3_Init+0xfc>)
 8001090:	f002 f8a0 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800109a:	f7ff fe33 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2204      	movs	r2, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM3_Init+0xfc>)
 80010a6:	f002 f895 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010b0:	f7ff fe28 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM3_Init+0xfc>)
 80010b6:	f000 f85f 	bl	8001178 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000170 	.word	0x20000170
 80010c8:	40000400 	.word	0x40000400

080010cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <HAL_TIM_PWM_MspInit+0x34>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_TIM_PWM_MspInit+0x38>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_TIM_PWM_MspInit+0x38>)
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_TIM_PWM_MspInit+0x38>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40012c00 	.word	0x40012c00
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001118:	d114      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201c      	movs	r0, #28
 8001138:	f001 f811 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800113c:	201c      	movs	r0, #28
 800113e:	f001 f82a 	bl	8002196 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001142:	e010      	b.n	8001166 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_TIM_Base_MspInit+0x6c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10b      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40000400 	.word	0x40000400

08001178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_TIM_MspPostInit+0x98>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d119      	bne.n	80011cc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_TIM_MspPostInit+0x9c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_TIM_MspPostInit+0x9c>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_TIM_MspPostInit+0x9c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011b0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	4814      	ldr	r0, [pc, #80]	; (8001218 <HAL_TIM_MspPostInit+0xa0>)
 80011c6:	f001 f801 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011ca:	e01c      	b.n	8001206 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_TIM_MspPostInit+0xa4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d117      	bne.n	8001206 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_TIM_MspPostInit+0x9c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_TIM_MspPostInit+0x9c>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_TIM_MspPostInit+0x9c>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH1_MOTOR_R_Pin|TIM3_CH2_MOTOR_L_Pin;
 80011ee:	23c0      	movs	r3, #192	; 0xc0
 80011f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_TIM_MspPostInit+0xa0>)
 8001202:	f000 ffe3 	bl	80021cc <HAL_GPIO_Init>
}
 8001206:	bf00      	nop
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40010800 	.word	0x40010800
 800121c:	40000400 	.word	0x40000400

08001220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001220:	f7ff fde4 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001226:	490c      	ldr	r1, [pc, #48]	; (8001258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <LoopFillZerobss+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800123c:	4c09      	ldr	r4, [pc, #36]	; (8001264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 fccf 	bl	8003bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124e:	f7ff fbe5 	bl	8000a1c <main>
  bx lr
 8001252:	4770      	bx	lr
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800125c:	08003c78 	.word	0x08003c78
  ldr r2, =_sbss
 8001260:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001264:	200001bc 	.word	0x200001bc

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x28>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 ff63 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd42 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 ff7b 	bl	80021b2 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d4:	f000 ff43 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000004 	.word	0x20000004
 80012f0:	2000000c 	.word	0x2000000c
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_IncTick+0x20>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	2000000c 	.word	0x2000000c
 8001318:	200001b8 	.word	0x200001b8

0800131c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	200001b8 	.word	0x200001b8

08001330 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0ed      	b.n	800151e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff f9ce 	bl	80006f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff ffda 	bl	800131c <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800136a:	e012      	b.n	8001392 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800136c:	f7ff ffd6 	bl	800131c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2205      	movs	r2, #5
 800138a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0c5      	b.n	800151e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e5      	beq.n	800136c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0202 	bic.w	r2, r2, #2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b0:	f7ff ffb4 	bl	800131c <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b6:	e012      	b.n	80013de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b8:	f7ff ffb0 	bl	800131c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d90b      	bls.n	80013de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2205      	movs	r2, #5
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e09f      	b.n	800151e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e5      	bne.n	80013b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7e5b      	ldrb	r3, [r3, #25]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7e9b      	ldrb	r3, [r3, #26]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0220 	orr.w	r2, r2, #32
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e007      	b.n	800146a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0220 	bic.w	r2, r2, #32
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7edb      	ldrb	r3, [r3, #27]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0210 	bic.w	r2, r2, #16
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0210 	orr.w	r2, r2, #16
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7f1b      	ldrb	r3, [r3, #28]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0208 	orr.w	r2, r2, #8
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e007      	b.n	80014be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7f5b      	ldrb	r3, [r3, #29]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0204 	orr.w	r2, r2, #4
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0204 	bic.w	r2, r2, #4
 80014e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	ea42 0103 	orr.w	r1, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001526:	b480      	push	{r7}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800153e:	7cfb      	ldrb	r3, [r7, #19]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d003      	beq.n	800154c <HAL_CAN_ConfigFilter+0x26>
 8001544:	7cfb      	ldrb	r3, [r7, #19]
 8001546:	2b02      	cmp	r3, #2
 8001548:	f040 80aa 	bne.w	80016a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	2201      	movs	r2, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d123      	bne.n	80015ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	401a      	ands	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3248      	adds	r2, #72	; 0x48
 80015ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c4:	6979      	ldr	r1, [r7, #20]
 80015c6:	3348      	adds	r3, #72	; 0x48
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d122      	bne.n	800161c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	431a      	orrs	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3248      	adds	r2, #72	; 0x48
 80015fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001610:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001612:	6979      	ldr	r1, [r7, #20]
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001636:	e007      	b.n	8001648 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001662:	e007      	b.n	8001674 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	431a      	orrs	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d107      	bne.n	800168c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	431a      	orrs	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001692:	f023 0201 	bic.w	r2, r3, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e006      	b.n	80016ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d12e      	bne.n	800172a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff fe1a 	bl	800131c <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ea:	e012      	b.n	8001712 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ec:	f7ff fe16 	bl	800131c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b0a      	cmp	r3, #10
 80016f8:	d90b      	bls.n	8001712 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2205      	movs	r2, #5
 800170a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e012      	b.n	8001738 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e5      	bne.n	80016ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e006      	b.n	8001738 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001754:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d003      	beq.n	800176c <HAL_CAN_AddTxMessage+0x2c>
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	2b02      	cmp	r3, #2
 8001768:	f040 80ad 	bne.w	80018c6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10a      	bne.n	800178c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8095 	beq.w	80018b6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	0e1b      	lsrs	r3, r3, #24
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017b2:	68f9      	ldr	r1, [r7, #12]
 80017b4:	6809      	ldr	r1, [r1, #0]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3318      	adds	r3, #24
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	440b      	add	r3, r1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e00f      	b.n	80017e4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3318      	adds	r3, #24
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	440b      	add	r3, r1
 80017e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3318      	adds	r3, #24
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	3304      	adds	r3, #4
 80017f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	7d1b      	ldrb	r3, [r3, #20]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d111      	bne.n	8001824 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3318      	adds	r3, #24
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	3304      	adds	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	6811      	ldr	r1, [r2, #0]
 8001814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3318      	adds	r3, #24
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	3304      	adds	r3, #4
 8001822:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3307      	adds	r3, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	061a      	lsls	r2, r3, #24
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3306      	adds	r3, #6
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3305      	adds	r3, #5
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4313      	orrs	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	3204      	adds	r2, #4
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	4610      	mov	r0, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	6811      	ldr	r1, [r2, #0]
 800184c:	ea43 0200 	orr.w	r2, r3, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	440b      	add	r3, r1
 8001856:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800185a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3303      	adds	r3, #3
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	061a      	lsls	r2, r3, #24
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3302      	adds	r3, #2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3301      	adds	r3, #1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	4313      	orrs	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	4610      	mov	r0, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	6811      	ldr	r1, [r2, #0]
 8001882:	ea43 0200 	orr.w	r2, r3, r0
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	440b      	add	r3, r1
 800188c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001890:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3318      	adds	r3, #24
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	6811      	ldr	r1, [r2, #0]
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3318      	adds	r3, #24
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	440b      	add	r3, r1
 80018b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e00e      	b.n	80018d4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e006      	b.n	80018d4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
  }
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3724      	adds	r7, #36	; 0x24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018de:	b480      	push	{r7}
 80018e0:	b087      	sub	sp, #28
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d003      	beq.n	8001902 <HAL_CAN_GetRxMessage+0x24>
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 8103 	bne.w	8001b08 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10e      	bne.n	8001926 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0f7      	b.n	8001b16 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0e8      	b.n	8001b16 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	331b      	adds	r3, #27
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0204 	and.w	r2, r3, #4
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	331b      	adds	r3, #27
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0d5b      	lsrs	r3, r3, #21
 8001972:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e00b      	b.n	8001994 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	331b      	adds	r3, #27
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	08db      	lsrs	r3, r3, #3
 800198c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	331b      	adds	r3, #27
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0202 	and.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	331b      	adds	r3, #27
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	3304      	adds	r3, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2208      	movs	r2, #8
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	e00b      	b.n	80019e2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	331b      	adds	r3, #27
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	4413      	add	r3, r2
 80019d6:	3304      	adds	r3, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 020f 	and.w	r2, r3, #15
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	331b      	adds	r3, #27
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	331b      	adds	r3, #27
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0c1b      	lsrs	r3, r3, #16
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0a1a      	lsrs	r2, r3, #8
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0c1a      	lsrs	r2, r3, #16
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3302      	adds	r3, #2
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0e1a      	lsrs	r2, r3, #24
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3303      	adds	r3, #3
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	0a1a      	lsrs	r2, r3, #8
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	3305      	adds	r3, #5
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0c1a      	lsrs	r2, r3, #16
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3306      	adds	r3, #6
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0e1a      	lsrs	r2, r3, #24
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3307      	adds	r3, #7
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0220 	orr.w	r2, r2, #32
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	e007      	b.n	8001b04 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e006      	b.n	8001b16 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b30:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d002      	beq.n	8001b3e <HAL_CAN_ActivateNotification+0x1e>
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d109      	bne.n	8001b52 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6959      	ldr	r1, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e006      	b.n	8001b60 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d07c      	beq.n	8001caa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d023      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f983 	bl	8001ed8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bd2:	e016      	b.n	8001c02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e00c      	b.n	8001c02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	e002      	b.n	8001c02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f986 	bl	8001f0e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d024      	beq.n	8001c56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f962 	bl	8001eea <HAL_CAN_TxMailbox1CompleteCallback>
 8001c26:	e016      	b.n	8001c56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e00c      	b.n	8001c56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d004      	beq.n	8001c50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	e002      	b.n	8001c56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f965 	bl	8001f20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d024      	beq.n	8001caa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f941 	bl	8001efc <HAL_CAN_TxMailbox2CompleteCallback>
 8001c7a:	e016      	b.n	8001caa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e00c      	b.n	8001caa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca2:	e002      	b.n	8001caa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f944 	bl	8001f32 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f933 	bl	8001f56 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f91b 	bl	8001f44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f90a 	bl	8001f68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe fd61 	bl	8000834 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8f3 	bl	8001f7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2208      	movs	r2, #8
 8001dae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8eb 	bl	8001f8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d07b      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d072      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d043      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03e      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e38:	2b60      	cmp	r3, #96	; 0x60
 8001e3a:	d02b      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x32a>
 8001e3c:	2b60      	cmp	r3, #96	; 0x60
 8001e3e:	d82e      	bhi.n	8001e9e <HAL_CAN_IRQHandler+0x334>
 8001e40:	2b50      	cmp	r3, #80	; 0x50
 8001e42:	d022      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x320>
 8001e44:	2b50      	cmp	r3, #80	; 0x50
 8001e46:	d82a      	bhi.n	8001e9e <HAL_CAN_IRQHandler+0x334>
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d019      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x316>
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d826      	bhi.n	8001e9e <HAL_CAN_IRQHandler+0x334>
 8001e50:	2b30      	cmp	r3, #48	; 0x30
 8001e52:	d010      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x30c>
 8001e54:	2b30      	cmp	r3, #48	; 0x30
 8001e56:	d822      	bhi.n	8001e9e <HAL_CAN_IRQHandler+0x334>
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d002      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x2f8>
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d005      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e60:	e01d      	b.n	8001e9e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e6a:	e019      	b.n	8001ea0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e74:	e014      	b.n	8001ea0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e7e:	e00f      	b.n	8001ea0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e88:	e00a      	b.n	8001ea0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e92:	e005      	b.n	8001ea0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e9c:	e000      	b.n	8001ea0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e9e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001eae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f867 	bl	8001f9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4906      	ldr	r1, [pc, #24]	; (8002048 <__NVIC_EnableIRQ+0x34>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002128:	f7ff ff90 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff2d 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff42 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff90 	bl	80020a0 <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5f 	bl	800204c <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff35 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b08b      	sub	sp, #44	; 0x2c
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021de:	e161      	b.n	80024a4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021e0:	2201      	movs	r2, #1
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8150 	bne.w	800249e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a97      	ldr	r2, [pc, #604]	; (8002460 <HAL_GPIO_Init+0x294>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d05e      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002208:	4a95      	ldr	r2, [pc, #596]	; (8002460 <HAL_GPIO_Init+0x294>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d875      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 800220e:	4a95      	ldr	r2, [pc, #596]	; (8002464 <HAL_GPIO_Init+0x298>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d058      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002214:	4a93      	ldr	r2, [pc, #588]	; (8002464 <HAL_GPIO_Init+0x298>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d86f      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 800221a:	4a93      	ldr	r2, [pc, #588]	; (8002468 <HAL_GPIO_Init+0x29c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d052      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002220:	4a91      	ldr	r2, [pc, #580]	; (8002468 <HAL_GPIO_Init+0x29c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d869      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 8002226:	4a91      	ldr	r2, [pc, #580]	; (800246c <HAL_GPIO_Init+0x2a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04c      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 800222c:	4a8f      	ldr	r2, [pc, #572]	; (800246c <HAL_GPIO_Init+0x2a0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d863      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 8002232:	4a8f      	ldr	r2, [pc, #572]	; (8002470 <HAL_GPIO_Init+0x2a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d046      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002238:	4a8d      	ldr	r2, [pc, #564]	; (8002470 <HAL_GPIO_Init+0x2a4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d85d      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 800223e:	2b12      	cmp	r3, #18
 8002240:	d82a      	bhi.n	8002298 <HAL_GPIO_Init+0xcc>
 8002242:	2b12      	cmp	r3, #18
 8002244:	d859      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <HAL_GPIO_Init+0x80>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	080022c7 	.word	0x080022c7
 8002250:	080022a1 	.word	0x080022a1
 8002254:	080022b3 	.word	0x080022b3
 8002258:	080022f5 	.word	0x080022f5
 800225c:	080022fb 	.word	0x080022fb
 8002260:	080022fb 	.word	0x080022fb
 8002264:	080022fb 	.word	0x080022fb
 8002268:	080022fb 	.word	0x080022fb
 800226c:	080022fb 	.word	0x080022fb
 8002270:	080022fb 	.word	0x080022fb
 8002274:	080022fb 	.word	0x080022fb
 8002278:	080022fb 	.word	0x080022fb
 800227c:	080022fb 	.word	0x080022fb
 8002280:	080022fb 	.word	0x080022fb
 8002284:	080022fb 	.word	0x080022fb
 8002288:	080022fb 	.word	0x080022fb
 800228c:	080022fb 	.word	0x080022fb
 8002290:	080022a9 	.word	0x080022a9
 8002294:	080022bd 	.word	0x080022bd
 8002298:	4a76      	ldr	r2, [pc, #472]	; (8002474 <HAL_GPIO_Init+0x2a8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800229e:	e02c      	b.n	80022fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	623b      	str	r3, [r7, #32]
          break;
 80022a6:	e029      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	3304      	adds	r3, #4
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e024      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	3308      	adds	r3, #8
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e01f      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	330c      	adds	r3, #12
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e01a      	b.n	80022fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ce:	2304      	movs	r3, #4
 80022d0:	623b      	str	r3, [r7, #32]
          break;
 80022d2:	e013      	b.n	80022fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022dc:	2308      	movs	r3, #8
 80022de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	611a      	str	r2, [r3, #16]
          break;
 80022e6:	e009      	b.n	80022fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e8:	2308      	movs	r3, #8
 80022ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	615a      	str	r2, [r3, #20]
          break;
 80022f2:	e003      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x130>
          break;
 80022fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2bff      	cmp	r3, #255	; 0xff
 8002300:	d801      	bhi.n	8002306 <HAL_GPIO_Init+0x13a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	e001      	b.n	800230a <HAL_GPIO_Init+0x13e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d802      	bhi.n	8002318 <HAL_GPIO_Init+0x14c>
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x152>
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3b08      	subs	r3, #8
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	210f      	movs	r1, #15
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	431a      	orrs	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80a9 	beq.w	800249e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_GPIO_Init+0x2ac>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a49      	ldr	r2, [pc, #292]	; (8002478 <HAL_GPIO_Init+0x2ac>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_GPIO_Init+0x2ac>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002364:	4a45      	ldr	r2, [pc, #276]	; (800247c <HAL_GPIO_Init+0x2b0>)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <HAL_GPIO_Init+0x2b4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00d      	beq.n	80023ac <HAL_GPIO_Init+0x1e0>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3c      	ldr	r2, [pc, #240]	; (8002484 <HAL_GPIO_Init+0x2b8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <HAL_GPIO_Init+0x1dc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <HAL_GPIO_Init+0x2bc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_GPIO_Init+0x1d8>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e004      	b.n	80023ae <HAL_GPIO_Init+0x1e2>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x1e2>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_GPIO_Init+0x1e2>
 80023ac:	2300      	movs	r3, #0
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023be:	492f      	ldr	r1, [pc, #188]	; (800247c <HAL_GPIO_Init+0x2b0>)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_GPIO_Init+0x2c0>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	492b      	ldr	r1, [pc, #172]	; (800248c <HAL_GPIO_Init+0x2c0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_GPIO_Init+0x2c0>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4927      	ldr	r1, [pc, #156]	; (800248c <HAL_GPIO_Init+0x2c0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4921      	ldr	r1, [pc, #132]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	491d      	ldr	r1, [pc, #116]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002418:	4013      	ands	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_GPIO_Init+0x2c0>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4917      	ldr	r1, [pc, #92]	; (800248c <HAL_GPIO_Init+0x2c0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4913      	ldr	r1, [pc, #76]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002440:	4013      	ands	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01f      	beq.n	8002490 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	490d      	ldr	r1, [pc, #52]	; (800248c <HAL_GPIO_Init+0x2c0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e01f      	b.n	800249e <HAL_GPIO_Init+0x2d2>
 800245e:	bf00      	nop
 8002460:	10320000 	.word	0x10320000
 8002464:	10310000 	.word	0x10310000
 8002468:	10220000 	.word	0x10220000
 800246c:	10210000 	.word	0x10210000
 8002470:	10120000 	.word	0x10120000
 8002474:	10110000 	.word	0x10110000
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	40010800 	.word	0x40010800
 8002484:	40010c00 	.word	0x40010c00
 8002488:	40011000 	.word	0x40011000
 800248c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_GPIO_Init+0x2f4>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	43db      	mvns	r3, r3
 8002498:	4909      	ldr	r1, [pc, #36]	; (80024c0 <HAL_GPIO_Init+0x2f4>)
 800249a:	4013      	ands	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	3301      	adds	r3, #1
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f ae96 	bne.w	80021e0 <HAL_GPIO_Init+0x14>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	372c      	adds	r7, #44	; 0x2c
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40010400 	.word	0x40010400

080024c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43d9      	mvns	r1, r3
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	400b      	ands	r3, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	611a      	str	r2, [r3, #16]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e272      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8087 	beq.w	8002626 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002518:	4b92      	ldr	r3, [pc, #584]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b04      	cmp	r3, #4
 8002522:	d00c      	beq.n	800253e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002524:	4b8f      	ldr	r3, [pc, #572]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d112      	bne.n	8002556 <HAL_RCC_OscConfig+0x5e>
 8002530:	4b8c      	ldr	r3, [pc, #560]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d10b      	bne.n	8002556 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d06c      	beq.n	8002624 <HAL_RCC_OscConfig+0x12c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d168      	bne.n	8002624 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e24c      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x76>
 8002560:	4b80      	ldr	r3, [pc, #512]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7f      	ldr	r2, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e02e      	b.n	80025cc <HAL_RCC_OscConfig+0xd4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x98>
 8002576:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b78      	ldr	r3, [pc, #480]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xd4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0xbc>
 800259a:	4b72      	ldr	r3, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a71      	ldr	r2, [pc, #452]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xd4>
 80025b4:	4b6b      	ldr	r3, [pc, #428]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6a      	ldr	r2, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fea2 	bl	800131c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fe9e 	bl	800131c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e200      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xe4>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fe8e 	bl	800131c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fe8a 	bl	800131c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1ec      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x10c>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x18c>
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d116      	bne.n	8002684 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x176>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e1c0      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4939      	ldr	r1, [pc, #228]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	e03a      	b.n	80026fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCC_OscConfig+0x270>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fe43 	bl	800131c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fe3f 	bl	800131c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1a1      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4927      	ldr	r1, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x270>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe22 	bl	800131c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fe1e 	bl	800131c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e180      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03a      	beq.n	800277c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d019      	beq.n	8002742 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_RCC_OscConfig+0x274>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe fe02 	bl	800131c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe fdfe 	bl	800131c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e160      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_RCC_OscConfig+0x26c>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800273a:	2001      	movs	r0, #1
 800273c:	f000 fa9c 	bl	8002c78 <RCC_Delay>
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x274>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe fde8 	bl	800131c <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	e00f      	b.n	8002770 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7fe fde4 	bl	800131c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d908      	bls.n	8002770 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e146      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	42420000 	.word	0x42420000
 800276c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e9      	bne.n	8002750 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a6 	beq.w	80028d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a87      	ldr	r2, [pc, #540]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	61d3      	str	r3, [r2, #28]
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7e      	ldr	r2, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fda5 	bl	800131c <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe fda1 	bl	800131c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e103      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b75      	ldr	r3, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x4c8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x312>
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6213      	str	r3, [r2, #32]
 8002808:	e02d      	b.n	8002866 <HAL_RCC_OscConfig+0x36e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x334>
 8002812:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a69      	ldr	r2, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	e01c      	b.n	8002866 <HAL_RCC_OscConfig+0x36e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d10c      	bne.n	800284e <HAL_RCC_OscConfig+0x356>
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a60      	ldr	r2, [pc, #384]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	e00b      	b.n	8002866 <HAL_RCC_OscConfig+0x36e>
 800284e:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	6213      	str	r3, [r2, #32]
 800285a:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a57      	ldr	r2, [pc, #348]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d015      	beq.n	800289a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe fd55 	bl	800131c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fd51 	bl	800131c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0b1      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCC_OscConfig+0x37e>
 8002898:	e014      	b.n	80028c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe fd3f 	bl	800131c <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fd3b 	bl	800131c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e09b      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ee      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a3b      	ldr	r2, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8087 	beq.w	80029ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d061      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d146      	bne.n	8002982 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe fd0f 	bl	800131c <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fd0b 	bl	800131c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e06d      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d108      	bne.n	800293c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4921      	ldr	r1, [pc, #132]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a19      	ldr	r1, [r3, #32]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	430b      	orrs	r3, r1
 800294e:	491b      	ldr	r1, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fcdf 	bl	800131c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fcdb 	bl	800131c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e03d      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x46a>
 8002980:	e035      	b.n	80029ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_RCC_OscConfig+0x4cc>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fcc8 	bl	800131c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fcc4 	bl	800131c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e026      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x498>
 80029ae:	e01e      	b.n	80029ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e019      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x500>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0d0      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4965      	ldr	r1, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d040      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e073      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4936      	ldr	r1, [pc, #216]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fc16 	bl	800131c <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fc12 	bl	800131c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e053      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d210      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4922      	ldr	r1, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f821 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fb74 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08003c4c 	.word	0x08003c4c
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	20000008 	.word	0x20000008

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x30>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x36>
 8002bfe:	e027      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c02:	613b      	str	r3, [r7, #16]
      break;
 8002c04:	e027      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0c5b      	lsrs	r3, r3, #17
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c32:	fb03 f202 	mul.w	r2, r3, r2
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e004      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
      break;
 8002c4e:	e002      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c52:	613b      	str	r3, [r7, #16]
      break;
 8002c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c56:	693b      	ldr	r3, [r7, #16]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	007a1200 	.word	0x007a1200
 8002c6c:	08003c5c 	.word	0x08003c5c
 8002c70:	08003c6c 	.word	0x08003c6c
 8002c74:	003d0900 	.word	0x003d0900

08002c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <RCC_Delay+0x34>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <RCC_Delay+0x38>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c94:	bf00      	nop
  }
  while (Delay --);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	60fa      	str	r2, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f9      	bne.n	8002c94 <RCC_Delay+0x1c>
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000004 	.word	0x20000004
 8002cb0:	10624dd3 	.word	0x10624dd3

08002cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e041      	b.n	8002d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fa14 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f000 fc1c 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e035      	b.n	8002dd8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_TIM_Base_Start_IT+0x90>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_TIM_Base_Start_IT+0x4e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d004      	beq.n	8002da2 <HAL_TIM_Base_Start_IT+0x4e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <HAL_TIM_Base_Start_IT+0x94>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d111      	bne.n	8002dc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b06      	cmp	r3, #6
 8002db2:	d010      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc4:	e007      	b.n	8002dd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40000400 	.word	0x40000400

08002dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e041      	b.n	8002e82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f95a 	bl	80010cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f000 fb80 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x24>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e022      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d109      	bne.n	8002eca <HAL_TIM_PWM_Start+0x3e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e015      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d109      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x58>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e059      	b.n	8002fb2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x82>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x92>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd6c 	bl	8003a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <HAL_TIM_PWM_Start+0x130>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_TIM_PWM_Start+0x130>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_TIM_PWM_Start+0xf0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d004      	beq.n	8002f7c <HAL_TIM_PWM_Start+0xf0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_TIM_PWM_Start+0x134>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d111      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d010      	beq.n	8002fb0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e007      	b.n	8002fb0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40000400 	.word	0x40000400

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0202 	mvn.w	r2, #2
 8002ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa76 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fa69 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa78 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b04      	cmp	r3, #4
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0204 	mvn.w	r2, #4
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa4c 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa3f 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fa4e 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b08      	cmp	r3, #8
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0208 	mvn.w	r2, #8
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa22 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa15 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fa24 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d122      	bne.n	800311c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0210 	mvn.w	r2, #16
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2208      	movs	r2, #8
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f9f8 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9eb 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f9fa 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0201 	mvn.w	r2, #1
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fd66 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fd2a 	bl	8003bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9be 	bl	800351c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0220 	mvn.w	r2, #32
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fcf5 	bl	8003bb6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e0ae      	b.n	8003350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f200 809f 	bhi.w	8003340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003341 	.word	0x08003341
 8003210:	08003341 	.word	0x08003341
 8003214:	08003341 	.word	0x08003341
 8003218:	0800327d 	.word	0x0800327d
 800321c:	08003341 	.word	0x08003341
 8003220:	08003341 	.word	0x08003341
 8003224:	08003341 	.word	0x08003341
 8003228:	080032bf 	.word	0x080032bf
 800322c:	08003341 	.word	0x08003341
 8003230:	08003341 	.word	0x08003341
 8003234:	08003341 	.word	0x08003341
 8003238:	080032ff 	.word	0x080032ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f9cc 	bl	80035e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	619a      	str	r2, [r3, #24]
      break;
 800327a:	e064      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fa12 	bl	80036ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	021a      	lsls	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	619a      	str	r2, [r3, #24]
      break;
 80032bc:	e043      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fa5b 	bl	8003780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0208 	orr.w	r2, r2, #8
 80032d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0204 	bic.w	r2, r2, #4
 80032e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]
      break;
 80032fc:	e023      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 faa5 	bl	8003854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	021a      	lsls	r2, r3, #8
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	61da      	str	r2, [r3, #28]
      break;
 800333e:	e002      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
      break;
 8003344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIM_ConfigClockSource+0x1c>
 8003370:	2302      	movs	r3, #2
 8003372:	e0b4      	b.n	80034de <HAL_TIM_ConfigClockSource+0x186>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d03e      	beq.n	800342c <HAL_TIM_ConfigClockSource+0xd4>
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b2:	f200 8087 	bhi.w	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	f000 8086 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x172>
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d87f      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b70      	cmp	r3, #112	; 0x70
 80033c6:	d01a      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xa6>
 80033c8:	2b70      	cmp	r3, #112	; 0x70
 80033ca:	d87b      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	2b60      	cmp	r3, #96	; 0x60
 80033ce:	d050      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x11a>
 80033d0:	2b60      	cmp	r3, #96	; 0x60
 80033d2:	d877      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033d4:	2b50      	cmp	r3, #80	; 0x50
 80033d6:	d03c      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xfa>
 80033d8:	2b50      	cmp	r3, #80	; 0x50
 80033da:	d873      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d058      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x13a>
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d86f      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033e4:	2b30      	cmp	r3, #48	; 0x30
 80033e6:	d064      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033e8:	2b30      	cmp	r3, #48	; 0x30
 80033ea:	d86b      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d060      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d867      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d05a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	e062      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800340e:	f000 fae6 	bl	80039de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	609a      	str	r2, [r3, #8]
      break;
 800342a:	e04f      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800343c:	f000 facf 	bl	80039de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e03c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	461a      	mov	r2, r3
 8003460:	f000 fa46 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2150      	movs	r1, #80	; 0x50
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa9d 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003470:	e02c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800347e:	461a      	mov	r2, r3
 8003480:	f000 fa64 	bl	800394c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2160      	movs	r1, #96	; 0x60
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fa8d 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003490:	e01c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fa26 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa7d 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80034b0:	e00c      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fa74 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80034c2:	e003      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      break;
 80034c8:	e000      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
	...

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <TIM_Base_SetConfig+0xa8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <TIM_Base_SetConfig+0x28>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0x28>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <TIM_Base_SetConfig+0xac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d108      	bne.n	800356a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <TIM_Base_SetConfig+0xa8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0x52>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0x52>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <TIM_Base_SetConfig+0xac>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <TIM_Base_SetConfig+0xa8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400

080035e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 0201 	bic.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0302 	bic.w	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <TIM_OC1_SetConfig+0xc8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10c      	bne.n	8003656 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0308 	bic.w	r3, r3, #8
 8003642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <TIM_OC1_SetConfig+0xc8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d111      	bne.n	8003682 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40012c00 	.word	0x40012c00

080036ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 0210 	bic.w	r2, r3, #16
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0320 	bic.w	r3, r3, #32
 80036f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <TIM_OC2_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <TIM_OC2_SetConfig+0xd0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d113      	bne.n	8003758 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00

08003780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <TIM_OC3_SetConfig+0xd0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10d      	bne.n	80037fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <TIM_OC3_SetConfig+0xd0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d113      	bne.n	800382a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00

08003854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800389e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	031b      	lsls	r3, r3, #12
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0f      	ldr	r2, [pc, #60]	; (80038ec <TIM_OC4_SetConfig+0x98>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d109      	bne.n	80038c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00

080038f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 030a 	bic.w	r3, r3, #10
 800392c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0210 	bic.w	r2, r3, #16
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	031b      	lsls	r3, r3, #12
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003988:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f043 0307 	orr.w	r3, r3, #7
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039de:	b480      	push	{r7}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	021a      	lsls	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1a      	ldr	r2, [r3, #32]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	401a      	ands	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e041      	b.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d004      	beq.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d10c      	bne.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400

08003b14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e03d      	b.n	8003bac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <memset>:
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4402      	add	r2, r0
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d100      	bne.n	8003be4 <memset+0xa>
 8003be2:	4770      	bx	lr
 8003be4:	f803 1b01 	strb.w	r1, [r3], #1
 8003be8:	e7f9      	b.n	8003bde <memset+0x4>
	...

08003bec <__libc_init_array>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	2600      	movs	r6, #0
 8003bf0:	4d0c      	ldr	r5, [pc, #48]	; (8003c24 <__libc_init_array+0x38>)
 8003bf2:	4c0d      	ldr	r4, [pc, #52]	; (8003c28 <__libc_init_array+0x3c>)
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	42a6      	cmp	r6, r4
 8003bfa:	d109      	bne.n	8003c10 <__libc_init_array+0x24>
 8003bfc:	f000 f81a 	bl	8003c34 <_init>
 8003c00:	2600      	movs	r6, #0
 8003c02:	4d0a      	ldr	r5, [pc, #40]	; (8003c2c <__libc_init_array+0x40>)
 8003c04:	4c0a      	ldr	r4, [pc, #40]	; (8003c30 <__libc_init_array+0x44>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	42a6      	cmp	r6, r4
 8003c0c:	d105      	bne.n	8003c1a <__libc_init_array+0x2e>
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c14:	4798      	blx	r3
 8003c16:	3601      	adds	r6, #1
 8003c18:	e7ee      	b.n	8003bf8 <__libc_init_array+0xc>
 8003c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1e:	4798      	blx	r3
 8003c20:	3601      	adds	r6, #1
 8003c22:	e7f2      	b.n	8003c0a <__libc_init_array+0x1e>
 8003c24:	08003c70 	.word	0x08003c70
 8003c28:	08003c70 	.word	0x08003c70
 8003c2c:	08003c70 	.word	0x08003c70
 8003c30:	08003c74 	.word	0x08003c74

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
