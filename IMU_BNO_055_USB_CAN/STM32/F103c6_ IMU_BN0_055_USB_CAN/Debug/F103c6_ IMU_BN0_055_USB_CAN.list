
F103c6_ IMU_BN0_055_USB_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007154  08007154  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007154  08007154  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007154  08007154  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800715c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000078  080071d0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  080071d0  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e693  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265d  00000000  00000000  0002e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c26  00000000  00000000  00031d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019541  00000000  00000000  000329ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112f6  00000000  00000000  0004beef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dc9a  00000000  00000000  0005d1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c14  00000000  00000000  000eae80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000efa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ea0 	.word	0x08006ea0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08006ea0 	.word	0x08006ea0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2uiz>:
 80009f8:	004a      	lsls	r2, r1, #1
 80009fa:	d211      	bcs.n	8000a20 <__aeabi_d2uiz+0x28>
 80009fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a00:	d211      	bcs.n	8000a26 <__aeabi_d2uiz+0x2e>
 8000a02:	d50d      	bpl.n	8000a20 <__aeabi_d2uiz+0x28>
 8000a04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a0c:	d40e      	bmi.n	8000a2c <__aeabi_d2uiz+0x34>
 8000a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_d2uiz+0x3a>
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0000 	mov.w	r0, #0
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2uiz>:
 8000f94:	0042      	lsls	r2, r0, #1
 8000f96:	d20e      	bcs.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30b      	bcc.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d409      	bmi.n	8000fbc <__aeabi_f2uiz+0x28>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr
 8000fbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc0:	d101      	bne.n	8000fc6 <__aeabi_f2uiz+0x32>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_f2uiz+0x38>
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2007      	movs	r0, #7
 8000fe4:	f000 faee 	bl	80015c4 <bno055_writeData>
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	203d      	movs	r0, #61	; 0x3d
 8001000:	f000 fae0 	bl	80015c4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800100a:	2013      	movs	r0, #19
 800100c:	f000 face 	bl	80015ac <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001010:	e002      	b.n	8001018 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001012:	2007      	movs	r0, #7
 8001014:	f000 faca 	bl	80015ac <bno055_delay>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ffe3 	bl	8000ff0 <bno055_setOperationMode>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001032:	200c      	movs	r0, #12
 8001034:	f7ff ffdc 	bl	8000ff0 <bno055_setOperationMode>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001040:	2120      	movs	r1, #32
 8001042:	203f      	movs	r0, #63	; 0x3f
 8001044:	f000 fabe 	bl	80015c4 <bno055_writeData>
  bno055_delay(700);
 8001048:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800104c:	f000 faae 	bl	80015ac <bno055_delay>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  bno055_reset();
 800105a:	f7ff ffef 	bl	800103c <bno055_reset>

  uint8_t id = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	2000      	movs	r0, #0
 800106a:	f000 fb97 	bl	800179c <bno055_readData>
  if (id != BNO055_ID) {
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2ba0      	cmp	r3, #160	; 0xa0
 8001072:	d004      	beq.n	800107e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <bno055_setup+0x4c>)
 800107a:	f005 f839 	bl	80060f0 <iprintf>
  }
  bno055_setPage(0);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ffa8 	bl	8000fd4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001084:	2100      	movs	r1, #0
 8001086:	203f      	movs	r0, #63	; 0x3f
 8001088:	f000 fa9c 	bl	80015c4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800108c:	f7ff ffc8 	bl	8001020 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fa8b 	bl	80015ac <bno055_delay>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	08006eb8 	.word	0x08006eb8

080010a4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff8f 	bl	8000fd4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b20      	cmp	r3, #32
 80010ba:	d107      	bne.n	80010cc <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 80010bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2208      	movs	r2, #8
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fb69 	bl	800179c <bno055_readData>
 80010ca:	e006      	b.n	80010da <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 80010cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2206      	movs	r2, #6
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fb61 	bl	800179c <bno055_readData>

  double scale = 1;
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b77      	ldr	r3, [pc, #476]	; (80012bc <bno055_getVector+0x218>)
 80010e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2b0e      	cmp	r3, #14
 80010e8:	d109      	bne.n	80010fe <bno055_getVector+0x5a>
    scale = magScale;
 80010ea:	4b75      	ldr	r3, [pc, #468]	; (80012c0 <bno055_getVector+0x21c>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f96e 	bl	80003d0 <__aeabi_ui2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80010fc:	e038      	b.n	8001170 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	2b08      	cmp	r3, #8
 8001102:	d005      	beq.n	8001110 <bno055_getVector+0x6c>
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b28      	cmp	r3, #40	; 0x28
 8001108:	d002      	beq.n	8001110 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	2b2e      	cmp	r3, #46	; 0x2e
 800110e:	d109      	bne.n	8001124 <bno055_getVector+0x80>
    scale = accelScale;
 8001110:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <bno055_getVector+0x220>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f95b 	bl	80003d0 <__aeabi_ui2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001122:	e025      	b.n	8001170 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2b14      	cmp	r3, #20
 8001128:	d109      	bne.n	800113e <bno055_getVector+0x9a>
    scale = angularRateScale;
 800112a:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <bno055_getVector+0x224>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f94e 	bl	80003d0 <__aeabi_ui2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800113c:	e018      	b.n	8001170 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	2b1a      	cmp	r3, #26
 8001142:	d109      	bne.n	8001158 <bno055_getVector+0xb4>
    scale = eulerScale;
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <bno055_getVector+0x228>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f941 	bl	80003d0 <__aeabi_ui2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001156:	e00b      	b.n	8001170 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	2b20      	cmp	r3, #32
 800115c:	d108      	bne.n	8001170 <bno055_getVector+0xcc>
    scale = quaScale;
 800115e:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <bno055_getVector+0x22c>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f934 	bl	80003d0 <__aeabi_ui2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2220      	movs	r2, #32
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f005 f8ff 	bl	800637c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2b20      	cmp	r3, #32
 8001182:	d150      	bne.n	8001226 <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001184:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21b      	sxth	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f92a 	bl	80003f0 <__aeabi_i2d>
 800119c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011a0:	f7ff faba 	bl	8000718 <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f916 	bl	80003f0 <__aeabi_i2d>
 80011c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011c8:	f7ff faa6 	bl	8000718 <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80011d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f902 	bl	80003f0 <__aeabi_i2d>
 80011ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011f0:	f7ff fa92 	bl	8000718 <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21b      	sxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8ee 	bl	80003f0 <__aeabi_i2d>
 8001214:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001218:	f7ff fa7e 	bl	8000718 <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001224:	e03b      	b.n	800129e <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001226:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21b      	sxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f8d9 	bl	80003f0 <__aeabi_i2d>
 800123e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001242:	f7ff fa69 	bl	8000718 <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800124e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f8c5 	bl	80003f0 <__aeabi_i2d>
 8001266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800126a:	f7ff fa55 	bl	8000718 <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8b1 	bl	80003f0 <__aeabi_i2d>
 800128e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001292:	f7ff fa41 	bl	8000718 <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	461d      	mov	r5, r3
 80012a2:	f107 0408 	add.w	r4, r7, #8
 80012a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	3738      	adds	r7, #56	; 0x38
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	3ff00000 	.word	0x3ff00000
 80012c0:	20000006 	.word	0x20000006
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000002 	.word	0x20000002
 80012cc:	20000004 	.word	0x20000004
 80012d0:	20000008 	.word	0x20000008

080012d4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	211a      	movs	r1, #26
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fedf 	bl	80010a4 <bno055_getVector>
}
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2120      	movs	r1, #32
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fed2 	bl	80010a4 <bno055_getVector>
}
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <MX_CAN_Init+0xa4>)
 8001312:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001316:	2209      	movs	r2, #9
 8001318:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <MX_CAN_Init+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001328:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800132c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001336:	2200      	movs	r2, #0
 8001338:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_CAN_Init+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_CAN_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_CAN_Init+0xa0>)
 8001354:	2200      	movs	r2, #0
 8001356:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_CAN_Init+0xa0>)
 800135a:	f001 f8b7 	bl	80024cc <HAL_CAN_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001364:	f000 fd8e 	bl	8001e84 <Error_Handler>

  /* ADDRESS CAN */

	  CAN_FilterTypeDef canfilterconfig;

	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800136c:	230a      	movs	r3, #10
 800136e:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterIdHigh = 0x111<<5;
 8001374:	f242 2320 	movw	r3, #8736	; 0x2220
 8001378:	603b      	str	r3, [r7, #0]
	  canfilterconfig.FilterIdLow = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 800137e:	f242 2320 	movw	r3, #8736	; 0x2220
 8001382:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_CAN_Init+0xa0>)
 800139a:	f001 f992 	bl	80026c2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000094 	.word	0x20000094
 80013ac:	40006400 	.word	0x40006400

080013b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <HAL_CAN_MspInit+0x9c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d139      	bne.n	8001444 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_CAN_MspInit+0xa0>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_CAN_MspInit+0xa0>)
 80013d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013da:	61d3      	str	r3, [r2, #28]
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_CAN_MspInit+0xa0>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_CAN_MspInit+0xa0>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_CAN_MspInit+0xa0>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_CAN_MspInit+0xa0>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <HAL_CAN_MspInit+0xa4>)
 8001416:	f001 ffa7 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <HAL_CAN_MspInit+0xa4>)
 8001430:	f001 ff9a 	bl	8003368 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2015      	movs	r0, #21
 800143a:	f001 ff5e 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800143e:	2015      	movs	r0, #21
 8001440:	f001 ff77 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40006400 	.word	0x40006400
 8001450:	40021000 	.word	0x40021000
 8001454:	40010800 	.word	0x40010800

08001458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_GPIO_Init+0x58>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <MX_GPIO_Init+0x58>)
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_GPIO_Init+0x58>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_GPIO_Init+0x58>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <MX_GPIO_Init+0x58>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_GPIO_Init+0x58>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_GPIO_Init+0x58>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <MX_GPIO_Init+0x58>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <MX_GPIO_Init+0x58>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C1_Init+0x50>)
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <MX_I2C1_Init+0x54>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_I2C1_Init+0x50>)
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_I2C1_Init+0x58>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_I2C1_Init+0x50>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_I2C1_Init+0x50>)
 80014f2:	f002 f8cf 	bl	8003694 <HAL_I2C_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014fc:	f000 fcc2 	bl	8001e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200000bc 	.word	0x200000bc
 8001508:	40005400 	.word	0x40005400
 800150c:	00061a80 	.word	0x00061a80

08001510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_I2C_MspInit+0x74>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d125      	bne.n	800157c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_I2C_MspInit+0x78>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_I2C_MspInit+0x78>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_I2C_MspInit+0x78>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154c:	2312      	movs	r3, #18
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	; (800158c <HAL_I2C_MspInit+0x7c>)
 8001560:	f001 ff02 	bl	8003368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0x78>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_I2C_MspInit+0x78>)
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156e:	61d3      	str	r3, [r2, #28]
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MspInit+0x78>)
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40021000 	.word	0x40021000
 800158c:	40010c00 	.word	0x40010c00

08001590 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <bno055_assignI2C+0x18>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000110 	.word	0x20000110

080015ac <bno055_delay>:

void bno055_delay(int time) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 ff64 	bl	8002484 <HAL_Delay>
#endif
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	733b      	strb	r3, [r7, #12]
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <bno055_writeData+0x184>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	f107 020c 	add.w	r2, r7, #12
 80015e4:	230a      	movs	r3, #10
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2302      	movs	r3, #2
 80015ea:	2150      	movs	r1, #80	; 0x50
 80015ec:	f002 f996 	bl	800391c <HAL_I2C_Master_Transmit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a0 	beq.w	800173c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d103      	bne.n	800160a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001602:	4852      	ldr	r0, [pc, #328]	; (800174c <bno055_writeData+0x188>)
 8001604:	f004 fdda 	bl	80061bc <puts>
 8001608:	e012      	b.n	8001630 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b03      	cmp	r3, #3
 800160e:	d103      	bne.n	8001618 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001610:	484f      	ldr	r0, [pc, #316]	; (8001750 <bno055_writeData+0x18c>)
 8001612:	f004 fdd3 	bl	80061bc <puts>
 8001616:	e00b      	b.n	8001630 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d103      	bne.n	8001626 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800161e:	484d      	ldr	r0, [pc, #308]	; (8001754 <bno055_writeData+0x190>)
 8001620:	f004 fdcc 	bl	80061bc <puts>
 8001624:	e004      	b.n	8001630 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	4619      	mov	r1, r3
 800162a:	484b      	ldr	r0, [pc, #300]	; (8001758 <bno055_writeData+0x194>)
 800162c:	f004 fd60 	bl	80060f0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001630:	4b45      	ldr	r3, [pc, #276]	; (8001748 <bno055_writeData+0x184>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fce8 	bl	800400a <HAL_I2C_GetError>
 800163a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d07e      	beq.n	8001740 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d103      	bne.n	8001650 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001648:	4844      	ldr	r0, [pc, #272]	; (800175c <bno055_writeData+0x198>)
 800164a:	f004 fdb7 	bl	80061bc <puts>
 800164e:	e021      	b.n	8001694 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d103      	bne.n	800165e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001656:	4842      	ldr	r0, [pc, #264]	; (8001760 <bno055_writeData+0x19c>)
 8001658:	f004 fdb0 	bl	80061bc <puts>
 800165c:	e01a      	b.n	8001694 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d103      	bne.n	800166c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001664:	483f      	ldr	r0, [pc, #252]	; (8001764 <bno055_writeData+0x1a0>)
 8001666:	f004 fda9 	bl	80061bc <puts>
 800166a:	e013      	b.n	8001694 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b08      	cmp	r3, #8
 8001670:	d103      	bne.n	800167a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001672:	483d      	ldr	r0, [pc, #244]	; (8001768 <bno055_writeData+0x1a4>)
 8001674:	f004 fda2 	bl	80061bc <puts>
 8001678:	e00c      	b.n	8001694 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b10      	cmp	r3, #16
 800167e:	d103      	bne.n	8001688 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001680:	483a      	ldr	r0, [pc, #232]	; (800176c <bno055_writeData+0x1a8>)
 8001682:	f004 fd9b 	bl	80061bc <puts>
 8001686:	e005      	b.n	8001694 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b20      	cmp	r3, #32
 800168c:	d102      	bne.n	8001694 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800168e:	4838      	ldr	r0, [pc, #224]	; (8001770 <bno055_writeData+0x1ac>)
 8001690:	f004 fd94 	bl	80061bc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <bno055_writeData+0x184>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fca9 	bl	8003ff0 <HAL_I2C_GetState>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80016a8:	4832      	ldr	r0, [pc, #200]	; (8001774 <bno055_writeData+0x1b0>)
 80016aa:	f004 fd87 	bl	80061bc <puts>
 80016ae:	e048      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d103      	bne.n	80016be <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80016b6:	482f      	ldr	r0, [pc, #188]	; (8001774 <bno055_writeData+0x1b0>)
 80016b8:	f004 fd80 	bl	80061bc <puts>
 80016bc:	e041      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b24      	cmp	r3, #36	; 0x24
 80016c2:	d103      	bne.n	80016cc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80016c4:	482c      	ldr	r0, [pc, #176]	; (8001778 <bno055_writeData+0x1b4>)
 80016c6:	f004 fd79 	bl	80061bc <puts>
 80016ca:	e03a      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b21      	cmp	r3, #33	; 0x21
 80016d0:	d103      	bne.n	80016da <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80016d2:	482a      	ldr	r0, [pc, #168]	; (800177c <bno055_writeData+0x1b8>)
 80016d4:	f004 fd72 	bl	80061bc <puts>
 80016d8:	e033      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b22      	cmp	r3, #34	; 0x22
 80016de:	d103      	bne.n	80016e8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80016e0:	4827      	ldr	r0, [pc, #156]	; (8001780 <bno055_writeData+0x1bc>)
 80016e2:	f004 fd6b 	bl	80061bc <puts>
 80016e6:	e02c      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b28      	cmp	r3, #40	; 0x28
 80016ec:	d103      	bne.n	80016f6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80016ee:	4825      	ldr	r0, [pc, #148]	; (8001784 <bno055_writeData+0x1c0>)
 80016f0:	f004 fd64 	bl	80061bc <puts>
 80016f4:	e025      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b29      	cmp	r3, #41	; 0x29
 80016fa:	d103      	bne.n	8001704 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80016fc:	4822      	ldr	r0, [pc, #136]	; (8001788 <bno055_writeData+0x1c4>)
 80016fe:	f004 fd5d 	bl	80061bc <puts>
 8001702:	e01e      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b2a      	cmp	r3, #42	; 0x2a
 8001708:	d103      	bne.n	8001712 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800170a:	4820      	ldr	r0, [pc, #128]	; (800178c <bno055_writeData+0x1c8>)
 800170c:	f004 fd56 	bl	80061bc <puts>
 8001710:	e017      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b60      	cmp	r3, #96	; 0x60
 8001716:	d103      	bne.n	8001720 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001718:	481d      	ldr	r0, [pc, #116]	; (8001790 <bno055_writeData+0x1cc>)
 800171a:	f004 fd4f 	bl	80061bc <puts>
 800171e:	e010      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2ba0      	cmp	r3, #160	; 0xa0
 8001724:	d103      	bne.n	800172e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001726:	481b      	ldr	r0, [pc, #108]	; (8001794 <bno055_writeData+0x1d0>)
 8001728:	f004 fd48 	bl	80061bc <puts>
 800172c:	e009      	b.n	8001742 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2be0      	cmp	r3, #224	; 0xe0
 8001732:	d106      	bne.n	8001742 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <bno055_writeData+0x1d4>)
 8001736:	f004 fd41 	bl	80061bc <puts>
 800173a:	e002      	b.n	8001742 <bno055_writeData+0x17e>
    return;
 800173c:	bf00      	nop
 800173e:	e000      	b.n	8001742 <bno055_writeData+0x17e>
    return;
 8001740:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000110 	.word	0x20000110
 800174c:	08006ef4 	.word	0x08006ef4
 8001750:	08006f18 	.word	0x08006f18
 8001754:	08006f40 	.word	0x08006f40
 8001758:	08006f64 	.word	0x08006f64
 800175c:	08006f7c 	.word	0x08006f7c
 8001760:	08006f90 	.word	0x08006f90
 8001764:	08006fa4 	.word	0x08006fa4
 8001768:	08006fb8 	.word	0x08006fb8
 800176c:	08006fcc 	.word	0x08006fcc
 8001770:	08006fe0 	.word	0x08006fe0
 8001774:	08006ff8 	.word	0x08006ff8
 8001778:	08007010 	.word	0x08007010
 800177c:	08007024 	.word	0x08007024
 8001780:	0800703c 	.word	0x0800703c
 8001784:	08007054 	.word	0x08007054
 8001788:	0800706c 	.word	0x0800706c
 800178c:	0800708c 	.word	0x0800708c
 8001790:	080070ac 	.word	0x080070ac
 8001794:	080070c4 	.word	0x080070c4
 8001798:	080070dc 	.word	0x080070dc

0800179c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <bno055_readData+0x40>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	1dfa      	adds	r2, r7, #7
 80017b2:	2364      	movs	r3, #100	; 0x64
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	2150      	movs	r1, #80	; 0x50
 80017ba:	f002 f8af 	bl	800391c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <bno055_readData+0x40>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	2264      	movs	r2, #100	; 0x64
 80017c8:	9200      	str	r2, [sp, #0]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	2150      	movs	r1, #80	; 0x50
 80017ce:	f002 f9a3 	bl	8003b18 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000110 	.word	0x20000110

080017e0 <map>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* MAP */

	float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
		return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff f975 	bl	8000ae0 <__aeabi_fsub>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461c      	mov	r4, r3
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	6a38      	ldr	r0, [r7, #32]
 80017fe:	f7ff f96f 	bl	8000ae0 <__aeabi_fsub>
 8001802:	4603      	mov	r3, r0
 8001804:	4619      	mov	r1, r3
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff fa74 	bl	8000cf4 <__aeabi_fmul>
 800180c:	4603      	mov	r3, r0
 800180e:	461c      	mov	r4, r3
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff f964 	bl	8000ae0 <__aeabi_fsub>
 8001818:	4603      	mov	r3, r0
 800181a:	4619      	mov	r1, r3
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fb1d 	bl	8000e5c <__aeabi_fdiv>
 8001822:	4603      	mov	r3, r0
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f95c 	bl	8000ae4 <__addsf3>
 800182c:	4603      	mov	r3, r0
	}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
	...

08001838 <HAL_CAN_RxFifo1MsgPendingCallback>:


/* STM32 INTERUPP RECEIVER FROM USB CAN */

	void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001840:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8001842:	4a61      	ldr	r2, [pc, #388]	; (80019c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 8001844:	2101      	movs	r1, #1
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f001 f917 	bl	8002a7a <HAL_CAN_GetRxMessage>
		cntt++;
 800184c:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8001856:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8001858:	e007      	b.n	800186a <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800185a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185e:	485c      	ldr	r0, [pc, #368]	; (80019d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 8001860:	f001 fefe 	bl	8003660 <HAL_GPIO_TogglePin>
			cntt = 0;
 8001864:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d8f3      	bhi.n	800185a <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		}

	/* DATA RECIEVER FROM USB CAN */

		if (RxHeader.DLC == 8) {
 8001872:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b08      	cmp	r3, #8
 8001878:	f040 809f 	bne.w	80019ba <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
		RxData1 = (RxData[0] << 8) | RxData[1];
 800187c:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	4a50      	ldr	r2, [pc, #320]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8001884:	7852      	ldrb	r2, [r2, #1]
 8001886:	4313      	orrs	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f9df 	bl	8000c4c <__aeabi_i2f>
 800188e:	4603      	mov	r3, r0
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8001892:	6013      	str	r3, [r2, #0]
		RxData2 = (RxData[2] << 8) | RxData[3];
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800189c:	78d2      	ldrb	r2, [r2, #3]
 800189e:	4313      	orrs	r3, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f9d3 	bl	8000c4c <__aeabi_i2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a4b      	ldr	r2, [pc, #300]	; (80019d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 80018aa:	6013      	str	r3, [r2, #0]
		RxData3 = (RxData[4] << 8) | RxData[5];
 80018ac:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80018ae:	791b      	ldrb	r3, [r3, #4]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	4a44      	ldr	r2, [pc, #272]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80018b4:	7952      	ldrb	r2, [r2, #5]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f9c7 	bl	8000c4c <__aeabi_i2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a46      	ldr	r2, [pc, #280]	; (80019dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 80018c2:	6013      	str	r3, [r2, #0]
		RxData4 = (RxData[6] << 8) | RxData[7];
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80018c6:	799b      	ldrb	r3, [r3, #6]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	4a3e      	ldr	r2, [pc, #248]	; (80019c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 80018cc:	79d2      	ldrb	r2, [r2, #7]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f9bb 	bl	8000c4c <__aeabi_i2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a41      	ldr	r2, [pc, #260]	; (80019e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 80018da:	6013      	str	r3, [r2, #0]

	/* TRANFER TO SPEED */

		/* V RGB */

			V1 = RxData1;
 80018dc:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a40      	ldr	r2, [pc, #256]	; (80019e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 80018e2:	6013      	str	r3, [r2, #0]
			V2 = RxData2;
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 80018ea:	6013      	str	r3, [r2, #0]
			V3 = RxData3;
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 80018f2:	6013      	str	r3, [r2, #0]
			V4 = RxData4;
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 80018fa:	6013      	str	r3, [r2, #0]

		/* M MOTOR */

			M1 = RxData1;
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3c      	ldr	r2, [pc, #240]	; (80019f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1bc>)
 8001902:	6013      	str	r3, [r2, #0]
			M2 = RxData2;
 8001904:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800190a:	6013      	str	r3, [r2, #0]
			M3 = RxData3;
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8001912:	6013      	str	r3, [r2, #0]
			M4 = RxData4;
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a39      	ldr	r2, [pc, #228]	; (8001a00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800191a:	6013      	str	r3, [r2, #0]

			/* MAP TX DATA FROM 8BIT TO 16BIT (MOTOR ) */

				/* MAPPING MOTOR */

					M1_out = map(M1,0,65535,0,999);
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1bc>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	4a37      	ldr	r2, [pc, #220]	; (8001a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	f7ff ff57 	bl	80017e0 <map>
 8001932:	4603      	mov	r3, r0
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fb2d 	bl	8000f94 <__aeabi_f2uiz>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8001940:	801a      	strh	r2, [r3, #0]
					M2_out = map(M2,0,65535,0,999);
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	f7ff ff44 	bl	80017e0 <map>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fb1a 	bl	8000f94 <__aeabi_f2uiz>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8001966:	801a      	strh	r2, [r3, #0]

				/* MAPPING RGB ) */

					M3_out = map(M3,0,65535,0,65535);
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	f7ff ff31 	bl	80017e0 <map>
 800197e:	4603      	mov	r3, r0
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fb07 	bl	8000f94 <__aeabi_f2uiz>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800198c:	801a      	strh	r2, [r3, #0]
					M4_out = map(M4,0,65535,0,65535);
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	4a1b      	ldr	r2, [pc, #108]	; (8001a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	f7ff ff1e 	bl	80017e0 <map>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff faf4 	bl	8000f94 <__aeabi_f2uiz>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 80019b2:	801a      	strh	r2, [r3, #0]

					flag = 1;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]

	}
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000174 	.word	0x20000174
 80019c8:	20000158 	.word	0x20000158
 80019cc:	200001e1 	.word	0x200001e1
 80019d0:	40011000 	.word	0x40011000
 80019d4:	200001a0 	.word	0x200001a0
 80019d8:	200001a4 	.word	0x200001a4
 80019dc:	200001a8 	.word	0x200001a8
 80019e0:	200001ac 	.word	0x200001ac
 80019e4:	200001b0 	.word	0x200001b0
 80019e8:	200001b4 	.word	0x200001b4
 80019ec:	200001b8 	.word	0x200001b8
 80019f0:	200001bc 	.word	0x200001bc
 80019f4:	200001c0 	.word	0x200001c0
 80019f8:	200001c4 	.word	0x200001c4
 80019fc:	200001c8 	.word	0x200001c8
 8001a00:	200001cc 	.word	0x200001cc
 8001a04:	4479c000 	.word	0x4479c000
 8001a08:	477fff00 	.word	0x477fff00
 8001a0c:	200001d8 	.word	0x200001d8
 8001a10:	200001da 	.word	0x200001da
 8001a14:	200001dc 	.word	0x200001dc
 8001a18:	200001de 	.word	0x200001de
 8001a1c:	200001e0 	.word	0x200001e0

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a26:	f000 fccb 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2a:	f000 f8b9 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2e:	f7ff fd13 	bl	8001458 <MX_GPIO_Init>
  MX_CAN_Init();
 8001a32:	f7ff fc69 	bl	8001308 <MX_CAN_Init>
  MX_I2C1_Init();
 8001a36:	f7ff fd3d 	bl	80014b4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a3a:	f000 fb3d 	bl	80020b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a3e:	f000 fbd7 	bl	80021f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* IMU BNO 055 */

	  bno055_assignI2C(&hi2c1);
 8001a42:	484b      	ldr	r0, [pc, #300]	; (8001b70 <main+0x150>)
 8001a44:	f7ff fda4 	bl	8001590 <bno055_assignI2C>
	  bno055_setup();
 8001a48:	f7ff fb04 	bl	8001054 <bno055_setup>
	  bno055_setOperationModeNDOF();
 8001a4c:	f7ff faef 	bl	800102e <bno055_setOperationModeNDOF>

  	/* CAN */

		HAL_CAN_Start(&hcan);
 8001a50:	4848      	ldr	r0, [pc, #288]	; (8001b74 <main+0x154>)
 8001a52:	f000 feff 	bl	8002854 <HAL_CAN_Start>

	/* STRUCTUR TRANSMITTER DATA */

		HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001a56:	2110      	movs	r1, #16
 8001a58:	4846      	ldr	r0, [pc, #280]	; (8001b74 <main+0x154>)
 8001a5a:	f001 f92f 	bl	8002cbc <HAL_CAN_ActivateNotification>
		TxHeader.DLC = 8;
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <main+0x158>)
 8001a60:	2208      	movs	r2, #8
 8001a62:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 8001a64:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <main+0x158>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <main+0x158>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = 0x103; //0b11001010001
 8001a70:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <main+0x158>)
 8001a72:	f240 1203 	movw	r2, #259	; 0x103
 8001a76:	601a      	str	r2, [r3, #0]

	/* TIMER RGB */

		HAL_TIM_Base_Start_IT(&htim2);
 8001a78:	4840      	ldr	r0, [pc, #256]	; (8001b7c <main+0x15c>)
 8001a7a:	f003 faa5 	bl	8004fc8 <HAL_TIM_Base_Start_IT>


		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	483f      	ldr	r0, [pc, #252]	; (8001b80 <main+0x160>)
 8001a82:	f003 fb3d 	bl	8005100 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a86:	2104      	movs	r1, #4
 8001a88:	483d      	ldr	r0, [pc, #244]	; (8001b80 <main+0x160>)
 8001a8a:	f003 fb39 	bl	8005100 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a8e:	2108      	movs	r1, #8
 8001a90:	483b      	ldr	r0, [pc, #236]	; (8001b80 <main+0x160>)
 8001a92:	f003 fb35 	bl	8005100 <HAL_TIM_PWM_Start>


		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a96:	213c      	movs	r1, #60	; 0x3c
 8001a98:	4839      	ldr	r0, [pc, #228]	; (8001b80 <main+0x160>)
 8001a9a:	f003 fbcd 	bl	8005238 <HAL_TIM_Encoder_Start>

	/* TIMER 3 MOTOR */

		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4836      	ldr	r0, [pc, #216]	; (8001b7c <main+0x15c>)
 8001aa2:	f003 fb2d 	bl	8005100 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4834      	ldr	r0, [pc, #208]	; (8001b7c <main+0x15c>)
 8001aaa:	f003 fb29 	bl	8005100 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001aae:	2108      	movs	r1, #8
 8001ab0:	4832      	ldr	r0, [pc, #200]	; (8001b7c <main+0x15c>)
 8001ab2:	f003 fb25 	bl	8005100 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001ab6:	210c      	movs	r1, #12
 8001ab8:	4830      	ldr	r0, [pc, #192]	; (8001b7c <main+0x15c>)
 8001aba:	f003 fb21 	bl	8005100 <HAL_TIM_PWM_Start>


	/* MAP TX DATA FROM 8BIT TO 16BIT (RGB) */

		V1_out = map(V,0,255,0,65535);
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <main+0x164>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8be 	bl	8000c44 <__aeabi_ui2f>
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <main+0x168>)
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <main+0x16c>)
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	f7ff fe83 	bl	80017e0 <map>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fa59 	bl	8000f94 <__aeabi_f2uiz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <main+0x170>)
 8001ae8:	801a      	strh	r2, [r3, #0]
		V2_out = map(V,0,255,0,65535);
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <main+0x164>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f8a8 	bl	8000c44 <__aeabi_ui2f>
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <main+0x168>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <main+0x16c>)
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	f7ff fe6d 	bl	80017e0 <map>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa43 	bl	8000f94 <__aeabi_f2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <main+0x174>)
 8001b14:	801a      	strh	r2, [r3, #0]
		V3_out = map(V,0,255,0,65535);
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <main+0x164>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f892 	bl	8000c44 <__aeabi_ui2f>
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <main+0x168>)
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <main+0x16c>)
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	f7ff fe57 	bl	80017e0 <map>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fa2d 	bl	8000f94 <__aeabi_f2uiz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <main+0x178>)
 8001b40:	801a      	strh	r2, [r3, #0]
		V4_out = map(V,0,255,0,65535);
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <main+0x164>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f87c 	bl	8000c44 <__aeabi_ui2f>
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <main+0x168>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <main+0x16c>)
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	f7ff fe41 	bl	80017e0 <map>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fa17 	bl	8000f94 <__aeabi_f2uiz>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <main+0x17c>)
 8001b6c:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <main+0x14e>
 8001b70:	200000bc 	.word	0x200000bc
 8001b74:	20000094 	.word	0x20000094
 8001b78:	2000017c 	.word	0x2000017c
 8001b7c:	20000238 	.word	0x20000238
 8001b80:	200001f0 	.word	0x200001f0
 8001b84:	2000000a 	.word	0x2000000a
 8001b88:	477fff00 	.word	0x477fff00
 8001b8c:	437f0000 	.word	0x437f0000
 8001b90:	200001d0 	.word	0x200001d0
 8001b94:	200001d2 	.word	0x200001d2
 8001b98:	200001d4 	.word	0x200001d4
 8001b9c:	200001d6 	.word	0x200001d6

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	; 0x40
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	2228      	movs	r2, #40	; 0x28
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fbe4 	bl	800637c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001be0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fd9e 	bl	800472c <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001bf6:	f000 f945 	bl	8001e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2102      	movs	r1, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f80b 	bl	8004c30 <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001c20:	f000 f930 	bl	8001e84 <Error_Handler>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3740      	adds	r7, #64	; 0x40
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_TIM_PeriodElapsedCallback>:



/* MAKER TIMER INTERRUPP 1mS */

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	6278      	str	r0, [r7, #36]	; 0x24
		if (htim->Instance == TIM2) {
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3c:	f040 80f4 	bne.w	8001e28 <HAL_TIM_PeriodElapsedCallback+0x1fc>

			TIM3->CCR1 = M1_out; // PWM MOTOR
 8001c40:	4b7b      	ldr	r3, [pc, #492]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = M2_out; // PWM MOTOR
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	4b79      	ldr	r3, [pc, #484]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c4e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR2 = M3_out; // PWM BLINK LED
 8001c50:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = M4_out; // PWM BLINK LED
 8001c58:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c

		/* TX DATA SEND TO PC MAP 16BIT TO 8BIT COZ DATA CAN 1DATA=8BIT */

			/* EULER */

			 	 E	  = bno055_getVectorEuler();
 8001c60:	4c79      	ldr	r4, [pc, #484]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c62:	463b      	mov	r3, r7
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fb35 	bl	80012d4 <bno055_getVectorEuler>
 8001c6a:	4625      	mov	r5, r4
 8001c6c:	463c      	mov	r4, r7
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

			 /* QUATERNION */

			 	 Q    = bno055_getVectorQuaternion();
 8001c7a:	4c74      	ldr	r4, [pc, #464]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fb35 	bl	80012ee <bno055_getVectorQuaternion>
 8001c84:	4625      	mov	r5, r4
 8001c86:	463c      	mov	r4, r7
 8001c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

			 /* MAP HEADING (Y) QUATERNION */

				 if (E.y>0)
 8001c94:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	f7fe fe9f 	bl	80009e4 <__aeabi_dcmpgt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0x98>
				 {
					 y = E.y;
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001cae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fe9f 	bl	80009f8 <__aeabi_d2uiz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_TIM_PeriodElapsedCallback+0xd4>
				 }
				 else if (E.y<0)
 8001cc4:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001cc6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f7fe fe69 	bl	80009a8 <__aeabi_dcmplt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d011      	beq.n	8001d00 <HAL_TIM_PeriodElapsedCallback+0xd4>
				 {
					 y = 360-(-1*E.y);
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001cde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001ce8:	f7fe fa36 	bl	8000158 <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe fe80 	bl	80009f8 <__aeabi_d2uiz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001cfe:	801a      	strh	r2, [r3, #0]
				 }

			 /* EULER */

				heading = map (E.x, 0, 360, 0, 65535);
 8001d00:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe fe95 	bl	8000a38 <__aeabi_d2f>
 8001d0e:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	f7ff fd60 	bl	80017e0 <map>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f936 	bl	8000f94 <__aeabi_f2uiz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001d2e:	801a      	strh	r2, [r3, #0]
				pitch   = map (E.y, 0, 360, 0, 65535);
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe fe7d 	bl	8000a38 <__aeabi_d2f>
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	4a45      	ldr	r2, [pc, #276]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	f7ff fd48 	bl	80017e0 <map>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f91e 	bl	8000f94 <__aeabi_f2uiz>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d5e:	801a      	strh	r2, [r3, #0]
				roll    = map (E.z, 0, 360, 0, 65535);
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fe65 	bl	8000a38 <__aeabi_d2f>
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	f7ff fd30 	bl	80017e0 <map>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f906 	bl	8000f94 <__aeabi_f2uiz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d8e:	801a      	strh	r2, [r3, #0]

			/* QUATERNION */

				QuaX    = map (Q.x, 0, 360, 0, 65535);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe fe4d 	bl	8000a38 <__aeabi_d2f>
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f7ff fd18 	bl	80017e0 <map>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f8ee 	bl	8000f94 <__aeabi_f2uiz>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001dbe:	801a      	strh	r2, [r3, #0]

			/* TxData SEND IMU EULER QUATERNION */

				TxData[0] = ((heading  & 0xFF00) >> 8);
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001dcc:	701a      	strb	r2, [r3, #0]
				TxData[1] = (heading   & 0x00FF);
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001dd6:	705a      	strb	r2, [r3, #1]
				TxData[2] = ((pitch    & 0xFF00) >> 8);
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001de4:	709a      	strb	r2, [r3, #2]
				TxData[3] = (pitch     & 0x00FF);
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001dee:	70da      	strb	r2, [r3, #3]
				TxData[4] = ((roll     & 0xFF00) >> 8);
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001dfc:	711a      	strb	r2, [r3, #4]
				TxData[5] = (roll      & 0x00FF);
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001e06:	715a      	strb	r2, [r3, #5]
				TxData[6] = ((-20     & 0xFF00) >> 8);
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001e0a:	22ff      	movs	r2, #255	; 0xff
 8001e0c:	719a      	strb	r2, [r3, #6]
				TxData[7] = (-20      & 0x00FF);
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001e10:	22ec      	movs	r2, #236	; 0xec
 8001e12:	71da      	strb	r2, [r3, #7]


			if (flag ==1) {
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x1fc>
				HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e1e:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e22:	4817      	ldr	r0, [pc, #92]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001e24:	f000 fd5a 	bl	80028dc <HAL_CAN_AddTxMessage>

			}
		}

	}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e30:	200001d8 	.word	0x200001d8
 8001e34:	40000400 	.word	0x40000400
 8001e38:	200001da 	.word	0x200001da
 8001e3c:	200001dc 	.word	0x200001dc
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	200001de 	.word	0x200001de
 8001e48:	20000118 	.word	0x20000118
 8001e4c:	20000138 	.word	0x20000138
 8001e50:	200001e8 	.word	0x200001e8
 8001e54:	40768000 	.word	0x40768000
 8001e58:	477fff00 	.word	0x477fff00
 8001e5c:	43b40000 	.word	0x43b40000
 8001e60:	200001e2 	.word	0x200001e2
 8001e64:	200001e4 	.word	0x200001e4
 8001e68:	200001e6 	.word	0x200001e6
 8001e6c:	200001ea 	.word	0x200001ea
 8001e70:	20000194 	.word	0x20000194
 8001e74:	200001e0 	.word	0x200001e0
 8001e78:	2000019c 	.word	0x2000019c
 8001e7c:	2000017c 	.word	0x2000017c
 8001e80:	20000094 	.word	0x20000094

08001e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e88:	b672      	cpsid	i
}
 8001e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <Error_Handler+0x8>
	...

08001e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_MspInit+0x5c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_MspInit+0x5c>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_MspInit+0x5c>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x5c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x5c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x5c>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_MspInit+0x60>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_MspInit+0x60>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3a:	f000 fa87 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <CAN1_RX1_IRQHandler+0x10>)
 8001f4a:	f000 fedc 	bl	8002d06 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000094 	.word	0x20000094

08001f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM2_IRQHandler+0x10>)
 8001f5e:	f003 f9f9 	bl	8005354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000238 	.word	0x20000238

08001f6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7e:	f3af 8000 	nop.w
 8001f82:	4601      	mov	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
  }

  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf1      	blt.n	8001fb8 <_write+0x12>
  }
  return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_close>:

int _close(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002004:	605a      	str	r2, [r3, #4]
  return 0;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <_isatty>:

int _isatty(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
	...

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f004 f9d2 	bl	8006418 <__errno>
 8002074:	4603      	mov	r3, r0
 8002076:	220c      	movs	r2, #12
 8002078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20002800 	.word	0x20002800
 80020a0:	00000400 	.word	0x00000400
 80020a4:	200001ec 	.word	0x200001ec
 80020a8:	200003d0 	.word	0x200003d0

080020ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b092      	sub	sp, #72	; 0x48
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2220      	movs	r2, #32
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 f94a 	bl	800637c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <MX_TIM1_Init+0x130>)
 80020ea:	4a40      	ldr	r2, [pc, #256]	; (80021ec <MX_TIM1_Init+0x134>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <MX_TIM1_Init+0x130>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <MX_TIM1_Init+0x130>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <MX_TIM1_Init+0x130>)
 80020fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002100:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <MX_TIM1_Init+0x130>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002114:	4834      	ldr	r0, [pc, #208]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002116:	f002 ffa3 	bl	8005060 <HAL_TIM_PWM_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002120:	f7ff feb0 	bl	8001e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800212c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002130:	4619      	mov	r1, r3
 8002132:	482d      	ldr	r0, [pc, #180]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002134:	f003 fe5e 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800213e:	f7ff fea1 	bl	8001e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002142:	2360      	movs	r3, #96	; 0x60
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	4820      	ldr	r0, [pc, #128]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002168:	f003 f9fc 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002172:	f7ff fe87 	bl	8001e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	2204      	movs	r2, #4
 800217c:	4619      	mov	r1, r3
 800217e:	481a      	ldr	r0, [pc, #104]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002180:	f003 f9f0 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800218a:	f7ff fe7b 	bl	8001e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	2208      	movs	r2, #8
 8002194:	4619      	mov	r1, r3
 8002196:	4814      	ldr	r0, [pc, #80]	; (80021e8 <MX_TIM1_Init+0x130>)
 8002198:	f003 f9e4 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80021a2:	f7ff fe6f 	bl	8001e84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4807      	ldr	r0, [pc, #28]	; (80021e8 <MX_TIM1_Init+0x130>)
 80021ca:	f003 fe6b 	bl	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80021d4:	f7ff fe56 	bl	8001e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <MX_TIM1_Init+0x130>)
 80021da:	f000 f897 	bl	800230c <HAL_TIM_MspPostInit>

}
 80021de:	bf00      	nop
 80021e0:	3748      	adds	r7, #72	; 0x48
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001f0 	.word	0x200001f0
 80021ec:	40012c00 	.word	0x40012c00

080021f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_TIM2_Init+0x94>)
 800220e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_TIM2_Init+0x94>)
 8002216:	2247      	movs	r2, #71	; 0x47
 8002218:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_TIM2_Init+0x94>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_TIM2_Init+0x94>)
 8002222:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_TIM2_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_TIM2_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002234:	4813      	ldr	r0, [pc, #76]	; (8002284 <MX_TIM2_Init+0x94>)
 8002236:	f002 fe77 	bl	8004f28 <HAL_TIM_Base_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002240:	f7ff fe20 	bl	8001e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	4619      	mov	r1, r3
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <MX_TIM2_Init+0x94>)
 8002252:	f003 fa49 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800225c:	f7ff fe12 	bl	8001e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_TIM2_Init+0x94>)
 800226e:	f003 fdc1 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002278:	f7ff fe04 	bl	8001e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000238 	.word	0x20000238

08002288 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_TIM_PWM_MspInit+0x34>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10b      	bne.n	80022b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_TIM_PWM_MspInit+0x38>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_TIM_PWM_MspInit+0x38>)
 80022a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a4:	6193      	str	r3, [r2, #24]
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_TIM_PWM_MspInit+0x38>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d113      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_TIM_Base_MspInit+0x44>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_TIM_Base_MspInit+0x44>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	61d3      	str	r3, [r2, #28]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_TIM_Base_MspInit+0x44>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	201c      	movs	r0, #28
 80022f4:	f001 f801 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f8:	201c      	movs	r0, #28
 80022fa:	f001 f81a 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_TIM_MspPostInit+0x5c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d118      	bne.n	800235e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_TIM_MspPostInit+0x60>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_TIM_MspPostInit+0x60>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_TIM_MspPostInit+0x60>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_RGB1_Pin|TIM1_CH2_RGB2_Pin|TIM1_CH3_RGB3_Pin;
 8002344:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2302      	movs	r3, #2
 8002350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <HAL_TIM_MspPostInit+0x64>)
 800235a:	f001 f805 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40021000 	.word	0x40021000
 8002370:	40010800 	.word	0x40010800

08002374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002374:	f7ff fe9a 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800237a:	490c      	ldr	r1, [pc, #48]	; (80023ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002390:	4c09      	ldr	r4, [pc, #36]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f004 f841 	bl	8006424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a2:	f7ff fb3d 	bl	8001a20 <main>
  bx lr
 80023a6:	4770      	bx	lr
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023b0:	0800715c 	.word	0x0800715c
  ldr r2, =_sbss
 80023b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80023b8:	200003d0 	.word	0x200003d0

080023bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x28>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x28>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 ff87 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	200f      	movs	r0, #15
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fd58 	bl	8001e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 ff9f 	bl	800334e <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002428:	f000 ff67 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000014 	.word	0x20000014
 8002448:	20000010 	.word	0x20000010

0800244c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_IncTick+0x1c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_IncTick+0x20>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <HAL_IncTick+0x20>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000014 	.word	0x20000014
 800246c:	20000280 	.word	0x20000280

08002470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <HAL_GetTick+0x10>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000280 	.word	0x20000280

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff fff0 	bl	8002470 <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffe0 	bl	8002470 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000014 	.word	0x20000014

080024cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0ed      	b.n	80026ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe ff60 	bl	80013b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002500:	f7ff ffb6 	bl	8002470 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002506:	e012      	b.n	800252e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002508:	f7ff ffb2 	bl	8002470 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b0a      	cmp	r3, #10
 8002514:	d90b      	bls.n	800252e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2205      	movs	r2, #5
 8002526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0c5      	b.n	80026ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0e5      	beq.n	8002508 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0202 	bic.w	r2, r2, #2
 800254a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800254c:	f7ff ff90 	bl	8002470 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002552:	e012      	b.n	800257a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002554:	f7ff ff8c 	bl	8002470 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b0a      	cmp	r3, #10
 8002560:	d90b      	bls.n	800257a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2205      	movs	r2, #5
 8002572:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e09f      	b.n	80026ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e5      	bne.n	8002554 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7e1b      	ldrb	r3, [r3, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d108      	bne.n	80025a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e007      	b.n	80025b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7e5b      	ldrb	r3, [r3, #25]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e007      	b.n	80025dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7e9b      	ldrb	r3, [r3, #26]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d108      	bne.n	80025f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0220 	orr.w	r2, r2, #32
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e007      	b.n	8002606 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0220 	bic.w	r2, r2, #32
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7edb      	ldrb	r3, [r3, #27]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d108      	bne.n	8002620 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0210 	bic.w	r2, r2, #16
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e007      	b.n	8002630 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0210 	orr.w	r2, r2, #16
 800262e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7f1b      	ldrb	r3, [r3, #28]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d108      	bne.n	800264a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0208 	orr.w	r2, r2, #8
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e007      	b.n	800265a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7f5b      	ldrb	r3, [r3, #29]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d108      	bne.n	8002674 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0204 	orr.w	r2, r2, #4
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e007      	b.n	8002684 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0204 	bic.w	r2, r2, #4
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	ea42 0103 	orr.w	r1, r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b087      	sub	sp, #28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d003      	beq.n	80026e8 <HAL_CAN_ConfigFilter+0x26>
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	f040 80aa 	bne.w	800283c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2201      	movs	r2, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d123      	bne.n	800276a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002744:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3248      	adds	r2, #72	; 0x48
 800274a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800275e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	3348      	adds	r3, #72	; 0x48
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d122      	bne.n	80027b8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002792:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3248      	adds	r2, #72	; 0x48
 8002798:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ae:	6979      	ldr	r1, [r7, #20]
 80027b0:	3348      	adds	r3, #72	; 0x48
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027d2:	e007      	b.n	80027e4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	431a      	orrs	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027fe:	e007      	b.n	8002810 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	431a      	orrs	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e006      	b.n	800284a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d12e      	bne.n	80028c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002880:	f7ff fdf6 	bl	8002470 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002886:	e012      	b.n	80028ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002888:	f7ff fdf2 	bl	8002470 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d90b      	bls.n	80028ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2205      	movs	r2, #5
 80028a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e012      	b.n	80028d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e5      	bne.n	8002888 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e006      	b.n	80028d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d003      	beq.n	8002908 <HAL_CAN_AddTxMessage+0x2c>
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	2b02      	cmp	r3, #2
 8002904:	f040 80ad 	bne.w	8002a62 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8095 	beq.w	8002a52 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	0e1b      	lsrs	r3, r3, #24
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002932:	2201      	movs	r2, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	6809      	ldr	r1, [r1, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3318      	adds	r3, #24
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	440b      	add	r3, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e00f      	b.n	8002980 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800296a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002974:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3318      	adds	r3, #24
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	440b      	add	r3, r1
 800297e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3318      	adds	r3, #24
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	440b      	add	r3, r1
 8002990:	3304      	adds	r3, #4
 8002992:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	7d1b      	ldrb	r3, [r3, #20]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d111      	bne.n	80029c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3318      	adds	r3, #24
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	6811      	ldr	r1, [r2, #0]
 80029b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3318      	adds	r3, #24
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	440b      	add	r3, r1
 80029bc:	3304      	adds	r3, #4
 80029be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3307      	adds	r3, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	061a      	lsls	r2, r3, #24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3306      	adds	r3, #6
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3305      	adds	r3, #5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4313      	orrs	r3, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	3204      	adds	r2, #4
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	4610      	mov	r0, r2
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6811      	ldr	r1, [r2, #0]
 80029e8:	ea43 0200 	orr.w	r2, r3, r0
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3303      	adds	r3, #3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	061a      	lsls	r2, r3, #24
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3302      	adds	r3, #2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	7812      	ldrb	r2, [r2, #0]
 8002a18:	4610      	mov	r0, r2
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	ea43 0200 	orr.w	r2, r3, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3318      	adds	r3, #24
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	6811      	ldr	r1, [r2, #0]
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3318      	adds	r3, #24
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e00e      	b.n	8002a70 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e006      	b.n	8002a70 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3724      	adds	r7, #36	; 0x24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d003      	beq.n	8002a9e <HAL_CAN_GetRxMessage+0x24>
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f040 8103 	bne.w	8002ca4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0f7      	b.n	8002cb2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0e8      	b.n	8002cb2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	331b      	adds	r3, #27
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	4413      	add	r3, r2
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0204 	and.w	r2, r3, #4
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	331b      	adds	r3, #27
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	4413      	add	r3, r2
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0d5b      	lsrs	r3, r3, #21
 8002b0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	331b      	adds	r3, #27
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4413      	add	r3, r2
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	08db      	lsrs	r3, r3, #3
 8002b28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	331b      	adds	r3, #27
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0202 	and.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	331b      	adds	r3, #27
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	e00b      	b.n	8002b7e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	331b      	adds	r3, #27
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	331b      	adds	r3, #27
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4413      	add	r3, r2
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	331b      	adds	r3, #27
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0a1a      	lsrs	r2, r3, #8
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0c1a      	lsrs	r2, r3, #16
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e1a      	lsrs	r2, r3, #24
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3303      	adds	r3, #3
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3304      	adds	r3, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0a1a      	lsrs	r2, r3, #8
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3305      	adds	r3, #5
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0c1a      	lsrs	r2, r3, #16
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3306      	adds	r3, #6
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e1a      	lsrs	r2, r3, #24
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3307      	adds	r3, #7
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0220 	orr.w	r2, r2, #32
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e006      	b.n	8002cb2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ccc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d002      	beq.n	8002cda <HAL_CAN_ActivateNotification+0x1e>
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d109      	bne.n	8002cee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6959      	ldr	r1, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e006      	b.n	8002cfc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b08a      	sub	sp, #40	; 0x28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d07c      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d023      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f983 	bl	8003074 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d6e:	e016      	b.n	8002d9e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	e00c      	b.n	8002d9e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
 8002d96:	e002      	b.n	8002d9e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f986 	bl	80030aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d024      	beq.n	8002df2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f962 	bl	8003086 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dc2:	e016      	b.n	8002df2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	e00c      	b.n	8002df2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	e002      	b.n	8002df2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f965 	bl	80030bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d024      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f941 	bl	8003098 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e16:	e016      	b.n	8002e46 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e00c      	b.n	8002e46 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e002      	b.n	8002e46 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f944 	bl	80030ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2210      	movs	r2, #16
 8002e68:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2208      	movs	r2, #8
 8002e84:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f933 	bl	80030f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f91b 	bl	80030e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2210      	movs	r2, #16
 8002ecc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f90a 	bl	8003104 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe fc95 	bl	8001838 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8f3 	bl	8003116 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8eb 	bl	8003128 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d07b      	beq.n	8003054 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d072      	beq.n	800304c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d043      	beq.n	800304c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03e      	beq.n	800304c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d02b      	beq.n	8003030 <HAL_CAN_IRQHandler+0x32a>
 8002fd8:	2b60      	cmp	r3, #96	; 0x60
 8002fda:	d82e      	bhi.n	800303a <HAL_CAN_IRQHandler+0x334>
 8002fdc:	2b50      	cmp	r3, #80	; 0x50
 8002fde:	d022      	beq.n	8003026 <HAL_CAN_IRQHandler+0x320>
 8002fe0:	2b50      	cmp	r3, #80	; 0x50
 8002fe2:	d82a      	bhi.n	800303a <HAL_CAN_IRQHandler+0x334>
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d019      	beq.n	800301c <HAL_CAN_IRQHandler+0x316>
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d826      	bhi.n	800303a <HAL_CAN_IRQHandler+0x334>
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d010      	beq.n	8003012 <HAL_CAN_IRQHandler+0x30c>
 8002ff0:	2b30      	cmp	r3, #48	; 0x30
 8002ff2:	d822      	bhi.n	800303a <HAL_CAN_IRQHandler+0x334>
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d002      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x2f8>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d005      	beq.n	8003008 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ffc:	e01d      	b.n	800303a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003006:	e019      	b.n	800303c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003010:	e014      	b.n	800303c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800301a:	e00f      	b.n	800303c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003024:	e00a      	b.n	800303c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800302e:	e005      	b.n	800303c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003038:	e000      	b.n	800303c <HAL_CAN_IRQHandler+0x336>
            break;
 800303a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800304a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f867 	bl	800313a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800306c:	bf00      	nop
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0b      	blt.n	80031da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4906      	ldr	r1, [pc, #24]	; (80031e4 <__NVIC_EnableIRQ+0x34>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100

080031e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db0a      	blt.n	8003212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <__NVIC_SetPriority+0x4c>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	440b      	add	r3, r1
 800320c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003210:	e00a      	b.n	8003228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4908      	ldr	r1, [pc, #32]	; (8003238 <__NVIC_SetPriority+0x50>)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3b04      	subs	r3, #4
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	440b      	add	r3, r1
 8003226:	761a      	strb	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f1c3 0307 	rsb	r3, r3, #7
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf28      	it	cs
 800325a:	2304      	movcs	r3, #4
 800325c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3304      	adds	r3, #4
 8003262:	2b06      	cmp	r3, #6
 8003264:	d902      	bls.n	800326c <NVIC_EncodePriority+0x30>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3b03      	subs	r3, #3
 800326a:	e000      	b.n	800326e <NVIC_EncodePriority+0x32>
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	401a      	ands	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	43d9      	mvns	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	4313      	orrs	r3, r2
         );
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c4:	f7ff ff90 	bl	80031e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff2d 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff42 	bl	8003194 <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff90 	bl	800323c <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5f 	bl	80031e8 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff35 	bl	80031b0 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b08b      	sub	sp, #44	; 0x2c
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337a:	e161      	b.n	8003640 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800337c:	2201      	movs	r2, #1
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	429a      	cmp	r2, r3
 8003396:	f040 8150 	bne.w	800363a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a97      	ldr	r2, [pc, #604]	; (80035fc <HAL_GPIO_Init+0x294>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d05e      	beq.n	8003462 <HAL_GPIO_Init+0xfa>
 80033a4:	4a95      	ldr	r2, [pc, #596]	; (80035fc <HAL_GPIO_Init+0x294>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d875      	bhi.n	8003496 <HAL_GPIO_Init+0x12e>
 80033aa:	4a95      	ldr	r2, [pc, #596]	; (8003600 <HAL_GPIO_Init+0x298>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d058      	beq.n	8003462 <HAL_GPIO_Init+0xfa>
 80033b0:	4a93      	ldr	r2, [pc, #588]	; (8003600 <HAL_GPIO_Init+0x298>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d86f      	bhi.n	8003496 <HAL_GPIO_Init+0x12e>
 80033b6:	4a93      	ldr	r2, [pc, #588]	; (8003604 <HAL_GPIO_Init+0x29c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d052      	beq.n	8003462 <HAL_GPIO_Init+0xfa>
 80033bc:	4a91      	ldr	r2, [pc, #580]	; (8003604 <HAL_GPIO_Init+0x29c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d869      	bhi.n	8003496 <HAL_GPIO_Init+0x12e>
 80033c2:	4a91      	ldr	r2, [pc, #580]	; (8003608 <HAL_GPIO_Init+0x2a0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d04c      	beq.n	8003462 <HAL_GPIO_Init+0xfa>
 80033c8:	4a8f      	ldr	r2, [pc, #572]	; (8003608 <HAL_GPIO_Init+0x2a0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d863      	bhi.n	8003496 <HAL_GPIO_Init+0x12e>
 80033ce:	4a8f      	ldr	r2, [pc, #572]	; (800360c <HAL_GPIO_Init+0x2a4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d046      	beq.n	8003462 <HAL_GPIO_Init+0xfa>
 80033d4:	4a8d      	ldr	r2, [pc, #564]	; (800360c <HAL_GPIO_Init+0x2a4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d85d      	bhi.n	8003496 <HAL_GPIO_Init+0x12e>
 80033da:	2b12      	cmp	r3, #18
 80033dc:	d82a      	bhi.n	8003434 <HAL_GPIO_Init+0xcc>
 80033de:	2b12      	cmp	r3, #18
 80033e0:	d859      	bhi.n	8003496 <HAL_GPIO_Init+0x12e>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_GPIO_Init+0x80>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	08003463 	.word	0x08003463
 80033ec:	0800343d 	.word	0x0800343d
 80033f0:	0800344f 	.word	0x0800344f
 80033f4:	08003491 	.word	0x08003491
 80033f8:	08003497 	.word	0x08003497
 80033fc:	08003497 	.word	0x08003497
 8003400:	08003497 	.word	0x08003497
 8003404:	08003497 	.word	0x08003497
 8003408:	08003497 	.word	0x08003497
 800340c:	08003497 	.word	0x08003497
 8003410:	08003497 	.word	0x08003497
 8003414:	08003497 	.word	0x08003497
 8003418:	08003497 	.word	0x08003497
 800341c:	08003497 	.word	0x08003497
 8003420:	08003497 	.word	0x08003497
 8003424:	08003497 	.word	0x08003497
 8003428:	08003497 	.word	0x08003497
 800342c:	08003445 	.word	0x08003445
 8003430:	08003459 	.word	0x08003459
 8003434:	4a76      	ldr	r2, [pc, #472]	; (8003610 <HAL_GPIO_Init+0x2a8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800343a:	e02c      	b.n	8003496 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	623b      	str	r3, [r7, #32]
          break;
 8003442:	e029      	b.n	8003498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	3304      	adds	r3, #4
 800344a:	623b      	str	r3, [r7, #32]
          break;
 800344c:	e024      	b.n	8003498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	3308      	adds	r3, #8
 8003454:	623b      	str	r3, [r7, #32]
          break;
 8003456:	e01f      	b.n	8003498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	330c      	adds	r3, #12
 800345e:	623b      	str	r3, [r7, #32]
          break;
 8003460:	e01a      	b.n	8003498 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800346a:	2304      	movs	r3, #4
 800346c:	623b      	str	r3, [r7, #32]
          break;
 800346e:	e013      	b.n	8003498 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003478:	2308      	movs	r3, #8
 800347a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	611a      	str	r2, [r3, #16]
          break;
 8003482:	e009      	b.n	8003498 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003484:	2308      	movs	r3, #8
 8003486:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	615a      	str	r2, [r3, #20]
          break;
 800348e:	e003      	b.n	8003498 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
          break;
 8003494:	e000      	b.n	8003498 <HAL_GPIO_Init+0x130>
          break;
 8003496:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2bff      	cmp	r3, #255	; 0xff
 800349c:	d801      	bhi.n	80034a2 <HAL_GPIO_Init+0x13a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	e001      	b.n	80034a6 <HAL_GPIO_Init+0x13e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2bff      	cmp	r3, #255	; 0xff
 80034ac:	d802      	bhi.n	80034b4 <HAL_GPIO_Init+0x14c>
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_Init+0x152>
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	3b08      	subs	r3, #8
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	210f      	movs	r1, #15
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	6a39      	ldr	r1, [r7, #32]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	431a      	orrs	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80a9 	beq.w	800363a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034e8:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_GPIO_Init+0x2ac>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_GPIO_Init+0x2ac>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6193      	str	r3, [r2, #24]
 80034f4:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_GPIO_Init+0x2ac>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003500:	4a45      	ldr	r2, [pc, #276]	; (8003618 <HAL_GPIO_Init+0x2b0>)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3d      	ldr	r2, [pc, #244]	; (800361c <HAL_GPIO_Init+0x2b4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00d      	beq.n	8003548 <HAL_GPIO_Init+0x1e0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <HAL_GPIO_Init+0x2b8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <HAL_GPIO_Init+0x1dc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <HAL_GPIO_Init+0x2bc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_GPIO_Init+0x1d8>
 800353c:	2302      	movs	r3, #2
 800353e:	e004      	b.n	800354a <HAL_GPIO_Init+0x1e2>
 8003540:	2303      	movs	r3, #3
 8003542:	e002      	b.n	800354a <HAL_GPIO_Init+0x1e2>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_GPIO_Init+0x1e2>
 8003548:	2300      	movs	r3, #0
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	f002 0203 	and.w	r2, r2, #3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	4093      	lsls	r3, r2
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800355a:	492f      	ldr	r1, [pc, #188]	; (8003618 <HAL_GPIO_Init+0x2b0>)
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003574:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	492b      	ldr	r1, [pc, #172]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	43db      	mvns	r3, r3
 800358a:	4927      	ldr	r1, [pc, #156]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 800358c:	4013      	ands	r3, r2
 800358e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800359c:	4b22      	ldr	r3, [pc, #136]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	4921      	ldr	r1, [pc, #132]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	491d      	ldr	r1, [pc, #116]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	4917      	ldr	r1, [pc, #92]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	e006      	b.n	80035e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	43db      	mvns	r3, r3
 80035da:	4913      	ldr	r1, [pc, #76]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035dc:	4013      	ands	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01f      	beq.n	800362c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	490d      	ldr	r1, [pc, #52]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e01f      	b.n	800363a <HAL_GPIO_Init+0x2d2>
 80035fa:	bf00      	nop
 80035fc:	10320000 	.word	0x10320000
 8003600:	10310000 	.word	0x10310000
 8003604:	10220000 	.word	0x10220000
 8003608:	10210000 	.word	0x10210000
 800360c:	10120000 	.word	0x10120000
 8003610:	10110000 	.word	0x10110000
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000
 800361c:	40010800 	.word	0x40010800
 8003620:	40010c00 	.word	0x40010c00
 8003624:	40011000 	.word	0x40011000
 8003628:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_GPIO_Init+0x2f4>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	43db      	mvns	r3, r3
 8003634:	4909      	ldr	r1, [pc, #36]	; (800365c <HAL_GPIO_Init+0x2f4>)
 8003636:	4013      	ands	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	3301      	adds	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	f47f ae96 	bne.w	800337c <HAL_GPIO_Init+0x14>
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	372c      	adds	r7, #44	; 0x2c
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40010400 	.word	0x40010400

08003660 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4013      	ands	r3, r2
 8003678:	041a      	lsls	r2, r3, #16
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43d9      	mvns	r1, r3
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	400b      	ands	r3, r1
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e12b      	b.n	80038fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd ff28 	bl	8001510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f8:	f001 fbe4 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80036fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a81      	ldr	r2, [pc, #516]	; (8003908 <HAL_I2C_Init+0x274>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d807      	bhi.n	8003718 <HAL_I2C_Init+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a80      	ldr	r2, [pc, #512]	; (800390c <HAL_I2C_Init+0x278>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e006      	b.n	8003726 <HAL_I2C_Init+0x92>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a7d      	ldr	r2, [pc, #500]	; (8003910 <HAL_I2C_Init+0x27c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	bf94      	ite	ls
 8003720:	2301      	movls	r3, #1
 8003722:	2300      	movhi	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0e7      	b.n	80038fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a78      	ldr	r2, [pc, #480]	; (8003914 <HAL_I2C_Init+0x280>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9b      	lsrs	r3, r3, #18
 8003738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <HAL_I2C_Init+0x274>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <HAL_I2C_Init+0xd4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3301      	adds	r3, #1
 8003766:	e009      	b.n	800377c <HAL_I2C_Init+0xe8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	4a69      	ldr	r2, [pc, #420]	; (8003918 <HAL_I2C_Init+0x284>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800378e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	495c      	ldr	r1, [pc, #368]	; (8003908 <HAL_I2C_Init+0x274>)
 8003798:	428b      	cmp	r3, r1
 800379a:	d819      	bhi.n	80037d0 <HAL_I2C_Init+0x13c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e59      	subs	r1, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037b0:	400b      	ands	r3, r1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_I2C_Init+0x138>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e59      	subs	r1, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	e051      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e04f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <HAL_I2C_Init+0x168>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e012      	b.n	8003822 <HAL_I2C_Init+0x18e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x196>
 8003826:	2301      	movs	r3, #1
 8003828:	e022      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <HAL_I2C_Init+0x1bc>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e58      	subs	r0, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	440b      	add	r3, r1
 8003840:	fbb0 f3f3 	udiv	r3, r0, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	e00f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	6809      	ldr	r1, [r1, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800389e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6911      	ldr	r1, [r2, #16]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	000186a0 	.word	0x000186a0
 800390c:	001e847f 	.word	0x001e847f
 8003910:	003d08ff 	.word	0x003d08ff
 8003914:	431bde83 	.word	0x431bde83
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
 800392c:	4613      	mov	r3, r2
 800392e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7fe fd9e 	bl	8002470 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	f040 80e0 	bne.w	8003b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	4970      	ldr	r1, [pc, #448]	; (8003b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fcb6 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e0d3      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Master_Transmit+0x50>
 8003968:	2302      	movs	r3, #2
 800396a:	e0cc      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2210      	movs	r2, #16
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	893a      	ldrh	r2, [r7, #8]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fb20 	bl	8004020 <I2C_MasterRequestWrite>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e08d      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a00:	e066      	b.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fd74 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6a39      	ldr	r1, [r7, #32]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fd6b 	bl	8004584 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e01a      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d194      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	00100002 	.word	0x00100002
 8003b14:	ffff0000 	.word	0xffff0000

08003b18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	461a      	mov	r2, r3
 8003b24:	460b      	mov	r3, r1
 8003b26:	817b      	strh	r3, [r7, #10]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7fe fc9e 	bl	8002470 <HAL_GetTick>
 8003b34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	f040 824b 	bne.w	8003fda <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2319      	movs	r3, #25
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	497f      	ldr	r1, [pc, #508]	; (8003d4c <HAL_I2C_Master_Receive+0x234>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fbb6 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e23e      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_I2C_Master_Receive+0x54>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e237      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d007      	beq.n	8003b92 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2222      	movs	r2, #34	; 0x22
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2210      	movs	r2, #16
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	893a      	ldrh	r2, [r7, #8]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a5f      	ldr	r2, [pc, #380]	; (8003d50 <HAL_I2C_Master_Receive+0x238>)
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bd4:	8979      	ldrh	r1, [r7, #10]
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 faa2 	bl	8004124 <I2C_MasterRequestRead>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1f8      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e1cc      	b.n	8003fb4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d11e      	bne.n	8003c60 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c32:	b672      	cpsid	i
}
 8003c34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c5c:	b662      	cpsie	i
}
 8003c5e:	e035      	b.n	8003ccc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d11e      	bne.n	8003ca6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c78:	b672      	cpsid	i
}
 8003c7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca2:	b662      	cpsie	i
}
 8003ca4:	e012      	b.n	8003ccc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ccc:	e172      	b.n	8003fb4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	f200 811f 	bhi.w	8003f16 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d123      	bne.n	8003d28 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fc95 	bl	8004614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e173      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d26:	e145      	b.n	8003fb4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d152      	bne.n	8003dd6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	2200      	movs	r2, #0
 8003d38:	4906      	ldr	r1, [pc, #24]	; (8003d54 <HAL_I2C_Master_Receive+0x23c>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fac0 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e148      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
 8003d4a:	bf00      	nop
 8003d4c:	00100002 	.word	0x00100002
 8003d50:	ffff0000 	.word	0xffff0000
 8003d54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d58:	b672      	cpsid	i
}
 8003d5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d9e:	b662      	cpsie	i
}
 8003da0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd4:	e0ee      	b.n	8003fb4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4981      	ldr	r1, [pc, #516]	; (8003fe4 <HAL_I2C_Master_Receive+0x4cc>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa6d 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0f5      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e00:	b672      	cpsid	i
}
 8003e02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e36:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_I2C_Master_Receive+0x4d0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	08db      	lsrs	r3, r3, #3
 8003e3c:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_I2C_Master_Receive+0x4d4>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0a1a      	lsrs	r2, r3, #8
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00da      	lsls	r2, r3, #3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d118      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e7e:	b662      	cpsie	i
}
 8003e80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0a6      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d1d9      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ede:	b662      	cpsie	i
}
 8003ee0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f14:	e04e      	b.n	8003fb4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fb7a 	bl	8004614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e058      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d124      	bne.n	8003fb4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d107      	bne.n	8003f82 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f80:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f ae88 	bne.w	8003cce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3728      	adds	r7, #40	; 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	00010004 	.word	0x00010004
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	14f8b589 	.word	0x14f8b589

08003ff0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffe:	b2db      	uxtb	r3, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	460b      	mov	r3, r1
 800402e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d006      	beq.n	800404a <I2C_MasterRequestWrite+0x2a>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d003      	beq.n	800404a <I2C_MasterRequestWrite+0x2a>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004048:	d108      	bne.n	800405c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e00b      	b.n	8004074 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	2b12      	cmp	r3, #18
 8004062:	d107      	bne.n	8004074 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f91d 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d103      	bne.n	80040a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e035      	b.n	8004114 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b0:	d108      	bne.n	80040c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040c0:	611a      	str	r2, [r3, #16]
 80040c2:	e01b      	b.n	80040fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040c4:	897b      	ldrh	r3, [r7, #10]
 80040c6:	11db      	asrs	r3, r3, #7
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 0306 	and.w	r3, r3, #6
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f063 030f 	orn	r3, r3, #15
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <I2C_MasterRequestWrite+0xfc>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f966 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e010      	b.n	8004114 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040f2:	897b      	ldrh	r3, [r7, #10]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4907      	ldr	r1, [pc, #28]	; (8004120 <I2C_MasterRequestWrite+0x100>)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f956 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	00010008 	.word	0x00010008
 8004120:	00010002 	.word	0x00010002

08004124 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	460b      	mov	r3, r1
 8004132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004148:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d006      	beq.n	800415e <I2C_MasterRequestRead+0x3a>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d003      	beq.n	800415e <I2C_MasterRequestRead+0x3a>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e00b      	b.n	8004188 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	2b11      	cmp	r3, #17
 8004176:	d107      	bne.n	8004188 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f893 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d103      	bne.n	80041b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e079      	b.n	80042b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c4:	d108      	bne.n	80041d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	e05f      	b.n	8004298 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	11db      	asrs	r3, r3, #7
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0306 	and.w	r3, r3, #6
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f063 030f 	orn	r3, r3, #15
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4930      	ldr	r1, [pc, #192]	; (80042b8 <I2C_MasterRequestRead+0x194>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f8dc 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e054      	b.n	80042b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4929      	ldr	r1, [pc, #164]	; (80042bc <I2C_MasterRequestRead+0x198>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8cc 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e044      	b.n	80042b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f831 	bl	80042c0 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004272:	d103      	bne.n	800427c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e017      	b.n	80042b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004280:	897b      	ldrh	r3, [r7, #10]
 8004282:	11db      	asrs	r3, r3, #7
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f063 030e 	orn	r3, r3, #14
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <I2C_MasterRequestRead+0x198>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f888 	bl	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	00010008 	.word	0x00010008
 80042bc:	00010002 	.word	0x00010002

080042c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d0:	e048      	b.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d044      	beq.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	f7fe f8c9 	bl	8002470 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d139      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10d      	bne.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	43da      	mvns	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	e00c      	b.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	429a      	cmp	r2, r3
 8004334:	d116      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e023      	b.n	80043ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d10d      	bne.n	800438a <I2C_WaitOnFlagUntilTimeout+0xca>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	43da      	mvns	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	e00c      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	43da      	mvns	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4013      	ands	r3, r2
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d093      	beq.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c2:	e071      	b.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d123      	bne.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e067      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004422:	d041      	beq.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004424:	f7fe f824 	bl	8002470 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d136      	bne.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10c      	bne.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	bf14      	ite	ne
 8004456:	2301      	movne	r3, #1
 8004458:	2300      	moveq	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	e00b      	b.n	8004476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	43da      	mvns	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e021      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e00b      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f af6d 	bne.w	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004500:	e034      	b.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8e3 	bl	80046ce <I2C_IsAcknowledgeFailed>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e034      	b.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004518:	d028      	beq.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fd ffa9 	bl	8002470 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11d      	bne.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d016      	beq.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d1c3      	bne.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004590:	e034      	b.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f89b 	bl	80046ce <I2C_IsAcknowledgeFailed>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e034      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a8:	d028      	beq.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd ff61 	bl	8002470 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11d      	bne.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d016      	beq.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d1c3      	bne.n	8004592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004620:	e049      	b.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d119      	bne.n	8004664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0210 	mvn.w	r2, #16
 8004638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e030      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004664:	f7fd ff04 	bl	8002470 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d302      	bcc.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11d      	bne.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d016      	beq.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d1ae      	bne.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d11b      	bne.n	800471e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0204 	orr.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
	...

0800472c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e272      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8087 	beq.w	800485a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800474c:	4b92      	ldr	r3, [pc, #584]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b04      	cmp	r3, #4
 8004756:	d00c      	beq.n	8004772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004758:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d112      	bne.n	800478a <HAL_RCC_OscConfig+0x5e>
 8004764:	4b8c      	ldr	r3, [pc, #560]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004770:	d10b      	bne.n	800478a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004772:	4b89      	ldr	r3, [pc, #548]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d06c      	beq.n	8004858 <HAL_RCC_OscConfig+0x12c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d168      	bne.n	8004858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e24c      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x76>
 8004794:	4b80      	ldr	r3, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7f      	ldr	r2, [pc, #508]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800479a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e02e      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x98>
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7a      	ldr	r2, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b78      	ldr	r3, [pc, #480]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a77      	ldr	r2, [pc, #476]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0xbc>
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a71      	ldr	r2, [pc, #452]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047e8:	4b6b      	ldr	r3, [pc, #428]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b68      	ldr	r3, [pc, #416]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a67      	ldr	r2, [pc, #412]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd fe32 	bl	8002470 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd fe2e 	bl	8002470 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e200      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xe4>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fd fe1e 	bl	8002470 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fd fe1a 	bl	8002470 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e1ec      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x10c>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d063      	beq.n	800492e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004866:	4b4c      	ldr	r3, [pc, #304]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x18c>
 800487e:	4b46      	ldr	r3, [pc, #280]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d116      	bne.n	80048b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x176>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1c0      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4939      	ldr	r1, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	e03a      	b.n	800492e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCC_OscConfig+0x270>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fd fdd3 	bl	8002470 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ce:	f7fd fdcf 	bl	8002470 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1a1      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4927      	ldr	r1, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <HAL_RCC_OscConfig+0x270>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fd fdb2 	bl	8002470 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004910:	f7fd fdae 	bl	8002470 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e180      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d03a      	beq.n	80049b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d019      	beq.n	8004976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fd fd92 	bl	8002470 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004950:	f7fd fd8e 	bl	8002470 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e160      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800496e:	2001      	movs	r0, #1
 8004970:	f000 fabc 	bl	8004eec <RCC_Delay>
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fd fd78 	bl	8002470 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004982:	e00f      	b.n	80049a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004984:	f7fd fd74 	bl	8002470 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d908      	bls.n	80049a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e146      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	42420000 	.word	0x42420000
 80049a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	4b92      	ldr	r3, [pc, #584]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e9      	bne.n	8004984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80a6 	beq.w	8004b0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b8b      	ldr	r3, [pc, #556]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4a87      	ldr	r2, [pc, #540]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	61d3      	str	r3, [r2, #28]
 80049da:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b82      	ldr	r3, [pc, #520]	; (8004bf4 <HAL_RCC_OscConfig+0x4c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b7f      	ldr	r3, [pc, #508]	; (8004bf4 <HAL_RCC_OscConfig+0x4c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7e      	ldr	r2, [pc, #504]	; (8004bf4 <HAL_RCC_OscConfig+0x4c8>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fd fd35 	bl	8002470 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fd fd31 	bl	8002470 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e103      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	4b75      	ldr	r3, [pc, #468]	; (8004bf4 <HAL_RCC_OscConfig+0x4c8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x312>
 8004a30:	4b6f      	ldr	r3, [pc, #444]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4a6e      	ldr	r2, [pc, #440]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	e02d      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x334>
 8004a46:	4b6a      	ldr	r3, [pc, #424]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4a69      	ldr	r2, [pc, #420]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6213      	str	r3, [r2, #32]
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a66      	ldr	r2, [pc, #408]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6213      	str	r3, [r2, #32]
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x356>
 8004a68:	4b61      	ldr	r3, [pc, #388]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a60      	ldr	r2, [pc, #384]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	4b5e      	ldr	r3, [pc, #376]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4a5d      	ldr	r2, [pc, #372]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6213      	str	r3, [r2, #32]
 8004a80:	e00b      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a82:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a5a      	ldr	r2, [pc, #360]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6213      	str	r3, [r2, #32]
 8004a8e:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a57      	ldr	r2, [pc, #348]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fd fce5 	bl	8002470 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fd fce1 	bl	8002470 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0b1      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCC_OscConfig+0x37e>
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fd fccf 	bl	8002470 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fd fccb 	bl	8002470 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e09b      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8087 	beq.w	8004c22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b14:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d061      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d146      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b33      	ldr	r3, [pc, #204]	; (8004bf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fd fc9f 	bl	8002470 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fd fc9b 	bl	8002470 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e06d      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4921      	ldr	r1, [pc, #132]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b70:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a19      	ldr	r1, [r3, #32]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	430b      	orrs	r3, r1
 8004b82:	491b      	ldr	r1, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fc6f 	bl	8002470 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fd fc6b 	bl	8002470 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e03d      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x46a>
 8004bb4:	e035      	b.n	8004c22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_RCC_OscConfig+0x4cc>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fc58 	bl	8002470 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fd fc54 	bl	8002470 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e026      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x498>
 8004be2:	e01e      	b.n	8004c22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e019      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_OscConfig+0x500>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000

08004c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0d0      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d910      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 0207 	bic.w	r2, r3, #7
 8004c5a:	4965      	ldr	r1, [pc, #404]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0b8      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c8c:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca4:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a52      	ldr	r2, [pc, #328]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b50      	ldr	r3, [pc, #320]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	494d      	ldr	r1, [pc, #308]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d040      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d115      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e07f      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e073      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e06b      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4936      	ldr	r1, [pc, #216]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fd fba6 	bl	8002470 <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fd fba2 	bl	8002470 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e053      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d210      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	4922      	ldr	r1, [pc, #136]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e032      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4916      	ldr	r1, [pc, #88]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	490e      	ldr	r1, [pc, #56]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dbe:	f000 f821 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	490a      	ldr	r1, [pc, #40]	; (8004df8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	5ccb      	ldrb	r3, [r1, r3]
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x1cc>)
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_ClockConfig+0x1d0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fb04 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40022000 	.word	0x40022000
 8004df4:	40021000 	.word	0x40021000
 8004df8:	080070f4 	.word	0x080070f4
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	20000010 	.word	0x20000010

08004e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	2300      	movs	r3, #0
 8004e18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d002      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x30>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d003      	beq.n	8004e3a <HAL_RCC_GetSysClockFreq+0x36>
 8004e32:	e027      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e36:	613b      	str	r3, [r7, #16]
      break;
 8004e38:	e027      	b.n	8004e8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	0c9b      	lsrs	r3, r3, #18
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e44:	5cd3      	ldrb	r3, [r2, r3]
 8004e46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	0c5b      	lsrs	r3, r3, #17
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	4a11      	ldr	r2, [pc, #68]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e66:	fb03 f202 	mul.w	r2, r3, r2
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e004      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	613b      	str	r3, [r7, #16]
      break;
 8004e82:	e002      	b.n	8004e8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e86:	613b      	str	r3, [r7, #16]
      break;
 8004e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e8a:	693b      	ldr	r3, [r7, #16]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	0800710c 	.word	0x0800710c
 8004ea4:	0800711c 	.word	0x0800711c
 8004ea8:	003d0900 	.word	0x003d0900
 8004eac:	007a1200 	.word	0x007a1200

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	2000000c 	.word	0x2000000c

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff2 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	08007104 	.word	0x08007104

08004eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <RCC_Delay+0x34>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <RCC_Delay+0x38>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0a5b      	lsrs	r3, r3, #9
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f08:	bf00      	nop
  }
  while (Delay --);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	60fa      	str	r2, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f9      	bne.n	8004f08 <RCC_Delay+0x1c>
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	2000000c 	.word	0x2000000c
 8004f24:	10624dd3 	.word	0x10624dd3

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e041      	b.n	8004fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd f9b8 	bl	80022c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fcaa 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e035      	b.n	800504c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_TIM_Base_Start_IT+0x90>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIM_Base_Start_IT+0x4e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d004      	beq.n	8005016 <HAL_TIM_Base_Start_IT+0x4e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_TIM_Base_Start_IT+0x94>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d111      	bne.n	800503a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b06      	cmp	r3, #6
 8005026:	d010      	beq.n	800504a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	e007      	b.n	800504a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400

08005060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e041      	b.n	80050f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fd f8fe 	bl	8002288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f000 fc0e 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_TIM_PWM_Start+0x24>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e022      	b.n	800516a <HAL_TIM_PWM_Start+0x6a>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d109      	bne.n	800513e <HAL_TIM_PWM_Start+0x3e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e015      	b.n	800516a <HAL_TIM_PWM_Start+0x6a>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d109      	bne.n	8005158 <HAL_TIM_PWM_Start+0x58>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e008      	b.n	800516a <HAL_TIM_PWM_Start+0x6a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e059      	b.n	8005226 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_TIM_PWM_Start+0x82>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005180:	e013      	b.n	80051aa <HAL_TIM_PWM_Start+0xaa>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0x92>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005190:	e00b      	b.n	80051aa <HAL_TIM_PWM_Start+0xaa>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a0:	e003      	b.n	80051aa <HAL_TIM_PWM_Start+0xaa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fdfa 	bl	8005dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <HAL_TIM_PWM_Start+0x130>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d107      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <HAL_TIM_PWM_Start+0x130>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_TIM_PWM_Start+0xf0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_PWM_Start+0xf0>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <HAL_TIM_PWM_Start+0x134>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d111      	bne.n	8005214 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d010      	beq.n	8005224 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e007      	b.n	8005224 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400

08005238 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005248:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005250:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005258:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005260:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800526e:	7b7b      	ldrb	r3, [r7, #13]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e069      	b.n	800534c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005288:	e031      	b.n	80052ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d110      	bne.n	80052b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005296:	7b3b      	ldrb	r3, [r7, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e055      	b.n	800534c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b0:	e01d      	b.n	80052ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d108      	bne.n	80052ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d105      	bne.n	80052ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052be:	7b7b      	ldrb	r3, [r7, #13]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d102      	bne.n	80052ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c4:	7b3b      	ldrb	r3, [r7, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d001      	beq.n	80052ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e03e      	b.n	800534c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_TIM_Encoder_Start+0xc4>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d008      	beq.n	800530c <HAL_TIM_Encoder_Start+0xd4>
 80052fa:	e00f      	b.n	800531c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fd51 	bl	8005dac <TIM_CCxChannelCmd>
      break;
 800530a:	e016      	b.n	800533a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	2104      	movs	r1, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fd49 	bl	8005dac <TIM_CCxChannelCmd>
      break;
 800531a:	e00e      	b.n	800533a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fd41 	bl	8005dac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	2104      	movs	r1, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fd3a 	bl	8005dac <TIM_CCxChannelCmd>
      break;
 8005338:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d122      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d11b      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0202 	mvn.w	r2, #2
 8005380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa76 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa69 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fa78 	bl	800589a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d122      	bne.n	8005404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d11b      	bne.n	8005404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0204 	mvn.w	r2, #4
 80053d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa4c 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fa3f 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa4e 	bl	800589a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b08      	cmp	r3, #8
 8005410:	d122      	bne.n	8005458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d11b      	bne.n	8005458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0208 	mvn.w	r2, #8
 8005428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2204      	movs	r2, #4
 800542e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa22 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 8005444:	e005      	b.n	8005452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fa15 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fa24 	bl	800589a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d122      	bne.n	80054ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b10      	cmp	r3, #16
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0210 	mvn.w	r2, #16
 800547c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2208      	movs	r2, #8
 8005482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f9f8 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f9eb 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f9fa 	bl	800589a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0201 	mvn.w	r2, #1
 80054d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc fbaa 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d10e      	bne.n	8005504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b80      	cmp	r3, #128	; 0x80
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fd2a 	bl	8005f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f9be 	bl	80058ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b20      	cmp	r3, #32
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b20      	cmp	r3, #32
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0220 	mvn.w	r2, #32
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fcf5 	bl	8005f46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800557e:	2302      	movs	r3, #2
 8005580:	e0ae      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	f200 809f 	bhi.w	80056d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005592:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080056d1 	.word	0x080056d1
 80055a0:	080056d1 	.word	0x080056d1
 80055a4:	080056d1 	.word	0x080056d1
 80055a8:	0800560d 	.word	0x0800560d
 80055ac:	080056d1 	.word	0x080056d1
 80055b0:	080056d1 	.word	0x080056d1
 80055b4:	080056d1 	.word	0x080056d1
 80055b8:	0800564f 	.word	0x0800564f
 80055bc:	080056d1 	.word	0x080056d1
 80055c0:	080056d1 	.word	0x080056d1
 80055c4:	080056d1 	.word	0x080056d1
 80055c8:	0800568f 	.word	0x0800568f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f9cc 	bl	8005970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0208 	orr.w	r2, r2, #8
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	619a      	str	r2, [r3, #24]
      break;
 800560a:	e064      	b.n	80056d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fa12 	bl	8005a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	619a      	str	r2, [r3, #24]
      break;
 800564c:	e043      	b.n	80056d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fa5b 	bl	8005b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0208 	orr.w	r2, r2, #8
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0204 	bic.w	r2, r2, #4
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	61da      	str	r2, [r3, #28]
      break;
 800568c:	e023      	b.n	80056d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 faa5 	bl	8005be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	61da      	str	r2, [r3, #28]
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056de:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIM_ConfigClockSource+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e0b4      	b.n	800586e <HAL_TIM_ConfigClockSource+0x186>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573c:	d03e      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0xd4>
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	f200 8087 	bhi.w	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	f000 8086 	beq.w	800585a <HAL_TIM_ConfigClockSource+0x172>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d87f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b70      	cmp	r3, #112	; 0x70
 8005756:	d01a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0xa6>
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d87b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b60      	cmp	r3, #96	; 0x60
 800575e:	d050      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x11a>
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d877      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b50      	cmp	r3, #80	; 0x50
 8005766:	d03c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d873      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d058      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x13a>
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d86f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d064      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d86b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b20      	cmp	r3, #32
 800577e:	d060      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d867      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005788:	2b10      	cmp	r3, #16
 800578a:	d05a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	e062      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800579e:	f000 fae6 	bl	8005d6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	609a      	str	r2, [r3, #8]
      break;
 80057ba:	e04f      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057cc:	f000 facf 	bl	8005d6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057de:	609a      	str	r2, [r3, #8]
      break;
 80057e0:	e03c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 fa46 	bl	8005c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2150      	movs	r1, #80	; 0x50
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fa9d 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005800:	e02c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800580e:	461a      	mov	r2, r3
 8005810:	f000 fa64 	bl	8005cdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2160      	movs	r1, #96	; 0x60
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fa8d 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005820:	e01c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	461a      	mov	r2, r3
 8005830:	f000 fa26 	bl	8005c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fa7d 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005840:	e00c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 fa74 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005852:	e003      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e000      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800585a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr
	...

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a25      	ldr	r2, [pc, #148]	; (8005968 <TIM_Base_SetConfig+0xa8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x28>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x28>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a22      	ldr	r2, [pc, #136]	; (800596c <TIM_Base_SetConfig+0xac>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <TIM_Base_SetConfig+0xa8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0x52>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0x52>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <TIM_Base_SetConfig+0xac>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a07      	ldr	r2, [pc, #28]	; (8005968 <TIM_Base_SetConfig+0xa8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40000400 	.word	0x40000400

08005970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 0201 	bic.w	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0302 	bic.w	r3, r3, #2
 80059b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <TIM_OC1_SetConfig+0xc8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <TIM_OC1_SetConfig+0xc8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d111      	bne.n	8005a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00

08005a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <TIM_OC2_SetConfig+0xd0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10d      	bne.n	8005ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <TIM_OC2_SetConfig+0xd0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00

08005b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <TIM_OC3_SetConfig+0xd0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d10d      	bne.n	8005b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <TIM_OC3_SetConfig+0xd0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d113      	bne.n	8005bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00

08005be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <TIM_OC4_SetConfig+0x98>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00

08005c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0201 	bic.w	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f023 030a 	bic.w	r3, r3, #10
 8005cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0210 	bic.w	r2, r3, #16
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	031b      	lsls	r3, r3, #12
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f043 0307 	orr.w	r3, r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	021a      	lsls	r2, r3, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	609a      	str	r2, [r3, #8]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	401a      	ands	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e041      	b.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40000400 	.word	0x40000400

08005ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e03d      	b.n	8005f3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr

08005f46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
	...

08005f6c <std>:
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	4604      	mov	r4, r0
 8005f72:	e9c0 3300 	strd	r3, r3, [r0]
 8005f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f7a:	6083      	str	r3, [r0, #8]
 8005f7c:	8181      	strh	r1, [r0, #12]
 8005f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f80:	81c2      	strh	r2, [r0, #14]
 8005f82:	6183      	str	r3, [r0, #24]
 8005f84:	4619      	mov	r1, r3
 8005f86:	2208      	movs	r2, #8
 8005f88:	305c      	adds	r0, #92	; 0x5c
 8005f8a:	f000 f9f7 	bl	800637c <memset>
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <std+0x58>)
 8005f90:	6224      	str	r4, [r4, #32]
 8005f92:	6263      	str	r3, [r4, #36]	; 0x24
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <std+0x5c>)
 8005f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <std+0x60>)
 8005f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <std+0x64>)
 8005f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <std+0x68>)
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d006      	beq.n	8005fb4 <std+0x48>
 8005fa6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005faa:	4294      	cmp	r4, r2
 8005fac:	d002      	beq.n	8005fb4 <std+0x48>
 8005fae:	33d0      	adds	r3, #208	; 0xd0
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d105      	bne.n	8005fc0 <std+0x54>
 8005fb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f000 ba56 	b.w	800646c <__retarget_lock_init_recursive>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	080061cd 	.word	0x080061cd
 8005fc8:	080061ef 	.word	0x080061ef
 8005fcc:	08006227 	.word	0x08006227
 8005fd0:	0800624b 	.word	0x0800624b
 8005fd4:	20000284 	.word	0x20000284

08005fd8 <stdio_exit_handler>:
 8005fd8:	4a02      	ldr	r2, [pc, #8]	; (8005fe4 <stdio_exit_handler+0xc>)
 8005fda:	4903      	ldr	r1, [pc, #12]	; (8005fe8 <stdio_exit_handler+0x10>)
 8005fdc:	4803      	ldr	r0, [pc, #12]	; (8005fec <stdio_exit_handler+0x14>)
 8005fde:	f000 b869 	b.w	80060b4 <_fwalk_sglue>
 8005fe2:	bf00      	nop
 8005fe4:	20000018 	.word	0x20000018
 8005fe8:	08006d0d 	.word	0x08006d0d
 8005fec:	20000024 	.word	0x20000024

08005ff0 <cleanup_stdio>:
 8005ff0:	6841      	ldr	r1, [r0, #4]
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <cleanup_stdio+0x34>)
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	d001      	beq.n	8006000 <cleanup_stdio+0x10>
 8005ffc:	f000 fe86 	bl	8006d0c <_fflush_r>
 8006000:	68a1      	ldr	r1, [r4, #8]
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <cleanup_stdio+0x38>)
 8006004:	4299      	cmp	r1, r3
 8006006:	d002      	beq.n	800600e <cleanup_stdio+0x1e>
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fe7f 	bl	8006d0c <_fflush_r>
 800600e:	68e1      	ldr	r1, [r4, #12]
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <cleanup_stdio+0x3c>)
 8006012:	4299      	cmp	r1, r3
 8006014:	d004      	beq.n	8006020 <cleanup_stdio+0x30>
 8006016:	4620      	mov	r0, r4
 8006018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601c:	f000 be76 	b.w	8006d0c <_fflush_r>
 8006020:	bd10      	pop	{r4, pc}
 8006022:	bf00      	nop
 8006024:	20000284 	.word	0x20000284
 8006028:	200002ec 	.word	0x200002ec
 800602c:	20000354 	.word	0x20000354

08006030 <global_stdio_init.part.0>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <global_stdio_init.part.0+0x30>)
 8006034:	4c0b      	ldr	r4, [pc, #44]	; (8006064 <global_stdio_init.part.0+0x34>)
 8006036:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <global_stdio_init.part.0+0x38>)
 8006038:	4620      	mov	r0, r4
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	2104      	movs	r1, #4
 800603e:	2200      	movs	r2, #0
 8006040:	f7ff ff94 	bl	8005f6c <std>
 8006044:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006048:	2201      	movs	r2, #1
 800604a:	2109      	movs	r1, #9
 800604c:	f7ff ff8e 	bl	8005f6c <std>
 8006050:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006054:	2202      	movs	r2, #2
 8006056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605a:	2112      	movs	r1, #18
 800605c:	f7ff bf86 	b.w	8005f6c <std>
 8006060:	200003bc 	.word	0x200003bc
 8006064:	20000284 	.word	0x20000284
 8006068:	08005fd9 	.word	0x08005fd9

0800606c <__sfp_lock_acquire>:
 800606c:	4801      	ldr	r0, [pc, #4]	; (8006074 <__sfp_lock_acquire+0x8>)
 800606e:	f000 b9fe 	b.w	800646e <__retarget_lock_acquire_recursive>
 8006072:	bf00      	nop
 8006074:	200003c5 	.word	0x200003c5

08006078 <__sfp_lock_release>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__sfp_lock_release+0x8>)
 800607a:	f000 b9f9 	b.w	8006470 <__retarget_lock_release_recursive>
 800607e:	bf00      	nop
 8006080:	200003c5 	.word	0x200003c5

08006084 <__sinit>:
 8006084:	b510      	push	{r4, lr}
 8006086:	4604      	mov	r4, r0
 8006088:	f7ff fff0 	bl	800606c <__sfp_lock_acquire>
 800608c:	6a23      	ldr	r3, [r4, #32]
 800608e:	b11b      	cbz	r3, 8006098 <__sinit+0x14>
 8006090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006094:	f7ff bff0 	b.w	8006078 <__sfp_lock_release>
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <__sinit+0x28>)
 800609a:	6223      	str	r3, [r4, #32]
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <__sinit+0x2c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f5      	bne.n	8006090 <__sinit+0xc>
 80060a4:	f7ff ffc4 	bl	8006030 <global_stdio_init.part.0>
 80060a8:	e7f2      	b.n	8006090 <__sinit+0xc>
 80060aa:	bf00      	nop
 80060ac:	08005ff1 	.word	0x08005ff1
 80060b0:	200003bc 	.word	0x200003bc

080060b4 <_fwalk_sglue>:
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b8:	4607      	mov	r7, r0
 80060ba:	4688      	mov	r8, r1
 80060bc:	4614      	mov	r4, r2
 80060be:	2600      	movs	r6, #0
 80060c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060c4:	f1b9 0901 	subs.w	r9, r9, #1
 80060c8:	d505      	bpl.n	80060d6 <_fwalk_sglue+0x22>
 80060ca:	6824      	ldr	r4, [r4, #0]
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	d1f7      	bne.n	80060c0 <_fwalk_sglue+0xc>
 80060d0:	4630      	mov	r0, r6
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d907      	bls.n	80060ec <_fwalk_sglue+0x38>
 80060dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060e0:	3301      	adds	r3, #1
 80060e2:	d003      	beq.n	80060ec <_fwalk_sglue+0x38>
 80060e4:	4629      	mov	r1, r5
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c0      	blx	r8
 80060ea:	4306      	orrs	r6, r0
 80060ec:	3568      	adds	r5, #104	; 0x68
 80060ee:	e7e9      	b.n	80060c4 <_fwalk_sglue+0x10>

080060f0 <iprintf>:
 80060f0:	b40f      	push	{r0, r1, r2, r3}
 80060f2:	b507      	push	{r0, r1, r2, lr}
 80060f4:	4906      	ldr	r1, [pc, #24]	; (8006110 <iprintf+0x20>)
 80060f6:	ab04      	add	r3, sp, #16
 80060f8:	6808      	ldr	r0, [r1, #0]
 80060fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fe:	6881      	ldr	r1, [r0, #8]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	f000 fad3 	bl	80066ac <_vfiprintf_r>
 8006106:	b003      	add	sp, #12
 8006108:	f85d eb04 	ldr.w	lr, [sp], #4
 800610c:	b004      	add	sp, #16
 800610e:	4770      	bx	lr
 8006110:	20000070 	.word	0x20000070

08006114 <_puts_r>:
 8006114:	6a03      	ldr	r3, [r0, #32]
 8006116:	b570      	push	{r4, r5, r6, lr}
 8006118:	4605      	mov	r5, r0
 800611a:	460e      	mov	r6, r1
 800611c:	6884      	ldr	r4, [r0, #8]
 800611e:	b90b      	cbnz	r3, 8006124 <_puts_r+0x10>
 8006120:	f7ff ffb0 	bl	8006084 <__sinit>
 8006124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d405      	bmi.n	8006136 <_puts_r+0x22>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	0598      	lsls	r0, r3, #22
 800612e:	d402      	bmi.n	8006136 <_puts_r+0x22>
 8006130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006132:	f000 f99c 	bl	800646e <__retarget_lock_acquire_recursive>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	0719      	lsls	r1, r3, #28
 800613a:	d513      	bpl.n	8006164 <_puts_r+0x50>
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	b18b      	cbz	r3, 8006164 <_puts_r+0x50>
 8006140:	3e01      	subs	r6, #1
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006148:	3b01      	subs	r3, #1
 800614a:	60a3      	str	r3, [r4, #8]
 800614c:	b9e9      	cbnz	r1, 800618a <_puts_r+0x76>
 800614e:	2b00      	cmp	r3, #0
 8006150:	da2e      	bge.n	80061b0 <_puts_r+0x9c>
 8006152:	4622      	mov	r2, r4
 8006154:	210a      	movs	r1, #10
 8006156:	4628      	mov	r0, r5
 8006158:	f000 f87b 	bl	8006252 <__swbuf_r>
 800615c:	3001      	adds	r0, #1
 800615e:	d007      	beq.n	8006170 <_puts_r+0x5c>
 8006160:	250a      	movs	r5, #10
 8006162:	e007      	b.n	8006174 <_puts_r+0x60>
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f8b0 	bl	80062cc <__swsetup_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0e7      	beq.n	8006140 <_puts_r+0x2c>
 8006170:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006176:	07da      	lsls	r2, r3, #31
 8006178:	d405      	bmi.n	8006186 <_puts_r+0x72>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	059b      	lsls	r3, r3, #22
 800617e:	d402      	bmi.n	8006186 <_puts_r+0x72>
 8006180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006182:	f000 f975 	bl	8006470 <__retarget_lock_release_recursive>
 8006186:	4628      	mov	r0, r5
 8006188:	bd70      	pop	{r4, r5, r6, pc}
 800618a:	2b00      	cmp	r3, #0
 800618c:	da04      	bge.n	8006198 <_puts_r+0x84>
 800618e:	69a2      	ldr	r2, [r4, #24]
 8006190:	429a      	cmp	r2, r3
 8006192:	dc06      	bgt.n	80061a2 <_puts_r+0x8e>
 8006194:	290a      	cmp	r1, #10
 8006196:	d004      	beq.n	80061a2 <_puts_r+0x8e>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	7019      	strb	r1, [r3, #0]
 80061a0:	e7cf      	b.n	8006142 <_puts_r+0x2e>
 80061a2:	4622      	mov	r2, r4
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 f854 	bl	8006252 <__swbuf_r>
 80061aa:	3001      	adds	r0, #1
 80061ac:	d1c9      	bne.n	8006142 <_puts_r+0x2e>
 80061ae:	e7df      	b.n	8006170 <_puts_r+0x5c>
 80061b0:	250a      	movs	r5, #10
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	701d      	strb	r5, [r3, #0]
 80061ba:	e7db      	b.n	8006174 <_puts_r+0x60>

080061bc <puts>:
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <puts+0xc>)
 80061be:	4601      	mov	r1, r0
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f7ff bfa7 	b.w	8006114 <_puts_r>
 80061c6:	bf00      	nop
 80061c8:	20000070 	.word	0x20000070

080061cc <__sread>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	460c      	mov	r4, r1
 80061d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d4:	f000 f8fc 	bl	80063d0 <_read_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	bfab      	itete	ge
 80061dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061de:	89a3      	ldrhlt	r3, [r4, #12]
 80061e0:	181b      	addge	r3, r3, r0
 80061e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061e6:	bfac      	ite	ge
 80061e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ea:	81a3      	strhlt	r3, [r4, #12]
 80061ec:	bd10      	pop	{r4, pc}

080061ee <__swrite>:
 80061ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f2:	461f      	mov	r7, r3
 80061f4:	898b      	ldrh	r3, [r1, #12]
 80061f6:	4605      	mov	r5, r0
 80061f8:	05db      	lsls	r3, r3, #23
 80061fa:	460c      	mov	r4, r1
 80061fc:	4616      	mov	r6, r2
 80061fe:	d505      	bpl.n	800620c <__swrite+0x1e>
 8006200:	2302      	movs	r3, #2
 8006202:	2200      	movs	r2, #0
 8006204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006208:	f000 f8d0 	bl	80063ac <_lseek_r>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	4632      	mov	r2, r6
 8006210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	4628      	mov	r0, r5
 8006218:	463b      	mov	r3, r7
 800621a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006222:	f000 b8e7 	b.w	80063f4 <_write_r>

08006226 <__sseek>:
 8006226:	b510      	push	{r4, lr}
 8006228:	460c      	mov	r4, r1
 800622a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622e:	f000 f8bd 	bl	80063ac <_lseek_r>
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	bf15      	itete	ne
 8006238:	6560      	strne	r0, [r4, #84]	; 0x54
 800623a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800623e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006242:	81a3      	strheq	r3, [r4, #12]
 8006244:	bf18      	it	ne
 8006246:	81a3      	strhne	r3, [r4, #12]
 8006248:	bd10      	pop	{r4, pc}

0800624a <__sclose>:
 800624a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624e:	f000 b89d 	b.w	800638c <_close_r>

08006252 <__swbuf_r>:
 8006252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006254:	460e      	mov	r6, r1
 8006256:	4614      	mov	r4, r2
 8006258:	4605      	mov	r5, r0
 800625a:	b118      	cbz	r0, 8006264 <__swbuf_r+0x12>
 800625c:	6a03      	ldr	r3, [r0, #32]
 800625e:	b90b      	cbnz	r3, 8006264 <__swbuf_r+0x12>
 8006260:	f7ff ff10 	bl	8006084 <__sinit>
 8006264:	69a3      	ldr	r3, [r4, #24]
 8006266:	60a3      	str	r3, [r4, #8]
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	071a      	lsls	r2, r3, #28
 800626c:	d525      	bpl.n	80062ba <__swbuf_r+0x68>
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	b31b      	cbz	r3, 80062ba <__swbuf_r+0x68>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	6922      	ldr	r2, [r4, #16]
 8006276:	b2f6      	uxtb	r6, r6
 8006278:	1a98      	subs	r0, r3, r2
 800627a:	6963      	ldr	r3, [r4, #20]
 800627c:	4637      	mov	r7, r6
 800627e:	4283      	cmp	r3, r0
 8006280:	dc04      	bgt.n	800628c <__swbuf_r+0x3a>
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 fd41 	bl	8006d0c <_fflush_r>
 800628a:	b9e0      	cbnz	r0, 80062c6 <__swbuf_r+0x74>
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	3b01      	subs	r3, #1
 8006290:	60a3      	str	r3, [r4, #8]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	6022      	str	r2, [r4, #0]
 8006298:	701e      	strb	r6, [r3, #0]
 800629a:	6962      	ldr	r2, [r4, #20]
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	429a      	cmp	r2, r3
 80062a0:	d004      	beq.n	80062ac <__swbuf_r+0x5a>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	07db      	lsls	r3, r3, #31
 80062a6:	d506      	bpl.n	80062b6 <__swbuf_r+0x64>
 80062a8:	2e0a      	cmp	r6, #10
 80062aa:	d104      	bne.n	80062b6 <__swbuf_r+0x64>
 80062ac:	4621      	mov	r1, r4
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 fd2c 	bl	8006d0c <_fflush_r>
 80062b4:	b938      	cbnz	r0, 80062c6 <__swbuf_r+0x74>
 80062b6:	4638      	mov	r0, r7
 80062b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ba:	4621      	mov	r1, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 f805 	bl	80062cc <__swsetup_r>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d0d5      	beq.n	8006272 <__swbuf_r+0x20>
 80062c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062ca:	e7f4      	b.n	80062b6 <__swbuf_r+0x64>

080062cc <__swsetup_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <__swsetup_r+0xac>)
 80062d0:	4605      	mov	r5, r0
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	460c      	mov	r4, r1
 80062d6:	b118      	cbz	r0, 80062e0 <__swsetup_r+0x14>
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b90b      	cbnz	r3, 80062e0 <__swsetup_r+0x14>
 80062dc:	f7ff fed2 	bl	8006084 <__sinit>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e6:	0718      	lsls	r0, r3, #28
 80062e8:	d422      	bmi.n	8006330 <__swsetup_r+0x64>
 80062ea:	06d9      	lsls	r1, r3, #27
 80062ec:	d407      	bmi.n	80062fe <__swsetup_r+0x32>
 80062ee:	2309      	movs	r3, #9
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	e034      	b.n	8006368 <__swsetup_r+0x9c>
 80062fe:	0758      	lsls	r0, r3, #29
 8006300:	d512      	bpl.n	8006328 <__swsetup_r+0x5c>
 8006302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006304:	b141      	cbz	r1, 8006318 <__swsetup_r+0x4c>
 8006306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800630a:	4299      	cmp	r1, r3
 800630c:	d002      	beq.n	8006314 <__swsetup_r+0x48>
 800630e:	4628      	mov	r0, r5
 8006310:	f000 f8b0 	bl	8006474 <_free_r>
 8006314:	2300      	movs	r3, #0
 8006316:	6363      	str	r3, [r4, #52]	; 0x34
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	2300      	movs	r3, #0
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	f043 0308 	orr.w	r3, r3, #8
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	b94b      	cbnz	r3, 8006348 <__swsetup_r+0x7c>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800633a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633e:	d003      	beq.n	8006348 <__swsetup_r+0x7c>
 8006340:	4621      	mov	r1, r4
 8006342:	4628      	mov	r0, r5
 8006344:	f000 fd2f 	bl	8006da6 <__smakebuf_r>
 8006348:	89a0      	ldrh	r0, [r4, #12]
 800634a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800634e:	f010 0301 	ands.w	r3, r0, #1
 8006352:	d00a      	beq.n	800636a <__swsetup_r+0x9e>
 8006354:	2300      	movs	r3, #0
 8006356:	60a3      	str	r3, [r4, #8]
 8006358:	6963      	ldr	r3, [r4, #20]
 800635a:	425b      	negs	r3, r3
 800635c:	61a3      	str	r3, [r4, #24]
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	b943      	cbnz	r3, 8006374 <__swsetup_r+0xa8>
 8006362:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006366:	d1c4      	bne.n	80062f2 <__swsetup_r+0x26>
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	0781      	lsls	r1, r0, #30
 800636c:	bf58      	it	pl
 800636e:	6963      	ldrpl	r3, [r4, #20]
 8006370:	60a3      	str	r3, [r4, #8]
 8006372:	e7f4      	b.n	800635e <__swsetup_r+0x92>
 8006374:	2000      	movs	r0, #0
 8006376:	e7f7      	b.n	8006368 <__swsetup_r+0x9c>
 8006378:	20000070 	.word	0x20000070

0800637c <memset>:
 800637c:	4603      	mov	r3, r0
 800637e:	4402      	add	r2, r0
 8006380:	4293      	cmp	r3, r2
 8006382:	d100      	bne.n	8006386 <memset+0xa>
 8006384:	4770      	bx	lr
 8006386:	f803 1b01 	strb.w	r1, [r3], #1
 800638a:	e7f9      	b.n	8006380 <memset+0x4>

0800638c <_close_r>:
 800638c:	b538      	push	{r3, r4, r5, lr}
 800638e:	2300      	movs	r3, #0
 8006390:	4d05      	ldr	r5, [pc, #20]	; (80063a8 <_close_r+0x1c>)
 8006392:	4604      	mov	r4, r0
 8006394:	4608      	mov	r0, r1
 8006396:	602b      	str	r3, [r5, #0]
 8006398:	f7fb fe21 	bl	8001fde <_close>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d102      	bne.n	80063a6 <_close_r+0x1a>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <_close_r+0x1a>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	200003c0 	.word	0x200003c0

080063ac <_lseek_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4604      	mov	r4, r0
 80063b0:	4608      	mov	r0, r1
 80063b2:	4611      	mov	r1, r2
 80063b4:	2200      	movs	r2, #0
 80063b6:	4d05      	ldr	r5, [pc, #20]	; (80063cc <_lseek_r+0x20>)
 80063b8:	602a      	str	r2, [r5, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f7fb fe33 	bl	8002026 <_lseek>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_lseek_r+0x1e>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_lseek_r+0x1e>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	200003c0 	.word	0x200003c0

080063d0 <_read_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	2200      	movs	r2, #0
 80063da:	4d05      	ldr	r5, [pc, #20]	; (80063f0 <_read_r+0x20>)
 80063dc:	602a      	str	r2, [r5, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7fb fdc4 	bl	8001f6c <_read>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_read_r+0x1e>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_read_r+0x1e>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	200003c0 	.word	0x200003c0

080063f4 <_write_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	2200      	movs	r2, #0
 80063fe:	4d05      	ldr	r5, [pc, #20]	; (8006414 <_write_r+0x20>)
 8006400:	602a      	str	r2, [r5, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	f7fb fdcf 	bl	8001fa6 <_write>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_write_r+0x1e>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_write_r+0x1e>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	200003c0 	.word	0x200003c0

08006418 <__errno>:
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <__errno+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000070 	.word	0x20000070

08006424 <__libc_init_array>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	2600      	movs	r6, #0
 8006428:	4d0c      	ldr	r5, [pc, #48]	; (800645c <__libc_init_array+0x38>)
 800642a:	4c0d      	ldr	r4, [pc, #52]	; (8006460 <__libc_init_array+0x3c>)
 800642c:	1b64      	subs	r4, r4, r5
 800642e:	10a4      	asrs	r4, r4, #2
 8006430:	42a6      	cmp	r6, r4
 8006432:	d109      	bne.n	8006448 <__libc_init_array+0x24>
 8006434:	f000 fd34 	bl	8006ea0 <_init>
 8006438:	2600      	movs	r6, #0
 800643a:	4d0a      	ldr	r5, [pc, #40]	; (8006464 <__libc_init_array+0x40>)
 800643c:	4c0a      	ldr	r4, [pc, #40]	; (8006468 <__libc_init_array+0x44>)
 800643e:	1b64      	subs	r4, r4, r5
 8006440:	10a4      	asrs	r4, r4, #2
 8006442:	42a6      	cmp	r6, r4
 8006444:	d105      	bne.n	8006452 <__libc_init_array+0x2e>
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	f855 3b04 	ldr.w	r3, [r5], #4
 800644c:	4798      	blx	r3
 800644e:	3601      	adds	r6, #1
 8006450:	e7ee      	b.n	8006430 <__libc_init_array+0xc>
 8006452:	f855 3b04 	ldr.w	r3, [r5], #4
 8006456:	4798      	blx	r3
 8006458:	3601      	adds	r6, #1
 800645a:	e7f2      	b.n	8006442 <__libc_init_array+0x1e>
 800645c:	08007154 	.word	0x08007154
 8006460:	08007154 	.word	0x08007154
 8006464:	08007154 	.word	0x08007154
 8006468:	08007158 	.word	0x08007158

0800646c <__retarget_lock_init_recursive>:
 800646c:	4770      	bx	lr

0800646e <__retarget_lock_acquire_recursive>:
 800646e:	4770      	bx	lr

08006470 <__retarget_lock_release_recursive>:
 8006470:	4770      	bx	lr
	...

08006474 <_free_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4605      	mov	r5, r0
 8006478:	2900      	cmp	r1, #0
 800647a:	d040      	beq.n	80064fe <_free_r+0x8a>
 800647c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006480:	1f0c      	subs	r4, r1, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	bfb8      	it	lt
 8006486:	18e4      	addlt	r4, r4, r3
 8006488:	f000 f8dc 	bl	8006644 <__malloc_lock>
 800648c:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <_free_r+0x8c>)
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	b933      	cbnz	r3, 80064a0 <_free_r+0x2c>
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	6014      	str	r4, [r2, #0]
 8006496:	4628      	mov	r0, r5
 8006498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800649c:	f000 b8d8 	b.w	8006650 <__malloc_unlock>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d908      	bls.n	80064b6 <_free_r+0x42>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	1821      	adds	r1, r4, r0
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf01      	itttt	eq
 80064ac:	6819      	ldreq	r1, [r3, #0]
 80064ae:	685b      	ldreq	r3, [r3, #4]
 80064b0:	1809      	addeq	r1, r1, r0
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	e7ed      	b.n	8006492 <_free_r+0x1e>
 80064b6:	461a      	mov	r2, r3
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b10b      	cbz	r3, 80064c0 <_free_r+0x4c>
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d9fa      	bls.n	80064b6 <_free_r+0x42>
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	1850      	adds	r0, r2, r1
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	d10b      	bne.n	80064e0 <_free_r+0x6c>
 80064c8:	6820      	ldr	r0, [r4, #0]
 80064ca:	4401      	add	r1, r0
 80064cc:	1850      	adds	r0, r2, r1
 80064ce:	4283      	cmp	r3, r0
 80064d0:	6011      	str	r1, [r2, #0]
 80064d2:	d1e0      	bne.n	8006496 <_free_r+0x22>
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	4408      	add	r0, r1
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	6053      	str	r3, [r2, #4]
 80064de:	e7da      	b.n	8006496 <_free_r+0x22>
 80064e0:	d902      	bls.n	80064e8 <_free_r+0x74>
 80064e2:	230c      	movs	r3, #12
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	e7d6      	b.n	8006496 <_free_r+0x22>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	1821      	adds	r1, r4, r0
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf01      	itttt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	6063      	str	r3, [r4, #4]
 80064fa:	6054      	str	r4, [r2, #4]
 80064fc:	e7cb      	b.n	8006496 <_free_r+0x22>
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	200003c8 	.word	0x200003c8

08006504 <sbrk_aligned>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4e0e      	ldr	r6, [pc, #56]	; (8006540 <sbrk_aligned+0x3c>)
 8006508:	460c      	mov	r4, r1
 800650a:	6831      	ldr	r1, [r6, #0]
 800650c:	4605      	mov	r5, r0
 800650e:	b911      	cbnz	r1, 8006516 <sbrk_aligned+0x12>
 8006510:	f000 fca8 	bl	8006e64 <_sbrk_r>
 8006514:	6030      	str	r0, [r6, #0]
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 fca3 	bl	8006e64 <_sbrk_r>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d00a      	beq.n	8006538 <sbrk_aligned+0x34>
 8006522:	1cc4      	adds	r4, r0, #3
 8006524:	f024 0403 	bic.w	r4, r4, #3
 8006528:	42a0      	cmp	r0, r4
 800652a:	d007      	beq.n	800653c <sbrk_aligned+0x38>
 800652c:	1a21      	subs	r1, r4, r0
 800652e:	4628      	mov	r0, r5
 8006530:	f000 fc98 	bl	8006e64 <_sbrk_r>
 8006534:	3001      	adds	r0, #1
 8006536:	d101      	bne.n	800653c <sbrk_aligned+0x38>
 8006538:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800653c:	4620      	mov	r0, r4
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	200003cc 	.word	0x200003cc

08006544 <_malloc_r>:
 8006544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006548:	1ccd      	adds	r5, r1, #3
 800654a:	f025 0503 	bic.w	r5, r5, #3
 800654e:	3508      	adds	r5, #8
 8006550:	2d0c      	cmp	r5, #12
 8006552:	bf38      	it	cc
 8006554:	250c      	movcc	r5, #12
 8006556:	2d00      	cmp	r5, #0
 8006558:	4607      	mov	r7, r0
 800655a:	db01      	blt.n	8006560 <_malloc_r+0x1c>
 800655c:	42a9      	cmp	r1, r5
 800655e:	d905      	bls.n	800656c <_malloc_r+0x28>
 8006560:	230c      	movs	r3, #12
 8006562:	2600      	movs	r6, #0
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	4630      	mov	r0, r6
 8006568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006640 <_malloc_r+0xfc>
 8006570:	f000 f868 	bl	8006644 <__malloc_lock>
 8006574:	f8d8 3000 	ldr.w	r3, [r8]
 8006578:	461c      	mov	r4, r3
 800657a:	bb5c      	cbnz	r4, 80065d4 <_malloc_r+0x90>
 800657c:	4629      	mov	r1, r5
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff ffc0 	bl	8006504 <sbrk_aligned>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	4604      	mov	r4, r0
 8006588:	d155      	bne.n	8006636 <_malloc_r+0xf2>
 800658a:	f8d8 4000 	ldr.w	r4, [r8]
 800658e:	4626      	mov	r6, r4
 8006590:	2e00      	cmp	r6, #0
 8006592:	d145      	bne.n	8006620 <_malloc_r+0xdc>
 8006594:	2c00      	cmp	r4, #0
 8006596:	d048      	beq.n	800662a <_malloc_r+0xe6>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	4631      	mov	r1, r6
 800659c:	4638      	mov	r0, r7
 800659e:	eb04 0903 	add.w	r9, r4, r3
 80065a2:	f000 fc5f 	bl	8006e64 <_sbrk_r>
 80065a6:	4581      	cmp	r9, r0
 80065a8:	d13f      	bne.n	800662a <_malloc_r+0xe6>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	4638      	mov	r0, r7
 80065ae:	1a6d      	subs	r5, r5, r1
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7ff ffa7 	bl	8006504 <sbrk_aligned>
 80065b6:	3001      	adds	r0, #1
 80065b8:	d037      	beq.n	800662a <_malloc_r+0xe6>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	442b      	add	r3, r5
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	f8d8 3000 	ldr.w	r3, [r8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d038      	beq.n	800663a <_malloc_r+0xf6>
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	42a2      	cmp	r2, r4
 80065cc:	d12b      	bne.n	8006626 <_malloc_r+0xe2>
 80065ce:	2200      	movs	r2, #0
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	e00f      	b.n	80065f4 <_malloc_r+0xb0>
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	1b52      	subs	r2, r2, r5
 80065d8:	d41f      	bmi.n	800661a <_malloc_r+0xd6>
 80065da:	2a0b      	cmp	r2, #11
 80065dc:	d917      	bls.n	800660e <_malloc_r+0xca>
 80065de:	1961      	adds	r1, r4, r5
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	6025      	str	r5, [r4, #0]
 80065e4:	bf18      	it	ne
 80065e6:	6059      	strne	r1, [r3, #4]
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	bf08      	it	eq
 80065ec:	f8c8 1000 	streq.w	r1, [r8]
 80065f0:	5162      	str	r2, [r4, r5]
 80065f2:	604b      	str	r3, [r1, #4]
 80065f4:	4638      	mov	r0, r7
 80065f6:	f104 060b 	add.w	r6, r4, #11
 80065fa:	f000 f829 	bl	8006650 <__malloc_unlock>
 80065fe:	f026 0607 	bic.w	r6, r6, #7
 8006602:	1d23      	adds	r3, r4, #4
 8006604:	1af2      	subs	r2, r6, r3
 8006606:	d0ae      	beq.n	8006566 <_malloc_r+0x22>
 8006608:	1b9b      	subs	r3, r3, r6
 800660a:	50a3      	str	r3, [r4, r2]
 800660c:	e7ab      	b.n	8006566 <_malloc_r+0x22>
 800660e:	42a3      	cmp	r3, r4
 8006610:	6862      	ldr	r2, [r4, #4]
 8006612:	d1dd      	bne.n	80065d0 <_malloc_r+0x8c>
 8006614:	f8c8 2000 	str.w	r2, [r8]
 8006618:	e7ec      	b.n	80065f4 <_malloc_r+0xb0>
 800661a:	4623      	mov	r3, r4
 800661c:	6864      	ldr	r4, [r4, #4]
 800661e:	e7ac      	b.n	800657a <_malloc_r+0x36>
 8006620:	4634      	mov	r4, r6
 8006622:	6876      	ldr	r6, [r6, #4]
 8006624:	e7b4      	b.n	8006590 <_malloc_r+0x4c>
 8006626:	4613      	mov	r3, r2
 8006628:	e7cc      	b.n	80065c4 <_malloc_r+0x80>
 800662a:	230c      	movs	r3, #12
 800662c:	4638      	mov	r0, r7
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	f000 f80e 	bl	8006650 <__malloc_unlock>
 8006634:	e797      	b.n	8006566 <_malloc_r+0x22>
 8006636:	6025      	str	r5, [r4, #0]
 8006638:	e7dc      	b.n	80065f4 <_malloc_r+0xb0>
 800663a:	605b      	str	r3, [r3, #4]
 800663c:	deff      	udf	#255	; 0xff
 800663e:	bf00      	nop
 8006640:	200003c8 	.word	0x200003c8

08006644 <__malloc_lock>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__malloc_lock+0x8>)
 8006646:	f7ff bf12 	b.w	800646e <__retarget_lock_acquire_recursive>
 800664a:	bf00      	nop
 800664c:	200003c4 	.word	0x200003c4

08006650 <__malloc_unlock>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__malloc_unlock+0x8>)
 8006652:	f7ff bf0d 	b.w	8006470 <__retarget_lock_release_recursive>
 8006656:	bf00      	nop
 8006658:	200003c4 	.word	0x200003c4

0800665c <__sfputc_r>:
 800665c:	6893      	ldr	r3, [r2, #8]
 800665e:	b410      	push	{r4}
 8006660:	3b01      	subs	r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	6093      	str	r3, [r2, #8]
 8006666:	da07      	bge.n	8006678 <__sfputc_r+0x1c>
 8006668:	6994      	ldr	r4, [r2, #24]
 800666a:	42a3      	cmp	r3, r4
 800666c:	db01      	blt.n	8006672 <__sfputc_r+0x16>
 800666e:	290a      	cmp	r1, #10
 8006670:	d102      	bne.n	8006678 <__sfputc_r+0x1c>
 8006672:	bc10      	pop	{r4}
 8006674:	f7ff bded 	b.w	8006252 <__swbuf_r>
 8006678:	6813      	ldr	r3, [r2, #0]
 800667a:	1c58      	adds	r0, r3, #1
 800667c:	6010      	str	r0, [r2, #0]
 800667e:	7019      	strb	r1, [r3, #0]
 8006680:	4608      	mov	r0, r1
 8006682:	bc10      	pop	{r4}
 8006684:	4770      	bx	lr

08006686 <__sfputs_r>:
 8006686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	4614      	mov	r4, r2
 800668e:	18d5      	adds	r5, r2, r3
 8006690:	42ac      	cmp	r4, r5
 8006692:	d101      	bne.n	8006698 <__sfputs_r+0x12>
 8006694:	2000      	movs	r0, #0
 8006696:	e007      	b.n	80066a8 <__sfputs_r+0x22>
 8006698:	463a      	mov	r2, r7
 800669a:	4630      	mov	r0, r6
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	f7ff ffdc 	bl	800665c <__sfputc_r>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d1f3      	bne.n	8006690 <__sfputs_r+0xa>
 80066a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066ac <_vfiprintf_r>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	460d      	mov	r5, r1
 80066b2:	4614      	mov	r4, r2
 80066b4:	4698      	mov	r8, r3
 80066b6:	4606      	mov	r6, r0
 80066b8:	b09d      	sub	sp, #116	; 0x74
 80066ba:	b118      	cbz	r0, 80066c4 <_vfiprintf_r+0x18>
 80066bc:	6a03      	ldr	r3, [r0, #32]
 80066be:	b90b      	cbnz	r3, 80066c4 <_vfiprintf_r+0x18>
 80066c0:	f7ff fce0 	bl	8006084 <__sinit>
 80066c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c6:	07d9      	lsls	r1, r3, #31
 80066c8:	d405      	bmi.n	80066d6 <_vfiprintf_r+0x2a>
 80066ca:	89ab      	ldrh	r3, [r5, #12]
 80066cc:	059a      	lsls	r2, r3, #22
 80066ce:	d402      	bmi.n	80066d6 <_vfiprintf_r+0x2a>
 80066d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066d2:	f7ff fecc 	bl	800646e <__retarget_lock_acquire_recursive>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	071b      	lsls	r3, r3, #28
 80066da:	d501      	bpl.n	80066e0 <_vfiprintf_r+0x34>
 80066dc:	692b      	ldr	r3, [r5, #16]
 80066de:	b99b      	cbnz	r3, 8006708 <_vfiprintf_r+0x5c>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff fdf2 	bl	80062cc <__swsetup_r>
 80066e8:	b170      	cbz	r0, 8006708 <_vfiprintf_r+0x5c>
 80066ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ec:	07dc      	lsls	r4, r3, #31
 80066ee:	d504      	bpl.n	80066fa <_vfiprintf_r+0x4e>
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f4:	b01d      	add	sp, #116	; 0x74
 80066f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	0598      	lsls	r0, r3, #22
 80066fe:	d4f7      	bmi.n	80066f0 <_vfiprintf_r+0x44>
 8006700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006702:	f7ff feb5 	bl	8006470 <__retarget_lock_release_recursive>
 8006706:	e7f3      	b.n	80066f0 <_vfiprintf_r+0x44>
 8006708:	2300      	movs	r3, #0
 800670a:	9309      	str	r3, [sp, #36]	; 0x24
 800670c:	2320      	movs	r3, #32
 800670e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006712:	2330      	movs	r3, #48	; 0x30
 8006714:	f04f 0901 	mov.w	r9, #1
 8006718:	f8cd 800c 	str.w	r8, [sp, #12]
 800671c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80068cc <_vfiprintf_r+0x220>
 8006720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006724:	4623      	mov	r3, r4
 8006726:	469a      	mov	sl, r3
 8006728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672c:	b10a      	cbz	r2, 8006732 <_vfiprintf_r+0x86>
 800672e:	2a25      	cmp	r2, #37	; 0x25
 8006730:	d1f9      	bne.n	8006726 <_vfiprintf_r+0x7a>
 8006732:	ebba 0b04 	subs.w	fp, sl, r4
 8006736:	d00b      	beq.n	8006750 <_vfiprintf_r+0xa4>
 8006738:	465b      	mov	r3, fp
 800673a:	4622      	mov	r2, r4
 800673c:	4629      	mov	r1, r5
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ffa1 	bl	8006686 <__sfputs_r>
 8006744:	3001      	adds	r0, #1
 8006746:	f000 80a9 	beq.w	800689c <_vfiprintf_r+0x1f0>
 800674a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674c:	445a      	add	r2, fp
 800674e:	9209      	str	r2, [sp, #36]	; 0x24
 8006750:	f89a 3000 	ldrb.w	r3, [sl]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80a1 	beq.w	800689c <_vfiprintf_r+0x1f0>
 800675a:	2300      	movs	r3, #0
 800675c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006764:	f10a 0a01 	add.w	sl, sl, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	9307      	str	r3, [sp, #28]
 800676c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006770:	931a      	str	r3, [sp, #104]	; 0x68
 8006772:	4654      	mov	r4, sl
 8006774:	2205      	movs	r2, #5
 8006776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677a:	4854      	ldr	r0, [pc, #336]	; (80068cc <_vfiprintf_r+0x220>)
 800677c:	f000 fb82 	bl	8006e84 <memchr>
 8006780:	9a04      	ldr	r2, [sp, #16]
 8006782:	b9d8      	cbnz	r0, 80067bc <_vfiprintf_r+0x110>
 8006784:	06d1      	lsls	r1, r2, #27
 8006786:	bf44      	itt	mi
 8006788:	2320      	movmi	r3, #32
 800678a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678e:	0713      	lsls	r3, r2, #28
 8006790:	bf44      	itt	mi
 8006792:	232b      	movmi	r3, #43	; 0x2b
 8006794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006798:	f89a 3000 	ldrb.w	r3, [sl]
 800679c:	2b2a      	cmp	r3, #42	; 0x2a
 800679e:	d015      	beq.n	80067cc <_vfiprintf_r+0x120>
 80067a0:	4654      	mov	r4, sl
 80067a2:	2000      	movs	r0, #0
 80067a4:	f04f 0c0a 	mov.w	ip, #10
 80067a8:	9a07      	ldr	r2, [sp, #28]
 80067aa:	4621      	mov	r1, r4
 80067ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b0:	3b30      	subs	r3, #48	; 0x30
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d94d      	bls.n	8006852 <_vfiprintf_r+0x1a6>
 80067b6:	b1b0      	cbz	r0, 80067e6 <_vfiprintf_r+0x13a>
 80067b8:	9207      	str	r2, [sp, #28]
 80067ba:	e014      	b.n	80067e6 <_vfiprintf_r+0x13a>
 80067bc:	eba0 0308 	sub.w	r3, r0, r8
 80067c0:	fa09 f303 	lsl.w	r3, r9, r3
 80067c4:	4313      	orrs	r3, r2
 80067c6:	46a2      	mov	sl, r4
 80067c8:	9304      	str	r3, [sp, #16]
 80067ca:	e7d2      	b.n	8006772 <_vfiprintf_r+0xc6>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	1d19      	adds	r1, r3, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	9103      	str	r1, [sp, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbb      	ittet	lt
 80067d8:	425b      	neglt	r3, r3
 80067da:	f042 0202 	orrlt.w	r2, r2, #2
 80067de:	9307      	strge	r3, [sp, #28]
 80067e0:	9307      	strlt	r3, [sp, #28]
 80067e2:	bfb8      	it	lt
 80067e4:	9204      	strlt	r2, [sp, #16]
 80067e6:	7823      	ldrb	r3, [r4, #0]
 80067e8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ea:	d10c      	bne.n	8006806 <_vfiprintf_r+0x15a>
 80067ec:	7863      	ldrb	r3, [r4, #1]
 80067ee:	2b2a      	cmp	r3, #42	; 0x2a
 80067f0:	d134      	bne.n	800685c <_vfiprintf_r+0x1b0>
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	3402      	adds	r4, #2
 80067f6:	1d1a      	adds	r2, r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	9203      	str	r2, [sp, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfb8      	it	lt
 8006800:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068d0 <_vfiprintf_r+0x224>
 800680a:	2203      	movs	r2, #3
 800680c:	4650      	mov	r0, sl
 800680e:	7821      	ldrb	r1, [r4, #0]
 8006810:	f000 fb38 	bl	8006e84 <memchr>
 8006814:	b138      	cbz	r0, 8006826 <_vfiprintf_r+0x17a>
 8006816:	2240      	movs	r2, #64	; 0x40
 8006818:	9b04      	ldr	r3, [sp, #16]
 800681a:	eba0 000a 	sub.w	r0, r0, sl
 800681e:	4082      	lsls	r2, r0
 8006820:	4313      	orrs	r3, r2
 8006822:	3401      	adds	r4, #1
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682a:	2206      	movs	r2, #6
 800682c:	4829      	ldr	r0, [pc, #164]	; (80068d4 <_vfiprintf_r+0x228>)
 800682e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006832:	f000 fb27 	bl	8006e84 <memchr>
 8006836:	2800      	cmp	r0, #0
 8006838:	d03f      	beq.n	80068ba <_vfiprintf_r+0x20e>
 800683a:	4b27      	ldr	r3, [pc, #156]	; (80068d8 <_vfiprintf_r+0x22c>)
 800683c:	bb1b      	cbnz	r3, 8006886 <_vfiprintf_r+0x1da>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	3307      	adds	r3, #7
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	3308      	adds	r3, #8
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684c:	443b      	add	r3, r7
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	e768      	b.n	8006724 <_vfiprintf_r+0x78>
 8006852:	460c      	mov	r4, r1
 8006854:	2001      	movs	r0, #1
 8006856:	fb0c 3202 	mla	r2, ip, r2, r3
 800685a:	e7a6      	b.n	80067aa <_vfiprintf_r+0xfe>
 800685c:	2300      	movs	r3, #0
 800685e:	f04f 0c0a 	mov.w	ip, #10
 8006862:	4619      	mov	r1, r3
 8006864:	3401      	adds	r4, #1
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	4620      	mov	r0, r4
 800686a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800686e:	3a30      	subs	r2, #48	; 0x30
 8006870:	2a09      	cmp	r2, #9
 8006872:	d903      	bls.n	800687c <_vfiprintf_r+0x1d0>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0c6      	beq.n	8006806 <_vfiprintf_r+0x15a>
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	e7c4      	b.n	8006806 <_vfiprintf_r+0x15a>
 800687c:	4604      	mov	r4, r0
 800687e:	2301      	movs	r3, #1
 8006880:	fb0c 2101 	mla	r1, ip, r1, r2
 8006884:	e7f0      	b.n	8006868 <_vfiprintf_r+0x1bc>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4630      	mov	r0, r6
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <_vfiprintf_r+0x230>)
 8006890:	a904      	add	r1, sp, #16
 8006892:	f3af 8000 	nop.w
 8006896:	4607      	mov	r7, r0
 8006898:	1c78      	adds	r0, r7, #1
 800689a:	d1d6      	bne.n	800684a <_vfiprintf_r+0x19e>
 800689c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800689e:	07d9      	lsls	r1, r3, #31
 80068a0:	d405      	bmi.n	80068ae <_vfiprintf_r+0x202>
 80068a2:	89ab      	ldrh	r3, [r5, #12]
 80068a4:	059a      	lsls	r2, r3, #22
 80068a6:	d402      	bmi.n	80068ae <_vfiprintf_r+0x202>
 80068a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068aa:	f7ff fde1 	bl	8006470 <__retarget_lock_release_recursive>
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	065b      	lsls	r3, r3, #25
 80068b2:	f53f af1d 	bmi.w	80066f0 <_vfiprintf_r+0x44>
 80068b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068b8:	e71c      	b.n	80066f4 <_vfiprintf_r+0x48>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4630      	mov	r0, r6
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <_vfiprintf_r+0x230>)
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	f000 f87d 	bl	80069c4 <_printf_i>
 80068ca:	e7e4      	b.n	8006896 <_vfiprintf_r+0x1ea>
 80068cc:	0800711e 	.word	0x0800711e
 80068d0:	08007124 	.word	0x08007124
 80068d4:	08007128 	.word	0x08007128
 80068d8:	00000000 	.word	0x00000000
 80068dc:	08006687 	.word	0x08006687

080068e0 <_printf_common>:
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	4616      	mov	r6, r2
 80068e6:	4699      	mov	r9, r3
 80068e8:	688a      	ldr	r2, [r1, #8]
 80068ea:	690b      	ldr	r3, [r1, #16]
 80068ec:	4607      	mov	r7, r0
 80068ee:	4293      	cmp	r3, r2
 80068f0:	bfb8      	it	lt
 80068f2:	4613      	movlt	r3, r2
 80068f4:	6033      	str	r3, [r6, #0]
 80068f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068fa:	460c      	mov	r4, r1
 80068fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006900:	b10a      	cbz	r2, 8006906 <_printf_common+0x26>
 8006902:	3301      	adds	r3, #1
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	0699      	lsls	r1, r3, #26
 800690a:	bf42      	ittt	mi
 800690c:	6833      	ldrmi	r3, [r6, #0]
 800690e:	3302      	addmi	r3, #2
 8006910:	6033      	strmi	r3, [r6, #0]
 8006912:	6825      	ldr	r5, [r4, #0]
 8006914:	f015 0506 	ands.w	r5, r5, #6
 8006918:	d106      	bne.n	8006928 <_printf_common+0x48>
 800691a:	f104 0a19 	add.w	sl, r4, #25
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	6832      	ldr	r2, [r6, #0]
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	42ab      	cmp	r3, r5
 8006926:	dc2b      	bgt.n	8006980 <_printf_common+0xa0>
 8006928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800692c:	1e13      	subs	r3, r2, #0
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	bf18      	it	ne
 8006932:	2301      	movne	r3, #1
 8006934:	0692      	lsls	r2, r2, #26
 8006936:	d430      	bmi.n	800699a <_printf_common+0xba>
 8006938:	4649      	mov	r1, r9
 800693a:	4638      	mov	r0, r7
 800693c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d023      	beq.n	800698e <_printf_common+0xae>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	f003 0306 	and.w	r3, r3, #6
 800694e:	2b04      	cmp	r3, #4
 8006950:	bf14      	ite	ne
 8006952:	2500      	movne	r5, #0
 8006954:	6833      	ldreq	r3, [r6, #0]
 8006956:	f04f 0600 	mov.w	r6, #0
 800695a:	bf08      	it	eq
 800695c:	68e5      	ldreq	r5, [r4, #12]
 800695e:	f104 041a 	add.w	r4, r4, #26
 8006962:	bf08      	it	eq
 8006964:	1aed      	subeq	r5, r5, r3
 8006966:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800696a:	bf08      	it	eq
 800696c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006970:	4293      	cmp	r3, r2
 8006972:	bfc4      	itt	gt
 8006974:	1a9b      	subgt	r3, r3, r2
 8006976:	18ed      	addgt	r5, r5, r3
 8006978:	42b5      	cmp	r5, r6
 800697a:	d11a      	bne.n	80069b2 <_printf_common+0xd2>
 800697c:	2000      	movs	r0, #0
 800697e:	e008      	b.n	8006992 <_printf_common+0xb2>
 8006980:	2301      	movs	r3, #1
 8006982:	4652      	mov	r2, sl
 8006984:	4649      	mov	r1, r9
 8006986:	4638      	mov	r0, r7
 8006988:	47c0      	blx	r8
 800698a:	3001      	adds	r0, #1
 800698c:	d103      	bne.n	8006996 <_printf_common+0xb6>
 800698e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	3501      	adds	r5, #1
 8006998:	e7c1      	b.n	800691e <_printf_common+0x3e>
 800699a:	2030      	movs	r0, #48	; 0x30
 800699c:	18e1      	adds	r1, r4, r3
 800699e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069a8:	4422      	add	r2, r4
 80069aa:	3302      	adds	r3, #2
 80069ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b0:	e7c2      	b.n	8006938 <_printf_common+0x58>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4622      	mov	r2, r4
 80069b6:	4649      	mov	r1, r9
 80069b8:	4638      	mov	r0, r7
 80069ba:	47c0      	blx	r8
 80069bc:	3001      	adds	r0, #1
 80069be:	d0e6      	beq.n	800698e <_printf_common+0xae>
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7d9      	b.n	8006978 <_printf_common+0x98>

080069c4 <_printf_i>:
 80069c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	7e0f      	ldrb	r7, [r1, #24]
 80069ca:	4691      	mov	r9, r2
 80069cc:	2f78      	cmp	r7, #120	; 0x78
 80069ce:	4680      	mov	r8, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	469a      	mov	sl, r3
 80069d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069da:	d807      	bhi.n	80069ec <_printf_i+0x28>
 80069dc:	2f62      	cmp	r7, #98	; 0x62
 80069de:	d80a      	bhi.n	80069f6 <_printf_i+0x32>
 80069e0:	2f00      	cmp	r7, #0
 80069e2:	f000 80d5 	beq.w	8006b90 <_printf_i+0x1cc>
 80069e6:	2f58      	cmp	r7, #88	; 0x58
 80069e8:	f000 80c1 	beq.w	8006b6e <_printf_i+0x1aa>
 80069ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f4:	e03a      	b.n	8006a6c <_printf_i+0xa8>
 80069f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069fa:	2b15      	cmp	r3, #21
 80069fc:	d8f6      	bhi.n	80069ec <_printf_i+0x28>
 80069fe:	a101      	add	r1, pc, #4	; (adr r1, 8006a04 <_printf_i+0x40>)
 8006a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a71 	.word	0x08006a71
 8006a0c:	080069ed 	.word	0x080069ed
 8006a10:	080069ed 	.word	0x080069ed
 8006a14:	080069ed 	.word	0x080069ed
 8006a18:	080069ed 	.word	0x080069ed
 8006a1c:	08006a71 	.word	0x08006a71
 8006a20:	080069ed 	.word	0x080069ed
 8006a24:	080069ed 	.word	0x080069ed
 8006a28:	080069ed 	.word	0x080069ed
 8006a2c:	080069ed 	.word	0x080069ed
 8006a30:	08006b77 	.word	0x08006b77
 8006a34:	08006a9d 	.word	0x08006a9d
 8006a38:	08006b31 	.word	0x08006b31
 8006a3c:	080069ed 	.word	0x080069ed
 8006a40:	080069ed 	.word	0x080069ed
 8006a44:	08006b99 	.word	0x08006b99
 8006a48:	080069ed 	.word	0x080069ed
 8006a4c:	08006a9d 	.word	0x08006a9d
 8006a50:	080069ed 	.word	0x080069ed
 8006a54:	080069ed 	.word	0x080069ed
 8006a58:	08006b39 	.word	0x08006b39
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	602a      	str	r2, [r5, #0]
 8006a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0a0      	b.n	8006bb2 <_printf_i+0x1ee>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	682b      	ldr	r3, [r5, #0]
 8006a74:	0607      	lsls	r7, r0, #24
 8006a76:	f103 0104 	add.w	r1, r3, #4
 8006a7a:	6029      	str	r1, [r5, #0]
 8006a7c:	d501      	bpl.n	8006a82 <_printf_i+0xbe>
 8006a7e:	681e      	ldr	r6, [r3, #0]
 8006a80:	e003      	b.n	8006a8a <_printf_i+0xc6>
 8006a82:	0646      	lsls	r6, r0, #25
 8006a84:	d5fb      	bpl.n	8006a7e <_printf_i+0xba>
 8006a86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	da03      	bge.n	8006a96 <_printf_i+0xd2>
 8006a8e:	232d      	movs	r3, #45	; 0x2d
 8006a90:	4276      	negs	r6, r6
 8006a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a96:	230a      	movs	r3, #10
 8006a98:	4859      	ldr	r0, [pc, #356]	; (8006c00 <_printf_i+0x23c>)
 8006a9a:	e012      	b.n	8006ac2 <_printf_i+0xfe>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	1d19      	adds	r1, r3, #4
 8006aa2:	6029      	str	r1, [r5, #0]
 8006aa4:	0605      	lsls	r5, r0, #24
 8006aa6:	d501      	bpl.n	8006aac <_printf_i+0xe8>
 8006aa8:	681e      	ldr	r6, [r3, #0]
 8006aaa:	e002      	b.n	8006ab2 <_printf_i+0xee>
 8006aac:	0641      	lsls	r1, r0, #25
 8006aae:	d5fb      	bpl.n	8006aa8 <_printf_i+0xe4>
 8006ab0:	881e      	ldrh	r6, [r3, #0]
 8006ab2:	2f6f      	cmp	r7, #111	; 0x6f
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2308      	moveq	r3, #8
 8006ab8:	230a      	movne	r3, #10
 8006aba:	4851      	ldr	r0, [pc, #324]	; (8006c00 <_printf_i+0x23c>)
 8006abc:	2100      	movs	r1, #0
 8006abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ac2:	6865      	ldr	r5, [r4, #4]
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	bfa8      	it	ge
 8006ac8:	6821      	ldrge	r1, [r4, #0]
 8006aca:	60a5      	str	r5, [r4, #8]
 8006acc:	bfa4      	itt	ge
 8006ace:	f021 0104 	bicge.w	r1, r1, #4
 8006ad2:	6021      	strge	r1, [r4, #0]
 8006ad4:	b90e      	cbnz	r6, 8006ada <_printf_i+0x116>
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	d04b      	beq.n	8006b72 <_printf_i+0x1ae>
 8006ada:	4615      	mov	r5, r2
 8006adc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ae0:	fb03 6711 	mls	r7, r3, r1, r6
 8006ae4:	5dc7      	ldrb	r7, [r0, r7]
 8006ae6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aea:	4637      	mov	r7, r6
 8006aec:	42bb      	cmp	r3, r7
 8006aee:	460e      	mov	r6, r1
 8006af0:	d9f4      	bls.n	8006adc <_printf_i+0x118>
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d10b      	bne.n	8006b0e <_printf_i+0x14a>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	07de      	lsls	r6, r3, #31
 8006afa:	d508      	bpl.n	8006b0e <_printf_i+0x14a>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	6861      	ldr	r1, [r4, #4]
 8006b00:	4299      	cmp	r1, r3
 8006b02:	bfde      	ittt	le
 8006b04:	2330      	movle	r3, #48	; 0x30
 8006b06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b0e:	1b52      	subs	r2, r2, r5
 8006b10:	6122      	str	r2, [r4, #16]
 8006b12:	464b      	mov	r3, r9
 8006b14:	4621      	mov	r1, r4
 8006b16:	4640      	mov	r0, r8
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	aa03      	add	r2, sp, #12
 8006b1e:	f7ff fedf 	bl	80068e0 <_printf_common>
 8006b22:	3001      	adds	r0, #1
 8006b24:	d14a      	bne.n	8006bbc <_printf_i+0x1f8>
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b2a:	b004      	add	sp, #16
 8006b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	f043 0320 	orr.w	r3, r3, #32
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	2778      	movs	r7, #120	; 0x78
 8006b3a:	4832      	ldr	r0, [pc, #200]	; (8006c04 <_printf_i+0x240>)
 8006b3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	6829      	ldr	r1, [r5, #0]
 8006b44:	061f      	lsls	r7, r3, #24
 8006b46:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b4a:	d402      	bmi.n	8006b52 <_printf_i+0x18e>
 8006b4c:	065f      	lsls	r7, r3, #25
 8006b4e:	bf48      	it	mi
 8006b50:	b2b6      	uxthmi	r6, r6
 8006b52:	07df      	lsls	r7, r3, #31
 8006b54:	bf48      	it	mi
 8006b56:	f043 0320 	orrmi.w	r3, r3, #32
 8006b5a:	6029      	str	r1, [r5, #0]
 8006b5c:	bf48      	it	mi
 8006b5e:	6023      	strmi	r3, [r4, #0]
 8006b60:	b91e      	cbnz	r6, 8006b6a <_printf_i+0x1a6>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	f023 0320 	bic.w	r3, r3, #32
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	e7a6      	b.n	8006abc <_printf_i+0xf8>
 8006b6e:	4824      	ldr	r0, [pc, #144]	; (8006c00 <_printf_i+0x23c>)
 8006b70:	e7e4      	b.n	8006b3c <_printf_i+0x178>
 8006b72:	4615      	mov	r5, r2
 8006b74:	e7bd      	b.n	8006af2 <_printf_i+0x12e>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	6826      	ldr	r6, [r4, #0]
 8006b7a:	1d18      	adds	r0, r3, #4
 8006b7c:	6961      	ldr	r1, [r4, #20]
 8006b7e:	6028      	str	r0, [r5, #0]
 8006b80:	0635      	lsls	r5, r6, #24
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	d501      	bpl.n	8006b8a <_printf_i+0x1c6>
 8006b86:	6019      	str	r1, [r3, #0]
 8006b88:	e002      	b.n	8006b90 <_printf_i+0x1cc>
 8006b8a:	0670      	lsls	r0, r6, #25
 8006b8c:	d5fb      	bpl.n	8006b86 <_printf_i+0x1c2>
 8006b8e:	8019      	strh	r1, [r3, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	4615      	mov	r5, r2
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	e7bc      	b.n	8006b12 <_printf_i+0x14e>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	602a      	str	r2, [r5, #0]
 8006ba0:	681d      	ldr	r5, [r3, #0]
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f96d 	bl	8006e84 <memchr>
 8006baa:	b108      	cbz	r0, 8006bb0 <_printf_i+0x1ec>
 8006bac:	1b40      	subs	r0, r0, r5
 8006bae:	6060      	str	r0, [r4, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bba:	e7aa      	b.n	8006b12 <_printf_i+0x14e>
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	47d0      	blx	sl
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d0ad      	beq.n	8006b26 <_printf_i+0x162>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	079b      	lsls	r3, r3, #30
 8006bce:	d413      	bmi.n	8006bf8 <_printf_i+0x234>
 8006bd0:	68e0      	ldr	r0, [r4, #12]
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	4298      	cmp	r0, r3
 8006bd6:	bfb8      	it	lt
 8006bd8:	4618      	movlt	r0, r3
 8006bda:	e7a6      	b.n	8006b2a <_printf_i+0x166>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4632      	mov	r2, r6
 8006be0:	4649      	mov	r1, r9
 8006be2:	4640      	mov	r0, r8
 8006be4:	47d0      	blx	sl
 8006be6:	3001      	adds	r0, #1
 8006be8:	d09d      	beq.n	8006b26 <_printf_i+0x162>
 8006bea:	3501      	adds	r5, #1
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	9903      	ldr	r1, [sp, #12]
 8006bf0:	1a5b      	subs	r3, r3, r1
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	dcf2      	bgt.n	8006bdc <_printf_i+0x218>
 8006bf6:	e7eb      	b.n	8006bd0 <_printf_i+0x20c>
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	f104 0619 	add.w	r6, r4, #25
 8006bfe:	e7f5      	b.n	8006bec <_printf_i+0x228>
 8006c00:	0800712f 	.word	0x0800712f
 8006c04:	08007140 	.word	0x08007140

08006c08 <__sflush_r>:
 8006c08:	898a      	ldrh	r2, [r1, #12]
 8006c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	0710      	lsls	r0, r2, #28
 8006c10:	460c      	mov	r4, r1
 8006c12:	d457      	bmi.n	8006cc4 <__sflush_r+0xbc>
 8006c14:	684b      	ldr	r3, [r1, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dc04      	bgt.n	8006c24 <__sflush_r+0x1c>
 8006c1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dc01      	bgt.n	8006c24 <__sflush_r+0x1c>
 8006c20:	2000      	movs	r0, #0
 8006c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	d0fa      	beq.n	8006c20 <__sflush_r+0x18>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c30:	682f      	ldr	r7, [r5, #0]
 8006c32:	6a21      	ldr	r1, [r4, #32]
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	d032      	beq.n	8006c9e <__sflush_r+0x96>
 8006c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	075a      	lsls	r2, r3, #29
 8006c3e:	d505      	bpl.n	8006c4c <__sflush_r+0x44>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	1ac0      	subs	r0, r0, r3
 8006c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c46:	b10b      	cbz	r3, 8006c4c <__sflush_r+0x44>
 8006c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c4a:	1ac0      	subs	r0, r0, r3
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c52:	4628      	mov	r0, r5
 8006c54:	6a21      	ldr	r1, [r4, #32]
 8006c56:	47b0      	blx	r6
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	d106      	bne.n	8006c6c <__sflush_r+0x64>
 8006c5e:	6829      	ldr	r1, [r5, #0]
 8006c60:	291d      	cmp	r1, #29
 8006c62:	d82b      	bhi.n	8006cbc <__sflush_r+0xb4>
 8006c64:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <__sflush_r+0x100>)
 8006c66:	410a      	asrs	r2, r1
 8006c68:	07d6      	lsls	r6, r2, #31
 8006c6a:	d427      	bmi.n	8006cbc <__sflush_r+0xb4>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	6062      	str	r2, [r4, #4]
 8006c70:	6922      	ldr	r2, [r4, #16]
 8006c72:	04d9      	lsls	r1, r3, #19
 8006c74:	6022      	str	r2, [r4, #0]
 8006c76:	d504      	bpl.n	8006c82 <__sflush_r+0x7a>
 8006c78:	1c42      	adds	r2, r0, #1
 8006c7a:	d101      	bne.n	8006c80 <__sflush_r+0x78>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b903      	cbnz	r3, 8006c82 <__sflush_r+0x7a>
 8006c80:	6560      	str	r0, [r4, #84]	; 0x54
 8006c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c84:	602f      	str	r7, [r5, #0]
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d0ca      	beq.n	8006c20 <__sflush_r+0x18>
 8006c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	d002      	beq.n	8006c98 <__sflush_r+0x90>
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7ff fbee 	bl	8006474 <_free_r>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8006c9c:	e7c1      	b.n	8006c22 <__sflush_r+0x1a>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b0      	blx	r6
 8006ca4:	1c41      	adds	r1, r0, #1
 8006ca6:	d1c8      	bne.n	8006c3a <__sflush_r+0x32>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0c5      	beq.n	8006c3a <__sflush_r+0x32>
 8006cae:	2b1d      	cmp	r3, #29
 8006cb0:	d001      	beq.n	8006cb6 <__sflush_r+0xae>
 8006cb2:	2b16      	cmp	r3, #22
 8006cb4:	d101      	bne.n	8006cba <__sflush_r+0xb2>
 8006cb6:	602f      	str	r7, [r5, #0]
 8006cb8:	e7b2      	b.n	8006c20 <__sflush_r+0x18>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	e7ae      	b.n	8006c22 <__sflush_r+0x1a>
 8006cc4:	690f      	ldr	r7, [r1, #16]
 8006cc6:	2f00      	cmp	r7, #0
 8006cc8:	d0aa      	beq.n	8006c20 <__sflush_r+0x18>
 8006cca:	0793      	lsls	r3, r2, #30
 8006ccc:	bf18      	it	ne
 8006cce:	2300      	movne	r3, #0
 8006cd0:	680e      	ldr	r6, [r1, #0]
 8006cd2:	bf08      	it	eq
 8006cd4:	694b      	ldreq	r3, [r1, #20]
 8006cd6:	1bf6      	subs	r6, r6, r7
 8006cd8:	600f      	str	r7, [r1, #0]
 8006cda:	608b      	str	r3, [r1, #8]
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	dd9f      	ble.n	8006c20 <__sflush_r+0x18>
 8006ce0:	4633      	mov	r3, r6
 8006ce2:	463a      	mov	r2, r7
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	6a21      	ldr	r1, [r4, #32]
 8006ce8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006cec:	47e0      	blx	ip
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	dc06      	bgt.n	8006d00 <__sflush_r+0xf8>
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	e790      	b.n	8006c22 <__sflush_r+0x1a>
 8006d00:	4407      	add	r7, r0
 8006d02:	1a36      	subs	r6, r6, r0
 8006d04:	e7ea      	b.n	8006cdc <__sflush_r+0xd4>
 8006d06:	bf00      	nop
 8006d08:	dfbffffe 	.word	0xdfbffffe

08006d0c <_fflush_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	4605      	mov	r5, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	b913      	cbnz	r3, 8006d1c <_fflush_r+0x10>
 8006d16:	2500      	movs	r5, #0
 8006d18:	4628      	mov	r0, r5
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	b118      	cbz	r0, 8006d26 <_fflush_r+0x1a>
 8006d1e:	6a03      	ldr	r3, [r0, #32]
 8006d20:	b90b      	cbnz	r3, 8006d26 <_fflush_r+0x1a>
 8006d22:	f7ff f9af 	bl	8006084 <__sinit>
 8006d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f3      	beq.n	8006d16 <_fflush_r+0xa>
 8006d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d30:	07d0      	lsls	r0, r2, #31
 8006d32:	d404      	bmi.n	8006d3e <_fflush_r+0x32>
 8006d34:	0599      	lsls	r1, r3, #22
 8006d36:	d402      	bmi.n	8006d3e <_fflush_r+0x32>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f7ff fb98 	bl	800646e <__retarget_lock_acquire_recursive>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4621      	mov	r1, r4
 8006d42:	f7ff ff61 	bl	8006c08 <__sflush_r>
 8006d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d48:	4605      	mov	r5, r0
 8006d4a:	07da      	lsls	r2, r3, #31
 8006d4c:	d4e4      	bmi.n	8006d18 <_fflush_r+0xc>
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	059b      	lsls	r3, r3, #22
 8006d52:	d4e1      	bmi.n	8006d18 <_fflush_r+0xc>
 8006d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d56:	f7ff fb8b 	bl	8006470 <__retarget_lock_release_recursive>
 8006d5a:	e7dd      	b.n	8006d18 <_fflush_r+0xc>

08006d5c <__swhatbuf_r>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	460c      	mov	r4, r1
 8006d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d64:	4615      	mov	r5, r2
 8006d66:	2900      	cmp	r1, #0
 8006d68:	461e      	mov	r6, r3
 8006d6a:	b096      	sub	sp, #88	; 0x58
 8006d6c:	da0c      	bge.n	8006d88 <__swhatbuf_r+0x2c>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	2100      	movs	r1, #0
 8006d72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d76:	bf0c      	ite	eq
 8006d78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d7c:	2340      	movne	r3, #64	; 0x40
 8006d7e:	2000      	movs	r0, #0
 8006d80:	6031      	str	r1, [r6, #0]
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	b016      	add	sp, #88	; 0x58
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	466a      	mov	r2, sp
 8006d8a:	f000 f849 	bl	8006e20 <_fstat_r>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dbed      	blt.n	8006d6e <__swhatbuf_r+0x12>
 8006d92:	9901      	ldr	r1, [sp, #4]
 8006d94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d9c:	4259      	negs	r1, r3
 8006d9e:	4159      	adcs	r1, r3
 8006da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da4:	e7eb      	b.n	8006d7e <__swhatbuf_r+0x22>

08006da6 <__smakebuf_r>:
 8006da6:	898b      	ldrh	r3, [r1, #12]
 8006da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006daa:	079d      	lsls	r5, r3, #30
 8006dac:	4606      	mov	r6, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	d507      	bpl.n	8006dc2 <__smakebuf_r+0x1c>
 8006db2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	2301      	movs	r3, #1
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	466a      	mov	r2, sp
 8006dc4:	ab01      	add	r3, sp, #4
 8006dc6:	f7ff ffc9 	bl	8006d5c <__swhatbuf_r>
 8006dca:	9900      	ldr	r1, [sp, #0]
 8006dcc:	4605      	mov	r5, r0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff fbb8 	bl	8006544 <_malloc_r>
 8006dd4:	b948      	cbnz	r0, 8006dea <__smakebuf_r+0x44>
 8006dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dda:	059a      	lsls	r2, r3, #22
 8006ddc:	d4ef      	bmi.n	8006dbe <__smakebuf_r+0x18>
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	f043 0302 	orr.w	r3, r3, #2
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	e7e3      	b.n	8006db2 <__smakebuf_r+0xc>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	6020      	str	r0, [r4, #0]
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	81a3      	strh	r3, [r4, #12]
 8006df4:	9b00      	ldr	r3, [sp, #0]
 8006df6:	6120      	str	r0, [r4, #16]
 8006df8:	6163      	str	r3, [r4, #20]
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	b15b      	cbz	r3, 8006e16 <__smakebuf_r+0x70>
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e04:	f000 f81e 	bl	8006e44 <_isatty_r>
 8006e08:	b128      	cbz	r0, 8006e16 <__smakebuf_r+0x70>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f023 0303 	bic.w	r3, r3, #3
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	431d      	orrs	r5, r3
 8006e1a:	81a5      	strh	r5, [r4, #12]
 8006e1c:	e7cf      	b.n	8006dbe <__smakebuf_r+0x18>
	...

08006e20 <_fstat_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	2300      	movs	r3, #0
 8006e24:	4d06      	ldr	r5, [pc, #24]	; (8006e40 <_fstat_r+0x20>)
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	f7fb f8e1 	bl	8001ff4 <_fstat>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	d102      	bne.n	8006e3c <_fstat_r+0x1c>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	b103      	cbz	r3, 8006e3c <_fstat_r+0x1c>
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}
 8006e3e:	bf00      	nop
 8006e40:	200003c0 	.word	0x200003c0

08006e44 <_isatty_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	2300      	movs	r3, #0
 8006e48:	4d05      	ldr	r5, [pc, #20]	; (8006e60 <_isatty_r+0x1c>)
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f7fb f8df 	bl	8002012 <_isatty>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_isatty_r+0x1a>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_isatty_r+0x1a>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	200003c0 	.word	0x200003c0

08006e64 <_sbrk_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	2300      	movs	r3, #0
 8006e68:	4d05      	ldr	r5, [pc, #20]	; (8006e80 <_sbrk_r+0x1c>)
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	f7fb f8e6 	bl	8002040 <_sbrk>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_sbrk_r+0x1a>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_sbrk_r+0x1a>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	200003c0 	.word	0x200003c0

08006e84 <memchr>:
 8006e84:	4603      	mov	r3, r0
 8006e86:	b510      	push	{r4, lr}
 8006e88:	b2c9      	uxtb	r1, r1
 8006e8a:	4402      	add	r2, r0
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	d101      	bne.n	8006e96 <memchr+0x12>
 8006e92:	2000      	movs	r0, #0
 8006e94:	e003      	b.n	8006e9e <memchr+0x1a>
 8006e96:	7804      	ldrb	r4, [r0, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	428c      	cmp	r4, r1
 8006e9c:	d1f6      	bne.n	8006e8c <memchr+0x8>
 8006e9e:	bd10      	pop	{r4, pc}

08006ea0 <_init>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr

08006eac <_fini>:
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	bf00      	nop
 8006eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb2:	bc08      	pop	{r3}
 8006eb4:	469e      	mov	lr, r3
 8006eb6:	4770      	bx	lr
