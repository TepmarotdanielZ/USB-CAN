
F103c8_TEST_USB_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003948  08003948  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003948  08003948  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003948  08003948  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000010  08003960  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003960  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afac  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bff  00000000  00000000  0002afe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001712f  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baf1  00000000  00000000  0004522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b30  00000000  00000000  00050d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dbc  00000000  00000000  000d78a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800390c 	.word	0x0800390c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800390c 	.word	0x0800390c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <MX_CAN_Init+0xa4>)
 8000652:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000656:	2209      	movs	r2, #9
 8000658:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_CAN_Init+0xa0>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800066c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_CAN_Init+0xa0>)
 800067c:	2200      	movs	r2, #0
 800067e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000682:	2200      	movs	r2, #0
 8000684:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000688:	2200      	movs	r2, #0
 800068a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_CAN_Init+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_CAN_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <MX_CAN_Init+0xa0>)
 800069a:	f000 fce5 	bl	8001068 <HAL_CAN_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006a4:	f000 fab0 	bl	8000c08 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  CAN_FilterTypeDef canfilterconfig;

     canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
     canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80006ac:	230a      	movs	r3, #10
 80006ae:	617b      	str	r3, [r7, #20]
     canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
     canfilterconfig.FilterIdHigh = 0x111<<5;
 80006b4:	f242 2320 	movw	r3, #8736	; 0x2220
 80006b8:	603b      	str	r3, [r7, #0]
     canfilterconfig.FilterIdLow = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
     canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 80006be:	f242 2320 	movw	r3, #8736	; 0x2220
 80006c2:	60bb      	str	r3, [r7, #8]
     canfilterconfig.FilterMaskIdLow = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
     canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
     canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
     canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24

     HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <MX_CAN_Init+0xa0>)
 80006da:	f000 fdc0 	bl	800125e <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000058 	.word	0x20000058
 80006ec:	40006400 	.word	0x40006400

080006f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <HAL_CAN_MspInit+0x9c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d139      	bne.n	8000784 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071a:	61d3      	str	r3, [r2, #28]
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a18      	ldr	r2, [pc, #96]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000756:	f001 fbd5 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000770:	f001 fbc8 	bl	8001f04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2015      	movs	r0, #21
 800077a:	f001 fb8c 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800077e:	2015      	movs	r0, #21
 8000780:	f001 fba5 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40006400 	.word	0x40006400
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x40>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000

080007dc <map>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

	/* MAP */

		float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output) {
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	603b      	str	r3, [r7, #0]
			return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f7ff fcb1 	bl	8000154 <__aeabi_fsub>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461c      	mov	r4, r3
 80007f6:	6839      	ldr	r1, [r7, #0]
 80007f8:	6a38      	ldr	r0, [r7, #32]
 80007fa:	f7ff fcab 	bl	8000154 <__aeabi_fsub>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	4620      	mov	r0, r4
 8000804:	f7ff fdb0 	bl	8000368 <__aeabi_fmul>
 8000808:	4603      	mov	r3, r0
 800080a:	461c      	mov	r4, r3
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fca0 	bl	8000154 <__aeabi_fsub>
 8000814:	4603      	mov	r3, r0
 8000816:	4619      	mov	r1, r3
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fe59 	bl	80004d0 <__aeabi_fdiv>
 800081e:	4603      	mov	r3, r0
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fc98 	bl	8000158 <__addsf3>
 8000828:	4603      	mov	r3, r0
		}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bd90      	pop	{r4, r7, pc}
	...

08000834 <HAL_CAN_RxFifo1MsgPendingCallback>:


	/* STM32 INTERUPP RECEIVER FROM USB CAN */

		void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 800083e:	4a32      	ldr	r2, [pc, #200]	; (8000908 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8000840:	2101      	movs	r1, #1
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 fee7 	bl	8001616 <HAL_CAN_GetRxMessage>
			cntt++;
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000852:	701a      	strb	r2, [r3, #0]
			while (cntt - 100 > 0) {
 8000854:	e007      	b.n	8000866 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	482d      	ldr	r0, [pc, #180]	; (8000910 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 800085c:	f001 fcd6 	bl	800220c <HAL_GPIO_TogglePin>
				cntt = 0;
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
			while (cntt - 100 > 0) {
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b64      	cmp	r3, #100	; 0x64
 800086c:	d8f3      	bhi.n	8000856 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
			}

		/* DATA RECIEVER FROM USB CAN */

			if (RxHeader.DLC == 8) {
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	2b08      	cmp	r3, #8
 8000874:	d142      	bne.n	80008fc <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
			RxData1 = (RxData[0] << 8) | RxData[1];
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 800087e:	7852      	ldrb	r2, [r2, #1]
 8000880:	4313      	orrs	r3, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fd1c 	bl	80002c0 <__aeabi_i2f>
 8000888:	4603      	mov	r3, r0
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 800088c:	6013      	str	r3, [r2, #0]
			RxData2 = (RxData[2] << 8) | RxData[3];
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000896:	78d2      	ldrb	r2, [r2, #3]
 8000898:	4313      	orrs	r3, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 80008a4:	6013      	str	r3, [r2, #0]
			RxData3 = (RxData[4] << 8) | RxData[5];
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	4a15      	ldr	r2, [pc, #84]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80008ae:	7952      	ldrb	r2, [r2, #5]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fd04 	bl	80002c0 <__aeabi_i2f>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 80008bc:	6013      	str	r3, [r2, #0]
			RxData4 = (RxData[6] << 8) | RxData[7];
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80008c0:	799b      	ldrb	r3, [r3, #6]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 80008c6:	79d2      	ldrb	r2, [r2, #7]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fcf8 	bl	80002c0 <__aeabi_i2f>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80008d4:	6013      	str	r3, [r2, #0]

		/* TRANFER TO SPEED */

			V1 = RxData1;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_CAN_RxFifo1MsgPendingCallback+0xe0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80008dc:	6013      	str	r3, [r2, #0]
			V2 = RxData2;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80008e4:	6013      	str	r3, [r2, #0]
			V3 = RxData3;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 80008ec:	6013      	str	r3, [r2, #0]
			V4 = RxData4;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 80008f4:	6013      	str	r3, [r2, #0]

			flag = 1;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_CAN_RxFifo1MsgPendingCallback+0x100>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]

		}
	}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000090 	.word	0x20000090
 8000908:	200000b0 	.word	0x200000b0
 800090c:	20000080 	.word	0x20000080
 8000910:	40011000 	.word	0x40011000
 8000914:	2000002c 	.word	0x2000002c
 8000918:	20000030 	.word	0x20000030
 800091c:	20000034 	.word	0x20000034
 8000920:	20000038 	.word	0x20000038
 8000924:	2000003c 	.word	0x2000003c
 8000928:	20000040 	.word	0x20000040
 800092c:	20000044 	.word	0x20000044
 8000930:	20000048 	.word	0x20000048
 8000934:	20000054 	.word	0x20000054

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fb31 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f89b 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f7ff ff27 	bl	8000798 <MX_GPIO_Init>
  MX_CAN_Init();
 800094a:	f7ff fe7d 	bl	8000648 <MX_CAN_Init>
  MX_TIM3_Init();
 800094e:	f000 fa43 	bl	8000dd8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000952:	f000 f9d3 	bl	8000cfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    /* CAN */

  	HAL_CAN_Start(&hcan);
 8000956:	483e      	ldr	r0, [pc, #248]	; (8000a50 <main+0x118>)
 8000958:	f000 fd4a 	bl	80013f0 <HAL_CAN_Start>

  	/* STRUCTUR TRANSMITTER DATA */

  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800095c:	2110      	movs	r1, #16
 800095e:	483c      	ldr	r0, [pc, #240]	; (8000a50 <main+0x118>)
 8000960:	f000 ff7a 	bl	8001858 <HAL_CAN_ActivateNotification>
  	TxHeader.DLC = 8;
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <main+0x11c>)
 8000966:	2208      	movs	r2, #8
 8000968:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 800096a:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <main+0x11c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <main+0x11c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x103; //0b11001010001
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <main+0x11c>)
 8000978:	f240 1203 	movw	r2, #259	; 0x103
 800097c:	601a      	str	r2, [r3, #0]

  	/* TIMER RGB */

	HAL_TIM_Base_Start_IT(&htim3);
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <main+0x120>)
 8000980:	f002 f88a 	bl	8002a98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000984:	2100      	movs	r1, #0
 8000986:	4835      	ldr	r0, [pc, #212]	; (8000a5c <main+0x124>)
 8000988:	f002 f928 	bl	8002bdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800098c:	2104      	movs	r1, #4
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <main+0x124>)
 8000990:	f002 f924 	bl	8002bdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000994:	2108      	movs	r1, #8
 8000996:	4831      	ldr	r0, [pc, #196]	; (8000a5c <main+0x124>)
 8000998:	f002 f920 	bl	8002bdc <HAL_TIM_PWM_Start>

	/* MAP TX DATA FROM 8BIT TO 16BIT */

	V1_out = map(V,0,255,0,65535);
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <main+0x128>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc89 	bl	80002b8 <__aeabi_ui2f>
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <main+0x12c>)
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <main+0x130>)
 80009b0:	f04f 0100 	mov.w	r1, #0
 80009b4:	f7ff ff12 	bl	80007dc <map>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe24 	bl	8000608 <__aeabi_f2uiz>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <main+0x134>)
 80009c6:	801a      	strh	r2, [r3, #0]
	V2_out = map(V,0,255,0,65535);
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <main+0x128>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fc73 	bl	80002b8 <__aeabi_ui2f>
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <main+0x12c>)
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <main+0x130>)
 80009dc:	f04f 0100 	mov.w	r1, #0
 80009e0:	f7ff fefc 	bl	80007dc <map>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe0e 	bl	8000608 <__aeabi_f2uiz>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <main+0x138>)
 80009f2:	801a      	strh	r2, [r3, #0]
	V3_out = map(V,0,255,0,65535);
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <main+0x128>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fc5d 	bl	80002b8 <__aeabi_ui2f>
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <main+0x12c>)
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <main+0x130>)
 8000a08:	f04f 0100 	mov.w	r1, #0
 8000a0c:	f7ff fee6 	bl	80007dc <map>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fdf8 	bl	8000608 <__aeabi_f2uiz>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <main+0x13c>)
 8000a1e:	801a      	strh	r2, [r3, #0]
	V4_out = map(V,0,255,0,65535);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <main+0x128>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc47 	bl	80002b8 <__aeabi_ui2f>
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <main+0x12c>)
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <main+0x130>)
 8000a34:	f04f 0100 	mov.w	r1, #0
 8000a38:	f7ff fed0 	bl	80007dc <map>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fde2 	bl	8000608 <__aeabi_f2uiz>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <main+0x140>)
 8000a4a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x114>
 8000a4e:	bf00      	nop
 8000a50:	20000058 	.word	0x20000058
 8000a54:	20000098 	.word	0x20000098
 8000a58:	200000cc 	.word	0x200000cc
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	20000000 	.word	0x20000000
 8000a64:	477fff00 	.word	0x477fff00
 8000a68:	437f0000 	.word	0x437f0000
 8000a6c:	2000004c 	.word	0x2000004c
 8000a70:	2000004e 	.word	0x2000004e
 8000a74:	20000050 	.word	0x20000050
 8000a78:	20000052 	.word	0x20000052

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2228      	movs	r2, #40	; 0x28
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 ff36 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0318 	add.w	r3, r7, #24
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fbbb 	bl	8002240 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ad0:	f000 f89a 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fe26 	bl	8002740 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000afa:	f000 f885 	bl	8000c08 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3740      	adds	r7, #64	; 0x40
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* MAKER TIMER INTERRUPP 1mS */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d157      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0xc2>
		TIM2->CCR1 = V1; // PWM BINK LED
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd70 	bl	8000608 <__aeabi_f2uiz>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	6363      	str	r3, [r4, #52]	; 0x34
		TIM2->CCR2 = V2; // PWM BINK LED
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fd67 	bl	8000608 <__aeabi_f2uiz>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM2->CCR3 = V3; // PWM BINK LED
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fd5e 	bl	8000608 <__aeabi_f2uiz>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	63e3      	str	r3, [r4, #60]	; 0x3c

		/* TX DATA SEND TO PC MAP 16BIT TO 8BIT COZ DATA CAN 1DATA=8BIT */

		TxData[0] = ((V1_out & 0xFF00) >> 8);
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		TxData[1] = (V1_out & 0x00FF);
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b66:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((V2_out & 0xFF00) >> 8);
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b74:	709a      	strb	r2, [r3, #2]
		TxData[3] = (V2_out & 0x00FF);
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b7e:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((V3_out & 0xFF00) >> 8);
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b8c:	711a      	strb	r2, [r3, #4]
		TxData[5] = (V3_out & 0x00FF);
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b96:	715a      	strb	r2, [r3, #5]
		TxData[6] = ((V4_out & 0xFF00) >> 8);
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ba4:	719a      	strb	r2, [r3, #6]
		TxData[7] = (V4_out & 0x00FF);
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bae:	71da      	strb	r2, [r3, #7]
		if (flag ==1)
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d108      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0xc2>
		{

			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bbc:	4910      	ldr	r1, [pc, #64]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000bbe:	4811      	ldr	r0, [pc, #68]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000bc0:	f000 fc5a 	bl	8001478 <HAL_CAN_AddTxMessage>
			flag=0;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	2000003c 	.word	0x2000003c
 8000bdc:	20000040 	.word	0x20000040
 8000be0:	20000044 	.word	0x20000044
 8000be4:	2000004c 	.word	0x2000004c
 8000be8:	20000084 	.word	0x20000084
 8000bec:	2000004e 	.word	0x2000004e
 8000bf0:	20000050 	.word	0x20000050
 8000bf4:	20000052 	.word	0x20000052
 8000bf8:	20000054 	.word	0x20000054
 8000bfc:	2000008c 	.word	0x2000008c
 8000c00:	20000098 	.word	0x20000098
 8000c04:	20000058 	.word	0x20000058

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_MspInit+0x60>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_MspInit+0x60>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 f9b7 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <CAN1_RX1_IRQHandler+0x10>)
 8000cce:	f000 fde8 	bl	80018a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000058 	.word	0x20000058

08000cdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM3_IRQHandler+0x10>)
 8000ce2:	f002 f81d 	bl	8002d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000cc 	.word	0x200000cc

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d46:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d48:	f001 fef8 	bl	8002b3c <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d52:	f7ff ff59 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4619      	mov	r1, r3
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d66:	f002 fd35 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d70:	f7ff ff4a 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000d8c:	f002 f8d0 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d96:	f7ff ff37 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000da2:	f002 f8c5 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dac:	f7ff ff2c 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2208      	movs	r2, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000db8:	f002 f8ba 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000dc2:	f7ff ff21 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <MX_TIM2_Init+0xd8>)
 8000dc8:	f000 f896 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000114 	.word	0x20000114

08000dd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000df6:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <MX_TIM3_Init+0x98>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000dfc:	2247      	movs	r2, #71	; 0x47
 8000dfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e1c:	f001 fdec 	bl	80029f8 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e26:	f7ff feef 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e38:	f002 f93c 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f7ff fee1 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM3_Init+0x94>)
 8000e54:	f002 fcbe 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e5e:	f7ff fed3 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000cc 	.word	0x200000cc
 8000e70:	40000400 	.word	0x40000400

08000e74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d10b      	bne.n	8000e9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x34>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x34>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x34>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d113      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201d      	movs	r0, #29
 8000edc:	f000 ffdb 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee0:	201d      	movs	r0, #29
 8000ee2:	f000 fff4 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f16:	d117      	bne.n	8000f48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_MspPostInit+0x58>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_TIM_MspPostInit+0x58>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_MspPostInit+0x58>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f30:	2307      	movs	r3, #7
 8000f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4804      	ldr	r0, [pc, #16]	; (8000f54 <HAL_TIM_MspPostInit+0x5c>)
 8000f44:	f000 ffde 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800

08000f58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f58:	f7ff feca 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f5e:	490c      	ldr	r1, [pc, #48]	; (8000f90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f74:	4c09      	ldr	r4, [pc, #36]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f002 fc97 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff fcd7 	bl	8000938 <main>
  bx lr
 8000f8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f94:	08003950 	.word	0x08003950
  ldr r2, =_sbss
 8000f98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f9c:	20000160 	.word	0x20000160

08000fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_2_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x28>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 ff63 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe28 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 ff7b 	bl	8001eea <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 ff43 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x1c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x20>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_IncTick+0x20>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	2000000c 	.word	0x2000000c
 8001050:	2000015c 	.word	0x2000015c

08001054 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <HAL_GetTick+0x10>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	2000015c 	.word	0x2000015c

08001068 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0ed      	b.n	8001256 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fb32 	bl	80006f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff ffda 	bl	8001054 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a2:	e012      	b.n	80010ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a4:	f7ff ffd6 	bl	8001054 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d90b      	bls.n	80010ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0c5      	b.n	8001256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0e5      	beq.n	80010a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0202 	bic.w	r2, r2, #2
 80010e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e8:	f7ff ffb4 	bl	8001054 <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ee:	e012      	b.n	8001116 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f0:	f7ff ffb0 	bl	8001054 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	d90b      	bls.n	8001116 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2205      	movs	r2, #5
 800110e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e09f      	b.n	8001256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e5      	bne.n	80010f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d108      	bne.n	800113e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e007      	b.n	800114e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7e5b      	ldrb	r3, [r3, #25]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e007      	b.n	8001178 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001176:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e9b      	ldrb	r3, [r3, #26]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d108      	bne.n	8001192 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e007      	b.n	80011a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0220 	bic.w	r2, r2, #32
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7edb      	ldrb	r3, [r3, #27]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0210 	bic.w	r2, r2, #16
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e007      	b.n	80011cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0210 	orr.w	r2, r2, #16
 80011ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7f1b      	ldrb	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0208 	orr.w	r2, r2, #8
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0208 	bic.w	r2, r2, #8
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7f5b      	ldrb	r3, [r3, #29]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0204 	orr.w	r2, r2, #4
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e007      	b.n	8001220 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0204 	bic.w	r2, r2, #4
 800121e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	ea42 0103 	orr.w	r1, r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800125e:	b480      	push	{r7}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001276:	7cfb      	ldrb	r3, [r7, #19]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <HAL_CAN_ConfigFilter+0x26>
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	2b02      	cmp	r3, #2
 8001280:	f040 80aa 	bne.w	80013d8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d123      	bne.n	8001306 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	401a      	ands	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3248      	adds	r2, #72	; 0x48
 80012e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fc:	6979      	ldr	r1, [r7, #20]
 80012fe:	3348      	adds	r3, #72	; 0x48
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d122      	bne.n	8001354 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800132e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3248      	adds	r2, #72	; 0x48
 8001334:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001348:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	6979      	ldr	r1, [r7, #20]
 800134c:	3348      	adds	r3, #72	; 0x48
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800136e:	e007      	b.n	8001380 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	431a      	orrs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800139a:	e007      	b.n	80013ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013ca:	f023 0201 	bic.w	r2, r3, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e006      	b.n	80013e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d12e      	bne.n	8001462 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800141c:	f7ff fe1a 	bl	8001054 <HAL_GetTick>
 8001420:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001422:	e012      	b.n	800144a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001424:	f7ff fe16 	bl	8001054 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d90b      	bls.n	800144a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2205      	movs	r2, #5
 8001442:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e012      	b.n	8001470 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e5      	bne.n	8001424 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e006      	b.n	8001470 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d003      	beq.n	80014a4 <HAL_CAN_AddTxMessage+0x2c>
 800149c:	7ffb      	ldrb	r3, [r7, #31]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	f040 80ad 	bne.w	80015fe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8095 	beq.w	80015ee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	0e1b      	lsrs	r3, r3, #24
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014ce:	2201      	movs	r2, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10d      	bne.n	80014fc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ea:	68f9      	ldr	r1, [r7, #12]
 80014ec:	6809      	ldr	r1, [r1, #0]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3318      	adds	r3, #24
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	440b      	add	r3, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00f      	b.n	800151c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001506:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001510:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3318      	adds	r3, #24
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	440b      	add	r3, r1
 800151a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3318      	adds	r3, #24
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	440b      	add	r3, r1
 800152c:	3304      	adds	r3, #4
 800152e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	7d1b      	ldrb	r3, [r3, #20]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d111      	bne.n	800155c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3318      	adds	r3, #24
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	3304      	adds	r3, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3318      	adds	r3, #24
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	440b      	add	r3, r1
 8001558:	3304      	adds	r3, #4
 800155a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3307      	adds	r3, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	061a      	lsls	r2, r3, #24
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3306      	adds	r3, #6
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3305      	adds	r3, #5
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	4313      	orrs	r3, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	3204      	adds	r2, #4
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	4610      	mov	r0, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	6811      	ldr	r1, [r2, #0]
 8001584:	ea43 0200 	orr.w	r2, r3, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001592:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3303      	adds	r3, #3
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	061a      	lsls	r2, r3, #24
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3302      	adds	r3, #2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3301      	adds	r3, #1
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	4313      	orrs	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	7812      	ldrb	r2, [r2, #0]
 80015b4:	4610      	mov	r0, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	ea43 0200 	orr.w	r2, r3, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	440b      	add	r3, r1
 80015c4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3318      	adds	r3, #24
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6811      	ldr	r1, [r2, #0]
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3318      	adds	r3, #24
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	440b      	add	r3, r1
 80015e8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e00e      	b.n	800160c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e006      	b.n	800160c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3724      	adds	r7, #36	; 0x24
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001616:	b480      	push	{r7}
 8001618:	b087      	sub	sp, #28
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d003      	beq.n	800163a <HAL_CAN_GetRxMessage+0x24>
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	2b02      	cmp	r3, #2
 8001636:	f040 8103 	bne.w	8001840 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10e      	bne.n	800165e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0f7      	b.n	800184e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d107      	bne.n	800167c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0e8      	b.n	800184e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	331b      	adds	r3, #27
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0204 	and.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	331b      	adds	r3, #27
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0d5b      	lsrs	r3, r3, #21
 80016aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	331b      	adds	r3, #27
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	331b      	adds	r3, #27
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0202 	and.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	331b      	adds	r3, #27
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2208      	movs	r2, #8
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	e00b      	b.n	800171a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	331b      	adds	r3, #27
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 020f 	and.w	r2, r3, #15
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	331b      	adds	r3, #27
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	331b      	adds	r3, #27
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	3304      	adds	r3, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0c1b      	lsrs	r3, r3, #16
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0a1a      	lsrs	r2, r3, #8
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4413      	add	r3, r2
 8001784:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0c1a      	lsrs	r2, r3, #16
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	3302      	adds	r3, #2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0e1a      	lsrs	r2, r3, #24
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3303      	adds	r3, #3
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3304      	adds	r3, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0a1a      	lsrs	r2, r3, #8
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3305      	adds	r3, #5
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0c1a      	lsrs	r2, r3, #16
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3306      	adds	r3, #6
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0e1a      	lsrs	r2, r3, #24
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3307      	adds	r3, #7
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0220 	orr.w	r2, r2, #32
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	e007      	b.n	800183c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0220 	orr.w	r2, r2, #32
 800183a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e006      	b.n	800184e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001868:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <HAL_CAN_ActivateNotification+0x1e>
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d109      	bne.n	800188a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6959      	ldr	r1, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e006      	b.n	8001898 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b08a      	sub	sp, #40	; 0x28
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d07c      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d023      	beq.n	800193a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f983 	bl	8001c10 <HAL_CAN_TxMailbox0CompleteCallback>
 800190a:	e016      	b.n	800193a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e00c      	b.n	800193a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	e002      	b.n	800193a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f986 	bl	8001c46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d024      	beq.n	800198e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f962 	bl	8001c22 <HAL_CAN_TxMailbox1CompleteCallback>
 800195e:	e016      	b.n	800198e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e00c      	b.n	800198e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	e002      	b.n	800198e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f965 	bl	8001c58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d024      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f941 	bl	8001c34 <HAL_CAN_TxMailbox2CompleteCallback>
 80019b2:	e016      	b.n	80019e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	e00c      	b.n	80019e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	e002      	b.n	80019e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f944 	bl	8001c6a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00c      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2210      	movs	r2, #16
 8001a04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f933 	bl	8001c8e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f91b 	bl	8001c7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00c      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2210      	movs	r2, #16
 8001a68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2208      	movs	r2, #8
 8001a84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f90a 	bl	8001ca0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe fec5 	bl	8000834 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00b      	beq.n	8001acc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8f3 	bl	8001cb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f8eb 	bl	8001cc4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d07b      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d072      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d043      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03e      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b70:	2b60      	cmp	r3, #96	; 0x60
 8001b72:	d02b      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x32a>
 8001b74:	2b60      	cmp	r3, #96	; 0x60
 8001b76:	d82e      	bhi.n	8001bd6 <HAL_CAN_IRQHandler+0x334>
 8001b78:	2b50      	cmp	r3, #80	; 0x50
 8001b7a:	d022      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x320>
 8001b7c:	2b50      	cmp	r3, #80	; 0x50
 8001b7e:	d82a      	bhi.n	8001bd6 <HAL_CAN_IRQHandler+0x334>
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d019      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x316>
 8001b84:	2b40      	cmp	r3, #64	; 0x40
 8001b86:	d826      	bhi.n	8001bd6 <HAL_CAN_IRQHandler+0x334>
 8001b88:	2b30      	cmp	r3, #48	; 0x30
 8001b8a:	d010      	beq.n	8001bae <HAL_CAN_IRQHandler+0x30c>
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	d822      	bhi.n	8001bd6 <HAL_CAN_IRQHandler+0x334>
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d002      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x2f8>
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d005      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b98:	e01d      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ba2:	e019      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bac:	e014      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb6:	e00f      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc0:	e00a      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bca:	e005      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd4:	e000      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bd6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001be6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2204      	movs	r2, #4
 8001bee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f867 	bl	8001cd6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4906      	ldr	r1, [pc, #24]	; (8001d80 <__NVIC_EnableIRQ+0x34>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff2d 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff42 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff35 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e169      	b.n	80021ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8158 	bne.w	80021e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4a98      	ldr	r2, [pc, #608]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4a98      	ldr	r2, [pc, #608]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a96      	ldr	r2, [pc, #600]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a96      	ldr	r2, [pc, #600]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a94      	ldr	r2, [pc, #592]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a90      	ldr	r2, [pc, #576]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a79      	ldr	r2, [pc, #484]	; (80021b8 <HAL_GPIO_Init+0x2b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b1 	beq.w	80021e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a48      	ldr	r2, [pc, #288]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x2cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002102:	492f      	ldr	r1, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	492c      	ldr	r1, [pc, #176]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4928      	ldr	r1, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	491e      	ldr	r1, [pc, #120]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4918      	ldr	r1, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4914      	ldr	r1, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e021      	b.n	80021e6 <HAL_GPIO_Init+0x2e2>
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f ae8e 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	372c      	adds	r7, #44	; 0x2c
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43d9      	mvns	r1, r3
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	400b      	ands	r3, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e26c      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002260:	4b92      	ldr	r3, [pc, #584]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b04      	cmp	r3, #4
 800226a:	d00c      	beq.n	8002286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800226c:	4b8f      	ldr	r3, [pc, #572]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d112      	bne.n	800229e <HAL_RCC_OscConfig+0x5e>
 8002278:	4b8c      	ldr	r3, [pc, #560]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d10b      	bne.n	800229e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	4b89      	ldr	r3, [pc, #548]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d06c      	beq.n	800236c <HAL_RCC_OscConfig+0x12c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d168      	bne.n	800236c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e246      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x76>
 80022a8:	4b80      	ldr	r3, [pc, #512]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a7f      	ldr	r2, [pc, #508]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0xd4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x98>
 80022be:	4b7b      	ldr	r3, [pc, #492]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7a      	ldr	r2, [pc, #488]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a77      	ldr	r2, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xd4>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0xbc>
 80022e2:	4b72      	ldr	r3, [pc, #456]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a71      	ldr	r2, [pc, #452]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6e      	ldr	r2, [pc, #440]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xd4>
 80022fc:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6a      	ldr	r2, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a67      	ldr	r2, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fe9a 	bl	8001054 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fe96 	bl	8001054 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1fa      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xe4>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fe86 	bl	8001054 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fe82 	bl	8001054 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1e6      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x10c>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d063      	beq.n	8002442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x18c>
 8002392:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x176>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1ba      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4939      	ldr	r1, [pc, #228]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e03a      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe fe3b 	bl	8001054 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fe37 	bl	8001054 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e19b      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4927      	ldr	r1, [pc, #156]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fe1a 	bl	8001054 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe fe16 	bl	8001054 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e17a      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d03a      	beq.n	80024c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d019      	beq.n	800248a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7fe fdfa 	bl	8001054 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fdf6 	bl	8001054 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e15a      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f000 fa9a 	bl	80029bc <RCC_Delay>
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_RCC_OscConfig+0x274>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe fde0 	bl	8001054 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002496:	e00f      	b.n	80024b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe fddc 	bl	8001054 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d908      	bls.n	80024b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e140      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	42420000 	.word	0x42420000
 80024b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	4b9e      	ldr	r3, [pc, #632]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e9      	bne.n	8002498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a6 	beq.w	800261e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b97      	ldr	r3, [pc, #604]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b94      	ldr	r3, [pc, #592]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a93      	ldr	r2, [pc, #588]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	61d3      	str	r3, [r2, #28]
 80024ee:	4b91      	ldr	r3, [pc, #580]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4b8e      	ldr	r3, [pc, #568]	; (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d118      	bne.n	800253c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250a:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a8a      	ldr	r2, [pc, #552]	; (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002516:	f7fe fd9d 	bl	8001054 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251e:	f7fe fd99 	bl	8001054 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b64      	cmp	r3, #100	; 0x64
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0fd      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b81      	ldr	r3, [pc, #516]	; (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x312>
 8002544:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	e02d      	b.n	80025ae <HAL_RCC_OscConfig+0x36e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x334>
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a75      	ldr	r2, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	e01c      	b.n	80025ae <HAL_RCC_OscConfig+0x36e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x356>
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a6c      	ldr	r2, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a69      	ldr	r2, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e00b      	b.n	80025ae <HAL_RCC_OscConfig+0x36e>
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a66      	ldr	r2, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a63      	ldr	r2, [pc, #396]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d015      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fd4d 	bl	8001054 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fd49 	bl	8001054 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0ab      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ee      	beq.n	80025be <HAL_RCC_OscConfig+0x37e>
 80025e0:	e014      	b.n	800260c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fd37 	bl	8001054 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fd33 	bl	8001054 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e095      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ee      	bne.n	80025ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d105      	bne.n	800261e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002612:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8081 	beq.w	800272a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002628:	4b42      	ldr	r3, [pc, #264]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d061      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d146      	bne.n	80026ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x4fc>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe fd07 	bl	8001054 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe fd03 	bl	8001054 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e067      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265c:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	492d      	ldr	r1, [pc, #180]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a19      	ldr	r1, [r3, #32]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	430b      	orrs	r3, r1
 8002696:	4927      	ldr	r1, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x4fc>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fcd7 	bl	8001054 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fcd3 	bl	8001054 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e037      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x46a>
 80026c8:	e02f      	b.n	800272a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_OscConfig+0x4fc>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fcc0 	bl	8001054 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fcbc 	bl	8001054 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e020      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x498>
 80026f6:	e018      	b.n	800272a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e013      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	42420060 	.word	0x42420060

08002740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0d0      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d910      	bls.n	8002784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4965      	ldr	r1, [pc, #404]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a58      	ldr	r2, [pc, #352]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d040      	beq.n	8002860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d115      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e073      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e06b      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4936      	ldr	r1, [pc, #216]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002830:	f7fe fc10 	bl	8001054 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fc0c 	bl	8001054 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e053      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d210      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	4922      	ldr	r1, [pc, #136]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x1c8>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1cc>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1d0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb6e 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	08003924 	.word	0x08003924
 800290c:	20000004 	.word	0x20000004
 8002910:	20000008 	.word	0x20000008

08002914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b04      	cmp	r3, #4
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x30>
 800293e:	2b08      	cmp	r3, #8
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x36>
 8002942:	e027      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002946:	613b      	str	r3, [r7, #16]
      break;
 8002948:	e027      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0c9b      	lsrs	r3, r3, #18
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0c5b      	lsrs	r3, r3, #17
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	fb02 f203 	mul.w	r2, r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e004      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	613b      	str	r3, [r7, #16]
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002996:	613b      	str	r3, [r7, #16]
      break;
 8002998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299a:	693b      	ldr	r3, [r7, #16]
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	007a1200 	.word	0x007a1200
 80029b0:	08003934 	.word	0x08003934
 80029b4:	08003944 	.word	0x08003944
 80029b8:	003d0900 	.word	0x003d0900

080029bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <RCC_Delay+0x34>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <RCC_Delay+0x38>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0a5b      	lsrs	r3, r3, #9
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d8:	bf00      	nop
  }
  while (Delay --);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	60fa      	str	r2, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f9      	bne.n	80029d8 <RCC_Delay+0x1c>
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	20000004 	.word	0x20000004
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e041      	b.n	8002a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fa44 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f000 fc28 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d001      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e03a      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_TIM_Base_Start_IT+0x98>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x58>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d009      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x58>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_TIM_Base_Start_IT+0xa0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d111      	bne.n	8002b14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d010      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	e007      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800

08002b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f986 	bl	8000e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fb86 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_TIM_PWM_Start+0x24>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e022      	b.n	8002c46 <HAL_TIM_PWM_Start+0x6a>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d109      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x3e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e015      	b.n	8002c46 <HAL_TIM_PWM_Start+0x6a>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x58>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_TIM_PWM_Start+0x6a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e05e      	b.n	8002d0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x82>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	e013      	b.n	8002c86 <HAL_TIM_PWM_Start+0xaa>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0x92>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	e00b      	b.n	8002c86 <HAL_TIM_PWM_Start+0xaa>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0xa2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	e003      	b.n	8002c86 <HAL_TIM_PWM_Start+0xaa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fd7c 	bl	800378c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <HAL_TIM_PWM_Start+0x138>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_TIM_PWM_Start+0x138>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_TIM_PWM_Start+0xfa>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d009      	beq.n	8002cd6 <HAL_TIM_PWM_Start+0xfa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_TIM_PWM_Start+0x13c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_TIM_PWM_Start+0xfa>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_TIM_PWM_Start+0x140>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d111      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d010      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	e007      	b.n	8002d0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800

08002d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d122      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d11b      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0202 	mvn.w	r2, #2
 8002d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa76 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa69 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa78 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0204 	mvn.w	r2, #4
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa4c 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa3f 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa4e 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0208 	mvn.w	r2, #8
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa22 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa15 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fa24 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0210 	mvn.w	r2, #16
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9f8 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9eb 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9fa 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0201 	mvn.w	r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fe32 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d107      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fce9 	bl	80038a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9be 	bl	8003278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0220 	mvn.w	r2, #32
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fcb4 	bl	8003890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ae      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	f200 809f 	bhi.w	800309c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	0800309d 	.word	0x0800309d
 8002f6c:	0800309d 	.word	0x0800309d
 8002f70:	0800309d 	.word	0x0800309d
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	0800309d 	.word	0x0800309d
 8002f7c:	0800309d 	.word	0x0800309d
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800309d 	.word	0x0800309d
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	0800309d 	.word	0x0800309d
 8002f94:	0800305b 	.word	0x0800305b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9d6 	bl	8003350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e064      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fa1c 	bl	800341c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e043      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa65 	bl	80034f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e023      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 faaf 	bl	80035c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_ConfigClockSource+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e0b4      	b.n	800323a <HAL_TIM_ConfigClockSource+0x186>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d03e      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0xd4>
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	f200 8087 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	f000 8086 	beq.w	8003226 <HAL_TIM_ConfigClockSource+0x172>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d87f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d01a      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xa6>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d87b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d050      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x11a>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d877      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d03c      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0xfa>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d873      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d058      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x13a>
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d86f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d064      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d86b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d060      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d867      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05c      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b10      	cmp	r3, #16
 8003156:	d05a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	e062      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f000 faf0 	bl	800374e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800317c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
      break;
 8003186:	e04f      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f000 fad9 	bl	800374e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e03c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 fa50 	bl	8003660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2150      	movs	r1, #80	; 0x50
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 faa7 	bl	800371a <TIM_ITRx_SetConfig>
      break;
 80031cc:	e02c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 fa6e 	bl	80036bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2160      	movs	r1, #96	; 0x60
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fa97 	bl	800371a <TIM_ITRx_SetConfig>
      break;
 80031ec:	e01c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 fa30 	bl	8003660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa87 	bl	800371a <TIM_ITRx_SetConfig>
      break;
 800320c:	e00c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 fa7e 	bl	800371a <TIM_ITRx_SetConfig>
      break;
 800321e:	e003      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e000      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
	...

0800328c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a29      	ldr	r2, [pc, #164]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TIM_Base_SetConfig+0xbc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a25      	ldr	r2, [pc, #148]	; (800334c <TIM_Base_SetConfig+0xc0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <TIM_Base_SetConfig+0xbc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <TIM_Base_SetConfig+0xc0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <TIM_Base_SetConfig+0xb8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 0201 	bic.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0308 	bic.w	r3, r3, #8
 80033b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00

0800341c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0210 	bic.w	r2, r3, #16
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <TIM_OC2_SetConfig+0xd0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <TIM_OC2_SetConfig+0xd0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d113      	bne.n	80034c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d113      	bne.n	800359a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00

080035c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <TIM_OC4_SetConfig+0x98>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d109      	bne.n	8003638 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00

08003660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 030a 	bic.w	r3, r3, #10
 800369c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	031b      	lsls	r3, r3, #12
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	621a      	str	r2, [r3, #32]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	f043 0307 	orr.w	r3, r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374e:	b480      	push	{r7}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003768:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	609a      	str	r2, [r3, #8]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e046      	b.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d009      	beq.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a12      	ldr	r2, [pc, #72]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10c      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4313      	orrs	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800

08003890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4d0c      	ldr	r5, [pc, #48]	; (80038ec <__libc_init_array+0x38>)
 80038ba:	4c0d      	ldr	r4, [pc, #52]	; (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	f000 f822 	bl	800390c <_init>
 80038c8:	2600      	movs	r6, #0
 80038ca:	4d0a      	ldr	r5, [pc, #40]	; (80038f4 <__libc_init_array+0x40>)
 80038cc:	4c0a      	ldr	r4, [pc, #40]	; (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08003948 	.word	0x08003948
 80038f0:	08003948 	.word	0x08003948
 80038f4:	08003948 	.word	0x08003948
 80038f8:	0800394c 	.word	0x0800394c

080038fc <memset>:
 80038fc:	4603      	mov	r3, r0
 80038fe:	4402      	add	r2, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	f803 1b01 	strb.w	r1, [r3], #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
